// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/private/jobmgrsvc/jobmgrsvc.proto

package jobmgrsvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	stateless "github.com/uber/peloton/.gen/peloton/api/v1alpha/job/stateless"
	peloton "github.com/uber/peloton/.gen/peloton/api/v1alpha/peloton"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for JobService.GetThrottledPods method.
type GetThrottledPodsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetThrottledPodsRequest) Reset()         { *m = GetThrottledPodsRequest{} }
func (m *GetThrottledPodsRequest) String() string { return proto.CompactTextString(m) }
func (*GetThrottledPodsRequest) ProtoMessage()    {}
func (*GetThrottledPodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{0}
}

func (m *GetThrottledPodsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetThrottledPodsRequest.Unmarshal(m, b)
}
func (m *GetThrottledPodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetThrottledPodsRequest.Marshal(b, m, deterministic)
}
func (m *GetThrottledPodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThrottledPodsRequest.Merge(m, src)
}
func (m *GetThrottledPodsRequest) XXX_Size() int {
	return xxx_messageInfo_GetThrottledPodsRequest.Size(m)
}
func (m *GetThrottledPodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThrottledPodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetThrottledPodsRequest proto.InternalMessageInfo

// Response message for JobService.GetThrottledPods method.
type GetThrottledPodsResponse struct {
	ThrottledPods        []*peloton.PodName `protobuf:"bytes,1,rep,name=throttled_pods,json=throttledPods,proto3" json:"throttled_pods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetThrottledPodsResponse) Reset()         { *m = GetThrottledPodsResponse{} }
func (m *GetThrottledPodsResponse) String() string { return proto.CompactTextString(m) }
func (*GetThrottledPodsResponse) ProtoMessage()    {}
func (*GetThrottledPodsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{1}
}

func (m *GetThrottledPodsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetThrottledPodsResponse.Unmarshal(m, b)
}
func (m *GetThrottledPodsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetThrottledPodsResponse.Marshal(b, m, deterministic)
}
func (m *GetThrottledPodsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetThrottledPodsResponse.Merge(m, src)
}
func (m *GetThrottledPodsResponse) XXX_Size() int {
	return xxx_messageInfo_GetThrottledPodsResponse.Size(m)
}
func (m *GetThrottledPodsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetThrottledPodsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetThrottledPodsResponse proto.InternalMessageInfo

func (m *GetThrottledPodsResponse) GetThrottledPods() []*peloton.PodName {
	if m != nil {
		return m.ThrottledPods
	}
	return nil
}

// Request message for JobService.RefreshJob method.
type RefreshJobRequest struct {
	// The job ID to look up the job.
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RefreshJobRequest) Reset()         { *m = RefreshJobRequest{} }
func (m *RefreshJobRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshJobRequest) ProtoMessage()    {}
func (*RefreshJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{2}
}

func (m *RefreshJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshJobRequest.Unmarshal(m, b)
}
func (m *RefreshJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshJobRequest.Marshal(b, m, deterministic)
}
func (m *RefreshJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshJobRequest.Merge(m, src)
}
func (m *RefreshJobRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshJobRequest.Size(m)
}
func (m *RefreshJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshJobRequest proto.InternalMessageInfo

func (m *RefreshJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

// Request message for JobService.QueryJobCache method.
type QueryJobCacheRequest struct {
	// spec used to query job cache
	Spec                 *QueryJobCacheRequest_CacheQuerySpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *QueryJobCacheRequest) Reset()         { *m = QueryJobCacheRequest{} }
func (m *QueryJobCacheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryJobCacheRequest) ProtoMessage()    {}
func (*QueryJobCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{3}
}

func (m *QueryJobCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobCacheRequest.Unmarshal(m, b)
}
func (m *QueryJobCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobCacheRequest.Marshal(b, m, deterministic)
}
func (m *QueryJobCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobCacheRequest.Merge(m, src)
}
func (m *QueryJobCacheRequest) XXX_Size() int {
	return xxx_messageInfo_QueryJobCacheRequest.Size(m)
}
func (m *QueryJobCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobCacheRequest proto.InternalMessageInfo

func (m *QueryJobCacheRequest) GetSpec() *QueryJobCacheRequest_CacheQuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// CacheQuerySpec specifies the list of query criteria for jobs,
// which can be served by cache directly
type QueryJobCacheRequest_CacheQuerySpec struct {
	// List of labels to query the jobs. Will match all jobs if the
	// list is empty.
	Labels []*peloton.Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// Query jobs by name. This is case sensitive and will
	// look for jobs with name matching the name string.
	// Will match all jobs if name is unset.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryJobCacheRequest_CacheQuerySpec) Reset()         { *m = QueryJobCacheRequest_CacheQuerySpec{} }
func (m *QueryJobCacheRequest_CacheQuerySpec) String() string { return proto.CompactTextString(m) }
func (*QueryJobCacheRequest_CacheQuerySpec) ProtoMessage()    {}
func (*QueryJobCacheRequest_CacheQuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{3, 0}
}

func (m *QueryJobCacheRequest_CacheQuerySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobCacheRequest_CacheQuerySpec.Unmarshal(m, b)
}
func (m *QueryJobCacheRequest_CacheQuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobCacheRequest_CacheQuerySpec.Marshal(b, m, deterministic)
}
func (m *QueryJobCacheRequest_CacheQuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobCacheRequest_CacheQuerySpec.Merge(m, src)
}
func (m *QueryJobCacheRequest_CacheQuerySpec) XXX_Size() int {
	return xxx_messageInfo_QueryJobCacheRequest_CacheQuerySpec.Size(m)
}
func (m *QueryJobCacheRequest_CacheQuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobCacheRequest_CacheQuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobCacheRequest_CacheQuerySpec proto.InternalMessageInfo

func (m *QueryJobCacheRequest_CacheQuerySpec) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *QueryJobCacheRequest_CacheQuerySpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Response message for JobService.QueryJobCache method.
type QueryJobCacheResponse struct {
	// List of job cache query result returned by server.
	Result               []*QueryJobCacheResponse_JobCache `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *QueryJobCacheResponse) Reset()         { *m = QueryJobCacheResponse{} }
func (m *QueryJobCacheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryJobCacheResponse) ProtoMessage()    {}
func (*QueryJobCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{4}
}

func (m *QueryJobCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobCacheResponse.Unmarshal(m, b)
}
func (m *QueryJobCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobCacheResponse.Marshal(b, m, deterministic)
}
func (m *QueryJobCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobCacheResponse.Merge(m, src)
}
func (m *QueryJobCacheResponse) XXX_Size() int {
	return xxx_messageInfo_QueryJobCacheResponse.Size(m)
}
func (m *QueryJobCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobCacheResponse proto.InternalMessageInfo

func (m *QueryJobCacheResponse) GetResult() []*QueryJobCacheResponse_JobCache {
	if m != nil {
		return m.Result
	}
	return nil
}

type QueryJobCacheResponse_JobCache struct {
	// The job identifier of the result.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The name of the job
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryJobCacheResponse_JobCache) Reset()         { *m = QueryJobCacheResponse_JobCache{} }
func (m *QueryJobCacheResponse_JobCache) String() string { return proto.CompactTextString(m) }
func (*QueryJobCacheResponse_JobCache) ProtoMessage()    {}
func (*QueryJobCacheResponse_JobCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{4, 0}
}

func (m *QueryJobCacheResponse_JobCache) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobCacheResponse_JobCache.Unmarshal(m, b)
}
func (m *QueryJobCacheResponse_JobCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobCacheResponse_JobCache.Marshal(b, m, deterministic)
}
func (m *QueryJobCacheResponse_JobCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobCacheResponse_JobCache.Merge(m, src)
}
func (m *QueryJobCacheResponse_JobCache) XXX_Size() int {
	return xxx_messageInfo_QueryJobCacheResponse_JobCache.Size(m)
}
func (m *QueryJobCacheResponse_JobCache) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobCacheResponse_JobCache.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobCacheResponse_JobCache proto.InternalMessageInfo

func (m *QueryJobCacheResponse_JobCache) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *QueryJobCacheResponse_JobCache) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Response message for JobService.RefreshJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type RefreshJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshJobResponse) Reset()         { *m = RefreshJobResponse{} }
func (m *RefreshJobResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshJobResponse) ProtoMessage()    {}
func (*RefreshJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{5}
}

func (m *RefreshJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshJobResponse.Unmarshal(m, b)
}
func (m *RefreshJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshJobResponse.Marshal(b, m, deterministic)
}
func (m *RefreshJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshJobResponse.Merge(m, src)
}
func (m *RefreshJobResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshJobResponse.Size(m)
}
func (m *RefreshJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshJobResponse proto.InternalMessageInfo

// Request message for JobService.GetJobCache method.
type GetJobCacheRequest struct {
	// The job ID to look up the job.
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetJobCacheRequest) Reset()         { *m = GetJobCacheRequest{} }
func (m *GetJobCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobCacheRequest) ProtoMessage()    {}
func (*GetJobCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{6}
}

func (m *GetJobCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobCacheRequest.Unmarshal(m, b)
}
func (m *GetJobCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetJobCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobCacheRequest.Merge(m, src)
}
func (m *GetJobCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobCacheRequest.Size(m)
}
func (m *GetJobCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobCacheRequest proto.InternalMessageInfo

func (m *GetJobCacheRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

// Response message for JobService.GetJobCache method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type GetJobCacheResponse struct {
	// The job configuration in cache of the matching job.
	Spec *stateless.JobSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// The job runtime in cache of the matching job.
	Status               *stateless.JobStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetJobCacheResponse) Reset()         { *m = GetJobCacheResponse{} }
func (m *GetJobCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobCacheResponse) ProtoMessage()    {}
func (*GetJobCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8abfd7fa95938d, []int{7}
}

func (m *GetJobCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobCacheResponse.Unmarshal(m, b)
}
func (m *GetJobCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetJobCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobCacheResponse.Merge(m, src)
}
func (m *GetJobCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetJobCacheResponse.Size(m)
}
func (m *GetJobCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobCacheResponse proto.InternalMessageInfo

func (m *GetJobCacheResponse) GetSpec() *stateless.JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *GetJobCacheResponse) GetStatus() *stateless.JobStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*GetThrottledPodsRequest)(nil), "peloton.private.jobmgr.GetThrottledPodsRequest")
	proto.RegisterType((*GetThrottledPodsResponse)(nil), "peloton.private.jobmgr.GetThrottledPodsResponse")
	proto.RegisterType((*RefreshJobRequest)(nil), "peloton.private.jobmgr.RefreshJobRequest")
	proto.RegisterType((*QueryJobCacheRequest)(nil), "peloton.private.jobmgr.QueryJobCacheRequest")
	proto.RegisterType((*QueryJobCacheRequest_CacheQuerySpec)(nil), "peloton.private.jobmgr.QueryJobCacheRequest.CacheQuerySpec")
	proto.RegisterType((*QueryJobCacheResponse)(nil), "peloton.private.jobmgr.QueryJobCacheResponse")
	proto.RegisterType((*QueryJobCacheResponse_JobCache)(nil), "peloton.private.jobmgr.QueryJobCacheResponse.JobCache")
	proto.RegisterType((*RefreshJobResponse)(nil), "peloton.private.jobmgr.RefreshJobResponse")
	proto.RegisterType((*GetJobCacheRequest)(nil), "peloton.private.jobmgr.GetJobCacheRequest")
	proto.RegisterType((*GetJobCacheResponse)(nil), "peloton.private.jobmgr.GetJobCacheResponse")
}

func init() {
	proto.RegisterFile("peloton/private/jobmgrsvc/jobmgrsvc.proto", fileDescriptor_eb8abfd7fa95938d)
}

var fileDescriptor_eb8abfd7fa95938d = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x69, 0x89, 0x60, 0xa2, 0x56, 0x74, 0x29, 0x90, 0x9a, 0x4b, 0xb0, 0x38, 0xa4, 0xa1,
	0xac, 0x69, 0x90, 0x90, 0x00, 0x89, 0x03, 0x54, 0xaa, 0x1a, 0x20, 0x2d, 0x2e, 0x17, 0xb8, 0x94,
	0x5d, 0x7b, 0x9a, 0x0f, 0x39, 0x99, 0xc5, 0xbb, 0x89, 0xc4, 0x6f, 0xe1, 0xdf, 0x20, 0x71, 0xe0,
	0x5f, 0xa1, 0x3a, 0xeb, 0x3a, 0x49, 0x9d, 0xc8, 0x55, 0x6f, 0xeb, 0x99, 0xf7, 0xde, 0xcc, 0xce,
	0xf3, 0x2c, 0xec, 0x2a, 0x8c, 0xc9, 0xd0, 0xc8, 0x57, 0x49, 0x7f, 0x22, 0x0c, 0xfa, 0x03, 0x92,
	0xc3, 0x6e, 0xa2, 0x27, 0x61, 0x7e, 0xe2, 0x2a, 0x21, 0x43, 0xec, 0xa1, 0x85, 0x72, 0x0b, 0xe5,
	0x53, 0x80, 0xfb, 0x24, 0x93, 0x10, 0xaa, 0xef, 0x4f, 0xf6, 0x45, 0xac, 0x7a, 0xc2, 0xcf, 0xb1,
	0x64, 0xc8, 0xdd, 0x2f, 0x82, 0x0c, 0x48, 0xfa, 0xda, 0x08, 0x83, 0x31, 0x6a, 0x9d, 0x9f, 0xa6,
	0x14, 0x6f, 0x07, 0x1e, 0x1d, 0xa2, 0xf9, 0xda, 0x4b, 0xc8, 0x98, 0x18, 0xa3, 0x13, 0x8a, 0x74,
	0x80, 0x3f, 0xc7, 0xa8, 0x8d, 0xd7, 0x85, 0xda, 0xd5, 0x94, 0x56, 0x34, 0xd2, 0xc8, 0x3e, 0xc2,
	0xa6, 0xc9, 0x12, 0x67, 0x8a, 0x22, 0x5d, 0x73, 0xea, 0x6b, 0x8d, 0x6a, 0xeb, 0x29, 0xcf, 0x3a,
	0x12, 0xaa, 0xcf, 0x6d, 0x0b, 0x97, 0xb1, 0x13, 0x8a, 0x3a, 0x62, 0x88, 0xc1, 0x86, 0x99, 0x15,
	0xf5, 0x3a, 0xb0, 0x15, 0xe0, 0x79, 0x82, 0xba, 0xd7, 0x26, 0x69, 0xab, 0xb3, 0xd7, 0x50, 0x19,
	0x90, 0x3c, 0xeb, 0x47, 0x35, 0xa7, 0xee, 0x34, 0xaa, 0x2d, 0x6f, 0xa5, 0x72, 0x9b, 0xe4, 0xd1,
	0x41, 0x70, 0x7b, 0x40, 0xf2, 0x28, 0xf2, 0xfe, 0x39, 0xb0, 0xfd, 0x65, 0x8c, 0xc9, 0xaf, 0x36,
	0xc9, 0x0f, 0x22, 0xec, 0x61, 0xa6, 0x79, 0x0c, 0xeb, 0x5a, 0x61, 0x68, 0x15, 0xdf, 0xf2, 0xe2,
	0x49, 0xf3, 0x22, 0x2e, 0x4f, 0x3f, 0xd2, 0xcc, 0xa9, 0xc2, 0x30, 0x48, 0x85, 0xdc, 0x1f, 0xb0,
	0x39, 0x1f, 0x67, 0x6f, 0xa0, 0x12, 0x0b, 0x89, 0x71, 0x36, 0x90, 0xd5, 0x6d, 0x7f, 0xba, 0x80,
	0x06, 0x96, 0xc1, 0x18, 0xac, 0x8f, 0xc4, 0x10, 0x6b, 0xb7, 0xea, 0x4e, 0xe3, 0x6e, 0x90, 0x9e,
	0xbd, 0x3f, 0x0e, 0x3c, 0x58, 0xe8, 0xc7, 0x5a, 0xd0, 0x81, 0x4a, 0x82, 0x7a, 0x1c, 0x1b, 0x5b,
	0xe9, 0x55, 0xc9, 0xeb, 0x4c, 0xe9, 0xfc, 0x32, 0x60, 0x55, 0xdc, 0x6f, 0x70, 0x27, 0x8b, 0xdd,
	0x60, 0xf8, 0x85, 0x97, 0xd8, 0x06, 0x36, 0x6b, 0xf0, 0xb4, 0x03, 0xef, 0x18, 0xd8, 0x21, 0x9a,
	0x45, 0x8f, 0x6e, 0xe0, 0xfb, 0x6f, 0x07, 0xee, 0xcf, 0x29, 0xda, 0x49, 0xbd, 0x9b, 0xb3, 0xbd,
	0x59, 0x28, 0x38, 0x20, 0xc9, 0xf3, 0xdd, 0x68, 0x93, 0xcc, 0x5d, 0x66, 0x07, 0x50, 0xb9, 0x48,
	0x8d, 0x75, 0x7a, 0xa9, 0x6a, 0x6b, 0xaf, 0xa4, 0x42, 0xca, 0x09, 0x2c, 0xb7, 0xf5, 0x77, 0x0d,
	0xb6, 0xda, 0x24, 0x3f, 0x8b, 0x91, 0xe8, 0x62, 0x72, 0x8a, 0xc9, 0xa4, 0x1f, 0x22, 0x1b, 0xc3,
	0xbd, 0xc5, 0x25, 0x63, 0xfe, 0x32, 0x27, 0x97, 0x6c, 0xaa, 0xfb, 0xa2, 0x3c, 0xc1, 0x8e, 0x24,
	0x04, 0xc8, 0x1d, 0x61, 0xbb, 0xcb, 0xf8, 0x57, 0xd6, 0xd2, 0x6d, 0x96, 0x81, 0xda, 0x22, 0xe7,
	0x50, 0x9d, 0xb1, 0x83, 0x35, 0x57, 0x74, 0xb9, 0xf0, 0x17, 0xb8, 0xcf, 0x4a, 0x61, 0x6d, 0x9d,
	0x18, 0x36, 0xe6, 0xfe, 0x71, 0xb6, 0x77, 0x9d, 0xcd, 0x76, 0x9f, 0x5f, 0x6b, 0x71, 0xde, 0x3f,
	0xfe, 0xbe, 0xb3, 0xf4, 0x31, 0x97, 0x95, 0xf4, 0x55, 0x7d, 0xf9, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0xf6, 0x09, 0xfa, 0xa1, 0xf0, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobManagerServiceClient is the client API for JobManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobManagerServiceClient interface {
	// Get the list of throttled tasks in the system
	GetThrottledPods(ctx context.Context, in *GetThrottledPodsRequest, opts ...grpc.CallOption) (*GetThrottledPodsResponse, error)
	// RefreshJob allows user to load job runtime status from the database
	// and re-execute the action associated with current state.
	RefreshJob(ctx context.Context, in *RefreshJobRequest, opts ...grpc.CallOption) (*RefreshJobResponse, error)
	// GetJobCache gets the job state in the cache.
	GetJobCache(ctx context.Context, in *GetJobCacheRequest, opts ...grpc.CallOption) (*GetJobCacheResponse, error)
	// QueryJobCache query jobs in the cache
	QueryJobCache(ctx context.Context, in *QueryJobCacheRequest, opts ...grpc.CallOption) (*QueryJobCacheResponse, error)
}

type jobManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewJobManagerServiceClient(cc *grpc.ClientConn) JobManagerServiceClient {
	return &jobManagerServiceClient{cc}
}

func (c *jobManagerServiceClient) GetThrottledPods(ctx context.Context, in *GetThrottledPodsRequest, opts ...grpc.CallOption) (*GetThrottledPodsResponse, error) {
	out := new(GetThrottledPodsResponse)
	err := c.cc.Invoke(ctx, "/peloton.private.jobmgr.JobManagerService/GetThrottledPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerServiceClient) RefreshJob(ctx context.Context, in *RefreshJobRequest, opts ...grpc.CallOption) (*RefreshJobResponse, error) {
	out := new(RefreshJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.private.jobmgr.JobManagerService/RefreshJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerServiceClient) GetJobCache(ctx context.Context, in *GetJobCacheRequest, opts ...grpc.CallOption) (*GetJobCacheResponse, error) {
	out := new(GetJobCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.private.jobmgr.JobManagerService/GetJobCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerServiceClient) QueryJobCache(ctx context.Context, in *QueryJobCacheRequest, opts ...grpc.CallOption) (*QueryJobCacheResponse, error) {
	out := new(QueryJobCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.private.jobmgr.JobManagerService/QueryJobCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagerServiceServer is the server API for JobManagerService service.
type JobManagerServiceServer interface {
	// Get the list of throttled tasks in the system
	GetThrottledPods(context.Context, *GetThrottledPodsRequest) (*GetThrottledPodsResponse, error)
	// RefreshJob allows user to load job runtime status from the database
	// and re-execute the action associated with current state.
	RefreshJob(context.Context, *RefreshJobRequest) (*RefreshJobResponse, error)
	// GetJobCache gets the job state in the cache.
	GetJobCache(context.Context, *GetJobCacheRequest) (*GetJobCacheResponse, error)
	// QueryJobCache query jobs in the cache
	QueryJobCache(context.Context, *QueryJobCacheRequest) (*QueryJobCacheResponse, error)
}

func RegisterJobManagerServiceServer(s *grpc.Server, srv JobManagerServiceServer) {
	s.RegisterService(&_JobManagerService_serviceDesc, srv)
}

func _JobManagerService_GetThrottledPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThrottledPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServiceServer).GetThrottledPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.private.jobmgr.JobManagerService/GetThrottledPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServiceServer).GetThrottledPods(ctx, req.(*GetThrottledPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagerService_RefreshJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServiceServer).RefreshJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.private.jobmgr.JobManagerService/RefreshJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServiceServer).RefreshJob(ctx, req.(*RefreshJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagerService_GetJobCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServiceServer).GetJobCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.private.jobmgr.JobManagerService/GetJobCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServiceServer).GetJobCache(ctx, req.(*GetJobCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagerService_QueryJobCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServiceServer).QueryJobCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.private.jobmgr.JobManagerService/QueryJobCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServiceServer).QueryJobCache(ctx, req.(*QueryJobCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.private.jobmgr.JobManagerService",
	HandlerType: (*JobManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThrottledPods",
			Handler:    _JobManagerService_GetThrottledPods_Handler,
		},
		{
			MethodName: "RefreshJob",
			Handler:    _JobManagerService_RefreshJob_Handler,
		},
		{
			MethodName: "GetJobCache",
			Handler:    _JobManagerService_GetJobCache_Handler,
		},
		{
			MethodName: "QueryJobCache",
			Handler:    _JobManagerService_QueryJobCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/private/jobmgrsvc/jobmgrsvc.proto",
}
