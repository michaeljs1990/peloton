// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/private/eventstream/eventstream.proto

package eventstream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/uber/peloton/.gen/mesos/v1"
	task "github.com/uber/peloton/.gen/peloton/api/v0/task"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Describes the type of event
type Event_Type int32

const (
	Event_UNKNOWN_EVENT_TYPE Event_Type = 0
	Event_MESOS_TASK_STATUS  Event_Type = 1
	Event_PELOTON_TASK_EVENT Event_Type = 2
)

var Event_Type_name = map[int32]string{
	0: "UNKNOWN_EVENT_TYPE",
	1: "MESOS_TASK_STATUS",
	2: "PELOTON_TASK_EVENT",
}

var Event_Type_value = map[string]int32{
	"UNKNOWN_EVENT_TYPE": 0,
	"MESOS_TASK_STATUS":  1,
	"PELOTON_TASK_EVENT": 2,
}

func (x Event_Type) String() string {
	return proto.EnumName(Event_Type_name, int32(x))
}

func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{0, 0}
}

type Event struct {
	// offset is the sequence id of the event
	Offset               uint64          `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Type                 Event_Type      `protobuf:"varint,2,opt,name=type,proto3,enum=peloton.private.eventstream.Event_Type" json:"type,omitempty"`
	MesosTaskStatus      *v1.TaskStatus  `protobuf:"bytes,3,opt,name=mesosTaskStatus,proto3" json:"mesosTaskStatus,omitempty"`
	PelotonTaskEvent     *task.TaskEvent `protobuf:"bytes,4,opt,name=pelotonTaskEvent,proto3" json:"pelotonTaskEvent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Event) GetType() Event_Type {
	if m != nil {
		return m.Type
	}
	return Event_UNKNOWN_EVENT_TYPE
}

func (m *Event) GetMesosTaskStatus() *v1.TaskStatus {
	if m != nil {
		return m.MesosTaskStatus
	}
	return nil
}

func (m *Event) GetPelotonTaskEvent() *task.TaskEvent {
	if m != nil {
		return m.PelotonTaskEvent
	}
	return nil
}

// The intended event offset is out of the event range on the server side
type OffsetOutOfRange struct {
	StreamID             string   `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	MinOffset            uint64   `protobuf:"varint,2,opt,name=minOffset,proto3" json:"minOffset,omitempty"`
	MaxOffset            uint64   `protobuf:"varint,3,opt,name=maxOffset,proto3" json:"maxOffset,omitempty"`
	OffsetRequested      uint64   `protobuf:"varint,4,opt,name=offsetRequested,proto3" json:"offsetRequested,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OffsetOutOfRange) Reset()         { *m = OffsetOutOfRange{} }
func (m *OffsetOutOfRange) String() string { return proto.CompactTextString(m) }
func (*OffsetOutOfRange) ProtoMessage()    {}
func (*OffsetOutOfRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{1}
}

func (m *OffsetOutOfRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OffsetOutOfRange.Unmarshal(m, b)
}
func (m *OffsetOutOfRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OffsetOutOfRange.Marshal(b, m, deterministic)
}
func (m *OffsetOutOfRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffsetOutOfRange.Merge(m, src)
}
func (m *OffsetOutOfRange) XXX_Size() int {
	return xxx_messageInfo_OffsetOutOfRange.Size(m)
}
func (m *OffsetOutOfRange) XXX_DiscardUnknown() {
	xxx_messageInfo_OffsetOutOfRange.DiscardUnknown(m)
}

var xxx_messageInfo_OffsetOutOfRange proto.InternalMessageInfo

func (m *OffsetOutOfRange) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (m *OffsetOutOfRange) GetMinOffset() uint64 {
	if m != nil {
		return m.MinOffset
	}
	return 0
}

func (m *OffsetOutOfRange) GetMaxOffset() uint64 {
	if m != nil {
		return m.MaxOffset
	}
	return 0
}

func (m *OffsetOutOfRange) GetOffsetRequested() uint64 {
	if m != nil {
		return m.OffsetRequested
	}
	return 0
}

// Error message for clients that are not expected by the server
// For now, the server only expects a list of pre-defined clients
// For example. Hostmgr would expect only Job manager / resource manager
// to consume the task update event stream.
type ClientUnsupported struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientUnsupported) Reset()         { *m = ClientUnsupported{} }
func (m *ClientUnsupported) String() string { return proto.CompactTextString(m) }
func (*ClientUnsupported) ProtoMessage()    {}
func (*ClientUnsupported) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{2}
}

func (m *ClientUnsupported) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientUnsupported.Unmarshal(m, b)
}
func (m *ClientUnsupported) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientUnsupported.Marshal(b, m, deterministic)
}
func (m *ClientUnsupported) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientUnsupported.Merge(m, src)
}
func (m *ClientUnsupported) XXX_Size() int {
	return xxx_messageInfo_ClientUnsupported.Size(m)
}
func (m *ClientUnsupported) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientUnsupported.DiscardUnknown(m)
}

var xxx_messageInfo_ClientUnsupported proto.InternalMessageInfo

func (m *ClientUnsupported) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Error message for clients that are not expected by the server
type InvalidStreamID struct {
	CurrentStreamID      string   `protobuf:"bytes,1,opt,name=currentStreamID,proto3" json:"currentStreamID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvalidStreamID) Reset()         { *m = InvalidStreamID{} }
func (m *InvalidStreamID) String() string { return proto.CompactTextString(m) }
func (*InvalidStreamID) ProtoMessage()    {}
func (*InvalidStreamID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{3}
}

func (m *InvalidStreamID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvalidStreamID.Unmarshal(m, b)
}
func (m *InvalidStreamID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvalidStreamID.Marshal(b, m, deterministic)
}
func (m *InvalidStreamID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidStreamID.Merge(m, src)
}
func (m *InvalidStreamID) XXX_Size() int {
	return xxx_messageInfo_InvalidStreamID.Size(m)
}
func (m *InvalidStreamID) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidStreamID.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidStreamID proto.InternalMessageInfo

func (m *InvalidStreamID) GetCurrentStreamID() string {
	if m != nil {
		return m.CurrentStreamID
	}
	return ""
}

// Error message for incorrect purge offset
type InvalidPurgeOffset struct {
	PurgeOffset          uint64   `protobuf:"varint,1,opt,name=purgeOffset,proto3" json:"purgeOffset,omitempty"`
	BeginOffset          uint64   `protobuf:"varint,2,opt,name=beginOffset,proto3" json:"beginOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvalidPurgeOffset) Reset()         { *m = InvalidPurgeOffset{} }
func (m *InvalidPurgeOffset) String() string { return proto.CompactTextString(m) }
func (*InvalidPurgeOffset) ProtoMessage()    {}
func (*InvalidPurgeOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{4}
}

func (m *InvalidPurgeOffset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvalidPurgeOffset.Unmarshal(m, b)
}
func (m *InvalidPurgeOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvalidPurgeOffset.Marshal(b, m, deterministic)
}
func (m *InvalidPurgeOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidPurgeOffset.Merge(m, src)
}
func (m *InvalidPurgeOffset) XXX_Size() int {
	return xxx_messageInfo_InvalidPurgeOffset.Size(m)
}
func (m *InvalidPurgeOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidPurgeOffset.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidPurgeOffset proto.InternalMessageInfo

func (m *InvalidPurgeOffset) GetPurgeOffset() uint64 {
	if m != nil {
		return m.PurgeOffset
	}
	return 0
}

func (m *InvalidPurgeOffset) GetBeginOffset() uint64 {
	if m != nil {
		return m.BeginOffset
	}
	return 0
}

// Client need to call this to init a stream on server side
type InitStreamRequest struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=clientName,proto3" json:"clientName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitStreamRequest) Reset()         { *m = InitStreamRequest{} }
func (m *InitStreamRequest) String() string { return proto.CompactTextString(m) }
func (*InitStreamRequest) ProtoMessage()    {}
func (*InitStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{5}
}

func (m *InitStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitStreamRequest.Unmarshal(m, b)
}
func (m *InitStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitStreamRequest.Marshal(b, m, deterministic)
}
func (m *InitStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitStreamRequest.Merge(m, src)
}
func (m *InitStreamRequest) XXX_Size() int {
	return xxx_messageInfo_InitStreamRequest.Size(m)
}
func (m *InitStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitStreamRequest proto.InternalMessageInfo

func (m *InitStreamRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

// InitStreamResponse pass back the streamID and the minOffset of the events
// on server side
type InitStreamResponse struct {
	Error *InitStreamResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// streamID is created by the server and will change when server restarts
	StreamID string `protobuf:"bytes,2,opt,name=streamID,proto3" json:"streamID,omitempty"`
	// min Offset of the event in the server side circular buffer
	MinOffset uint64 `protobuf:"varint,3,opt,name=minOffset,proto3" json:"minOffset,omitempty"`
	// previous purgeOffset for the client, if there is any stored on the server
	// the client can use previousPurgeOffset as the begin offset for the next
	// WaitForEventsRequest
	PreviousPurgeOffset  uint64   `protobuf:"varint,4,opt,name=previousPurgeOffset,proto3" json:"previousPurgeOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitStreamResponse) Reset()         { *m = InitStreamResponse{} }
func (m *InitStreamResponse) String() string { return proto.CompactTextString(m) }
func (*InitStreamResponse) ProtoMessage()    {}
func (*InitStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{6}
}

func (m *InitStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitStreamResponse.Unmarshal(m, b)
}
func (m *InitStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitStreamResponse.Marshal(b, m, deterministic)
}
func (m *InitStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitStreamResponse.Merge(m, src)
}
func (m *InitStreamResponse) XXX_Size() int {
	return xxx_messageInfo_InitStreamResponse.Size(m)
}
func (m *InitStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitStreamResponse proto.InternalMessageInfo

func (m *InitStreamResponse) GetError() *InitStreamResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *InitStreamResponse) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (m *InitStreamResponse) GetMinOffset() uint64 {
	if m != nil {
		return m.MinOffset
	}
	return 0
}

func (m *InitStreamResponse) GetPreviousPurgeOffset() uint64 {
	if m != nil {
		return m.PreviousPurgeOffset
	}
	return 0
}

type InitStreamResponse_Error struct {
	ClientUnsupported    *ClientUnsupported `protobuf:"bytes,1,opt,name=clientUnsupported,proto3" json:"clientUnsupported,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InitStreamResponse_Error) Reset()         { *m = InitStreamResponse_Error{} }
func (m *InitStreamResponse_Error) String() string { return proto.CompactTextString(m) }
func (*InitStreamResponse_Error) ProtoMessage()    {}
func (*InitStreamResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{6, 0}
}

func (m *InitStreamResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitStreamResponse_Error.Unmarshal(m, b)
}
func (m *InitStreamResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitStreamResponse_Error.Marshal(b, m, deterministic)
}
func (m *InitStreamResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitStreamResponse_Error.Merge(m, src)
}
func (m *InitStreamResponse_Error) XXX_Size() int {
	return xxx_messageInfo_InitStreamResponse_Error.Size(m)
}
func (m *InitStreamResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_InitStreamResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_InitStreamResponse_Error proto.InternalMessageInfo

func (m *InitStreamResponse_Error) GetClientUnsupported() *ClientUnsupported {
	if m != nil {
		return m.ClientUnsupported
	}
	return nil
}

type WaitForEventsRequest struct {
	// Current streamID
	StreamID string `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	// The offeSet that the client has processed, which can be purged on the server
	PurgeOffset uint64 `protobuf:"varint,2,opt,name=purgeOffset,proto3" json:"purgeOffset,omitempty"`
	// The begin offset of the intended data
	BeginOffset uint64 `protobuf:"varint,3,opt,name=beginOffset,proto3" json:"beginOffset,omitempty"`
	// The max number of events limit for current request
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Timeout value
	TimeoutMs int32 `protobuf:"varint,5,opt,name=timeoutMs,proto3" json:"timeoutMs,omitempty"`
	// Name of the client
	ClientName           string   `protobuf:"bytes,6,opt,name=clientName,proto3" json:"clientName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitForEventsRequest) Reset()         { *m = WaitForEventsRequest{} }
func (m *WaitForEventsRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForEventsRequest) ProtoMessage()    {}
func (*WaitForEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{7}
}

func (m *WaitForEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForEventsRequest.Unmarshal(m, b)
}
func (m *WaitForEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForEventsRequest.Marshal(b, m, deterministic)
}
func (m *WaitForEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForEventsRequest.Merge(m, src)
}
func (m *WaitForEventsRequest) XXX_Size() int {
	return xxx_messageInfo_WaitForEventsRequest.Size(m)
}
func (m *WaitForEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForEventsRequest proto.InternalMessageInfo

func (m *WaitForEventsRequest) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (m *WaitForEventsRequest) GetPurgeOffset() uint64 {
	if m != nil {
		return m.PurgeOffset
	}
	return 0
}

func (m *WaitForEventsRequest) GetBeginOffset() uint64 {
	if m != nil {
		return m.BeginOffset
	}
	return 0
}

func (m *WaitForEventsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WaitForEventsRequest) GetTimeoutMs() int32 {
	if m != nil {
		return m.TimeoutMs
	}
	return 0
}

func (m *WaitForEventsRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type WaitForEventsResponse struct {
	Error                *WaitForEventsResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Events               []*Event                     `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *WaitForEventsResponse) Reset()         { *m = WaitForEventsResponse{} }
func (m *WaitForEventsResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForEventsResponse) ProtoMessage()    {}
func (*WaitForEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{8}
}

func (m *WaitForEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForEventsResponse.Unmarshal(m, b)
}
func (m *WaitForEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForEventsResponse.Marshal(b, m, deterministic)
}
func (m *WaitForEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForEventsResponse.Merge(m, src)
}
func (m *WaitForEventsResponse) XXX_Size() int {
	return xxx_messageInfo_WaitForEventsResponse.Size(m)
}
func (m *WaitForEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForEventsResponse proto.InternalMessageInfo

func (m *WaitForEventsResponse) GetError() *WaitForEventsResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *WaitForEventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type WaitForEventsResponse_Error struct {
	OutOfRange           *OffsetOutOfRange   `protobuf:"bytes,1,opt,name=outOfRange,proto3" json:"outOfRange,omitempty"`
	ClientUnsupported    *ClientUnsupported  `protobuf:"bytes,2,opt,name=clientUnsupported,proto3" json:"clientUnsupported,omitempty"`
	InvalidStreamID      *InvalidStreamID    `protobuf:"bytes,3,opt,name=invalidStreamID,proto3" json:"invalidStreamID,omitempty"`
	InvalidPurgeOffset   *InvalidPurgeOffset `protobuf:"bytes,4,opt,name=invalidPurgeOffset,proto3" json:"invalidPurgeOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WaitForEventsResponse_Error) Reset()         { *m = WaitForEventsResponse_Error{} }
func (m *WaitForEventsResponse_Error) String() string { return proto.CompactTextString(m) }
func (*WaitForEventsResponse_Error) ProtoMessage()    {}
func (*WaitForEventsResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfcf03530c515f4, []int{8, 0}
}

func (m *WaitForEventsResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForEventsResponse_Error.Unmarshal(m, b)
}
func (m *WaitForEventsResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForEventsResponse_Error.Marshal(b, m, deterministic)
}
func (m *WaitForEventsResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForEventsResponse_Error.Merge(m, src)
}
func (m *WaitForEventsResponse_Error) XXX_Size() int {
	return xxx_messageInfo_WaitForEventsResponse_Error.Size(m)
}
func (m *WaitForEventsResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForEventsResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForEventsResponse_Error proto.InternalMessageInfo

func (m *WaitForEventsResponse_Error) GetOutOfRange() *OffsetOutOfRange {
	if m != nil {
		return m.OutOfRange
	}
	return nil
}

func (m *WaitForEventsResponse_Error) GetClientUnsupported() *ClientUnsupported {
	if m != nil {
		return m.ClientUnsupported
	}
	return nil
}

func (m *WaitForEventsResponse_Error) GetInvalidStreamID() *InvalidStreamID {
	if m != nil {
		return m.InvalidStreamID
	}
	return nil
}

func (m *WaitForEventsResponse_Error) GetInvalidPurgeOffset() *InvalidPurgeOffset {
	if m != nil {
		return m.InvalidPurgeOffset
	}
	return nil
}

func init() {
	proto.RegisterEnum("peloton.private.eventstream.Event_Type", Event_Type_name, Event_Type_value)
	proto.RegisterType((*Event)(nil), "peloton.private.eventstream.Event")
	proto.RegisterType((*OffsetOutOfRange)(nil), "peloton.private.eventstream.OffsetOutOfRange")
	proto.RegisterType((*ClientUnsupported)(nil), "peloton.private.eventstream.ClientUnsupported")
	proto.RegisterType((*InvalidStreamID)(nil), "peloton.private.eventstream.InvalidStreamID")
	proto.RegisterType((*InvalidPurgeOffset)(nil), "peloton.private.eventstream.InvalidPurgeOffset")
	proto.RegisterType((*InitStreamRequest)(nil), "peloton.private.eventstream.InitStreamRequest")
	proto.RegisterType((*InitStreamResponse)(nil), "peloton.private.eventstream.InitStreamResponse")
	proto.RegisterType((*InitStreamResponse_Error)(nil), "peloton.private.eventstream.InitStreamResponse.Error")
	proto.RegisterType((*WaitForEventsRequest)(nil), "peloton.private.eventstream.WaitForEventsRequest")
	proto.RegisterType((*WaitForEventsResponse)(nil), "peloton.private.eventstream.WaitForEventsResponse")
	proto.RegisterType((*WaitForEventsResponse_Error)(nil), "peloton.private.eventstream.WaitForEventsResponse.Error")
}

func init() {
	proto.RegisterFile("peloton/private/eventstream/eventstream.proto", fileDescriptor_ddfcf03530c515f4)
}

var fileDescriptor_ddfcf03530c515f4 = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6a, 0xdb, 0x48,
	0x14, 0x5e, 0xc9, 0x3f, 0xbb, 0x39, 0x66, 0xd7, 0xf6, 0xac, 0x13, 0x8c, 0xb3, 0x1b, 0x8c, 0x6e,
	0xd6, 0x17, 0x1b, 0x29, 0x71, 0x28, 0x94, 0x06, 0x0a, 0x69, 0xeb, 0x42, 0x9a, 0xda, 0x0e, 0x23,
	0x25, 0x69, 0x4b, 0xc1, 0x28, 0xce, 0xc4, 0x0c, 0xb1, 0x7e, 0xaa, 0x19, 0x89, 0xe6, 0x39, 0xda,
	0x47, 0x29, 0xf4, 0x1d, 0xfa, 0x2e, 0x7d, 0x82, 0xde, 0x14, 0x8d, 0xc6, 0xb6, 0x2c, 0x1b, 0x25,
	0x81, 0xde, 0x18, 0xcf, 0x39, 0xe7, 0xfb, 0xe6, 0xfc, 0x7c, 0x73, 0x10, 0xec, 0xfa, 0x64, 0xea,
	0x71, 0xcf, 0x35, 0xfc, 0x80, 0x46, 0x36, 0x27, 0x06, 0x89, 0x88, 0xcb, 0x19, 0x0f, 0x88, 0xed,
	0xa4, 0xff, 0xeb, 0x7e, 0xe0, 0x71, 0x0f, 0x6d, 0xcb, 0x70, 0x5d, 0x86, 0xeb, 0xa9, 0x90, 0x56,
	0xc3, 0x21, 0xcc, 0x63, 0x46, 0xb4, 0x6f, 0x88, 0x3f, 0x09, 0xa4, 0xb5, 0x33, 0xbb, 0xc1, 0xf6,
	0xa9, 0x11, 0xed, 0x19, 0xdc, 0x66, 0x37, 0xe2, 0x27, 0xf1, 0x6b, 0x5f, 0x55, 0x28, 0xf5, 0x62,
	0x16, 0xb4, 0x05, 0x65, 0xef, 0xfa, 0x9a, 0x11, 0xde, 0x54, 0xda, 0x4a, 0xa7, 0x88, 0xe5, 0x09,
	0x1d, 0x42, 0x91, 0xdf, 0xfa, 0xa4, 0xa9, 0xb6, 0x95, 0xce, 0x5f, 0xdd, 0xff, 0xf4, 0x9c, 0x1c,
	0x74, 0xc1, 0xa4, 0x5b, 0xb7, 0x3e, 0xc1, 0x02, 0x84, 0x9e, 0x42, 0x55, 0x64, 0x63, 0xd9, 0xec,
	0xc6, 0xe4, 0x36, 0x0f, 0x59, 0xb3, 0xd0, 0x56, 0x3a, 0x95, 0x6e, 0x43, 0x4f, 0xb2, 0x8c, 0xf6,
	0xf5, 0x85, 0x0f, 0x67, 0x83, 0xd1, 0x2b, 0xa8, 0xc9, 0xfb, 0x62, 0xa3, 0xa0, 0x6f, 0x16, 0x05,
	0xc1, 0xce, 0x3c, 0x11, 0xdb, 0xa7, 0x7a, 0xb4, 0xa7, 0x8b, 0xa2, 0xe6, 0x51, 0x78, 0x05, 0xa7,
	0xf5, 0xa1, 0x18, 0x67, 0x86, 0xb6, 0x00, 0x9d, 0x0d, 0x4e, 0x06, 0xc3, 0x8b, 0xc1, 0xa8, 0x77,
	0xde, 0x1b, 0x58, 0x23, 0xeb, 0xed, 0x69, 0xaf, 0xf6, 0x1b, 0xda, 0x84, 0x7a, 0xbf, 0x67, 0x0e,
	0xcd, 0x91, 0x75, 0x64, 0x9e, 0x8c, 0x4c, 0xeb, 0xc8, 0x3a, 0x33, 0x6b, 0x4a, 0x1c, 0x7e, 0xda,
	0x7b, 0x3d, 0xb4, 0x86, 0x83, 0xc4, 0x21, 0x30, 0x35, 0x55, 0xfb, 0xac, 0x40, 0x6d, 0x28, 0x5a,
	0x34, 0x0c, 0xf9, 0xf0, 0x1a, 0xdb, 0xee, 0x84, 0xa0, 0x16, 0xfc, 0x91, 0xb4, 0xe2, 0xf8, 0x85,
	0x68, 0xe3, 0x06, 0x9e, 0x9f, 0xd1, 0x3f, 0xb0, 0xe1, 0x50, 0x37, 0x81, 0x88, 0x6e, 0x16, 0xf1,
	0xc2, 0x20, 0xbc, 0xf6, 0x47, 0xe9, 0x2d, 0x48, 0xef, 0xcc, 0x80, 0x3a, 0x50, 0x4d, 0xc6, 0x81,
	0xc9, 0x87, 0x90, 0x30, 0x4e, 0xae, 0x44, 0x1b, 0x8a, 0x38, 0x6b, 0xd6, 0x76, 0xa1, 0xfe, 0x7c,
	0x4a, 0x89, 0xcb, 0xcf, 0x5c, 0x16, 0xfa, 0xbe, 0x17, 0x70, 0x72, 0x85, 0x9a, 0xf0, 0xbb, 0x43,
	0x18, 0xb3, 0x27, 0x44, 0x66, 0x35, 0x3b, 0x6a, 0x87, 0x50, 0x3d, 0x76, 0x23, 0x7b, 0x4a, 0xaf,
	0xcc, 0x59, 0x9e, 0x1d, 0xa8, 0x8e, 0xc3, 0x20, 0x20, 0x2e, 0x37, 0x97, 0x4b, 0xc9, 0x9a, 0xb5,
	0x37, 0x80, 0x24, 0xf8, 0x34, 0x0c, 0x26, 0x44, 0xe6, 0xda, 0x86, 0x8a, 0xbf, 0x38, 0x4a, 0x35,
	0xa5, 0x4d, 0x71, 0xc4, 0x25, 0x99, 0x64, 0x7a, 0x91, 0x36, 0x69, 0x07, 0x50, 0x3f, 0x76, 0xa9,
	0xbc, 0x49, 0x16, 0x87, 0x76, 0x00, 0xc6, 0xa2, 0xb4, 0x81, 0xed, 0xcc, 0x0a, 0x49, 0x59, 0xb4,
	0x2f, 0x6a, 0x9c, 0xcf, 0x02, 0xc5, 0x7c, 0xcf, 0x65, 0x04, 0x9d, 0x40, 0x89, 0x04, 0x81, 0x17,
	0x08, 0x44, 0xa5, 0xfb, 0x28, 0x57, 0xc1, 0xab, 0x78, 0xbd, 0x17, 0x83, 0x71, 0xc2, 0xb1, 0x34,
	0x60, 0x35, 0x6f, 0xc0, 0x85, 0xec, 0x80, 0xf7, 0xe0, 0x6f, 0x3f, 0x20, 0x11, 0xf5, 0x42, 0x96,
	0xea, 0x96, 0x1c, 0xe3, 0x3a, 0x57, 0x8b, 0x40, 0x49, 0xdc, 0x8d, 0xde, 0x43, 0x7d, 0x9c, 0x9d,
	0xa9, 0xac, 0x46, 0xcf, 0xad, 0x66, 0x45, 0x09, 0x78, 0x95, 0x48, 0xfb, 0xa6, 0x40, 0xe3, 0xc2,
	0xa6, 0xfc, 0xa5, 0x17, 0x88, 0x87, 0xc2, 0x66, 0xfd, 0xce, 0x13, 0x73, 0x66, 0xc8, 0xea, 0x9d,
	0x43, 0x2e, 0xac, 0x0c, 0x19, 0x35, 0xa0, 0x34, 0xa5, 0x0e, 0x4d, 0x7a, 0x50, 0xc2, 0xc9, 0x21,
	0xee, 0x22, 0xa7, 0x0e, 0xf1, 0x42, 0xde, 0x67, 0xcd, 0x92, 0xf0, 0x2c, 0x0c, 0x19, 0x0d, 0x94,
	0x57, 0x34, 0xf0, 0xa9, 0x08, 0x9b, 0x99, 0x62, 0xa4, 0x0c, 0x06, 0xcb, 0x32, 0x78, 0x9c, 0xdb,
	0xb8, 0xb5, 0x14, 0xcb, 0x4a, 0x78, 0x02, 0xe5, 0x04, 0xd1, 0x54, 0xdb, 0x85, 0x4e, 0xa5, 0xab,
	0xdd, 0xbd, 0x19, 0xb1, 0x44, 0xb4, 0xbe, 0xab, 0xb3, 0xd1, 0xf6, 0x01, 0xbc, 0xf9, 0xfa, 0x90,
	0xa9, 0xed, 0xe6, 0x32, 0x65, 0x77, 0x0e, 0x4e, 0x11, 0xac, 0x57, 0x8a, 0xfa, 0x8b, 0x94, 0x82,
	0xce, 0xa1, 0x4a, 0x97, 0x97, 0x85, 0xdc, 0xe6, 0xff, 0xdf, 0xf1, 0xa6, 0x96, 0x30, 0x38, 0x4b,
	0x82, 0x46, 0x80, 0xe8, 0xca, 0x1e, 0x91, 0x7b, 0xde, 0xb8, 0x0f, 0x75, 0x0a, 0x86, 0xd7, 0x50,
	0x75, 0x7f, 0x28, 0x80, 0xc4, 0x04, 0x92, 0x2b, 0x4d, 0x12, 0x44, 0x74, 0x4c, 0x90, 0x03, 0xb0,
	0x78, 0xef, 0x48, 0xbf, 0xf7, 0x62, 0x10, 0xcf, 0xa3, 0x65, 0x3c, 0x70, 0x91, 0xa0, 0x08, 0xfe,
	0x5c, 0xd2, 0x15, 0xda, 0x7f, 0x88, 0x06, 0x93, 0x4b, 0xbb, 0x0f, 0x97, 0xed, 0xb3, 0x7f, 0xdf,
	0x6d, 0xe7, 0x7c, 0x67, 0x5c, 0x96, 0xc5, 0x97, 0xc0, 0xc1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x65, 0xb1, 0x46, 0xac, 0x8d, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventStreamServiceClient is the client API for EventStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventStreamServiceClient interface {
	// Client calls CreateStream to learn about information to consume the stream
	InitStream(ctx context.Context, in *InitStreamRequest, opts ...grpc.CallOption) (*InitStreamResponse, error)
	// Wait for some task events
	WaitForEvents(ctx context.Context, in *WaitForEventsRequest, opts ...grpc.CallOption) (*WaitForEventsResponse, error)
}

type eventStreamServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventStreamServiceClient(cc *grpc.ClientConn) EventStreamServiceClient {
	return &eventStreamServiceClient{cc}
}

func (c *eventStreamServiceClient) InitStream(ctx context.Context, in *InitStreamRequest, opts ...grpc.CallOption) (*InitStreamResponse, error) {
	out := new(InitStreamResponse)
	err := c.cc.Invoke(ctx, "/peloton.private.eventstream.EventStreamService/InitStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStreamServiceClient) WaitForEvents(ctx context.Context, in *WaitForEventsRequest, opts ...grpc.CallOption) (*WaitForEventsResponse, error) {
	out := new(WaitForEventsResponse)
	err := c.cc.Invoke(ctx, "/peloton.private.eventstream.EventStreamService/WaitForEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStreamServiceServer is the server API for EventStreamService service.
type EventStreamServiceServer interface {
	// Client calls CreateStream to learn about information to consume the stream
	InitStream(context.Context, *InitStreamRequest) (*InitStreamResponse, error)
	// Wait for some task events
	WaitForEvents(context.Context, *WaitForEventsRequest) (*WaitForEventsResponse, error)
}

func RegisterEventStreamServiceServer(s *grpc.Server, srv EventStreamServiceServer) {
	s.RegisterService(&_EventStreamService_serviceDesc, srv)
}

func _EventStreamService_InitStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamServiceServer).InitStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.private.eventstream.EventStreamService/InitStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamServiceServer).InitStream(ctx, req.(*InitStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStreamService_WaitForEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStreamServiceServer).WaitForEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.private.eventstream.EventStreamService/WaitForEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStreamServiceServer).WaitForEvents(ctx, req.(*WaitForEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.private.eventstream.EventStreamService",
	HandlerType: (*EventStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitStream",
			Handler:    _EventStreamService_InitStream_Handler,
		},
		{
			MethodName: "WaitForEvents",
			Handler:    _EventStreamService_WaitForEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/private/eventstream/eventstream.proto",
}
