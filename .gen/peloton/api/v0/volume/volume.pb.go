// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/volume/volume.proto

package volume

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//  States of a persistent volume
type VolumeState int32

const (
	// Reserved for future compatibility of new states.
	VolumeState_UNKNOWN VolumeState = 0
	// The persistent volume is being initialized.
	VolumeState_INITIALIZED VolumeState = 1
	// The persistent volume is created successfully.
	VolumeState_CREATED VolumeState = 2
	// The persistent volume is deleted.
	VolumeState_DELETED VolumeState = 3
)

var VolumeState_name = map[int32]string{
	0: "UNKNOWN",
	1: "INITIALIZED",
	2: "CREATED",
	3: "DELETED",
}

var VolumeState_value = map[string]int32{
	"UNKNOWN":     0,
	"INITIALIZED": 1,
	"CREATED":     2,
	"DELETED":     3,
}

func (x VolumeState) String() string {
	return proto.EnumName(VolumeState_name, int32(x))
}

func (VolumeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fcbac1cc2e3f5c7b, []int{0}
}

//
// Persistent volume information.
type PersistentVolumeInfo struct {
	// ID of the persistent volume.
	Id *peloton.VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the job that owns the volume.
	JobId *peloton.JobID `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// ID of the instance that owns the volume.
	InstanceId uint32 `protobuf:"varint,3,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// Hostname of the persisted volume.
	Hostname string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Current state of the volume.
	State VolumeState `protobuf:"varint,5,opt,name=state,proto3,enum=peloton.api.v0.volume.VolumeState" json:"state,omitempty"`
	// Goal state of the volume.
	GoalState VolumeState `protobuf:"varint,6,opt,name=goalState,proto3,enum=peloton.api.v0.volume.VolumeState" json:"goalState,omitempty"`
	// Volume size in MB.
	SizeMB uint32 `protobuf:"varint,7,opt,name=sizeMB,proto3" json:"sizeMB,omitempty"`
	// Volume mount path inside container.
	ContainerPath string `protobuf:"bytes,8,opt,name=containerPath,proto3" json:"containerPath,omitempty"`
	// Volume creation time.
	CreateTime string `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// Volume info last update time.
	UpdateTime           string   `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersistentVolumeInfo) Reset()         { *m = PersistentVolumeInfo{} }
func (m *PersistentVolumeInfo) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeInfo) ProtoMessage()    {}
func (*PersistentVolumeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcbac1cc2e3f5c7b, []int{0}
}

func (m *PersistentVolumeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistentVolumeInfo.Unmarshal(m, b)
}
func (m *PersistentVolumeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistentVolumeInfo.Marshal(b, m, deterministic)
}
func (m *PersistentVolumeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeInfo.Merge(m, src)
}
func (m *PersistentVolumeInfo) XXX_Size() int {
	return xxx_messageInfo_PersistentVolumeInfo.Size(m)
}
func (m *PersistentVolumeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeInfo proto.InternalMessageInfo

func (m *PersistentVolumeInfo) GetId() *peloton.VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PersistentVolumeInfo) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *PersistentVolumeInfo) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *PersistentVolumeInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PersistentVolumeInfo) GetState() VolumeState {
	if m != nil {
		return m.State
	}
	return VolumeState_UNKNOWN
}

func (m *PersistentVolumeInfo) GetGoalState() VolumeState {
	if m != nil {
		return m.GoalState
	}
	return VolumeState_UNKNOWN
}

func (m *PersistentVolumeInfo) GetSizeMB() uint32 {
	if m != nil {
		return m.SizeMB
	}
	return 0
}

func (m *PersistentVolumeInfo) GetContainerPath() string {
	if m != nil {
		return m.ContainerPath
	}
	return ""
}

func (m *PersistentVolumeInfo) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *PersistentVolumeInfo) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func init() {
	proto.RegisterEnum("peloton.api.v0.volume.VolumeState", VolumeState_name, VolumeState_value)
	proto.RegisterType((*PersistentVolumeInfo)(nil), "peloton.api.v0.volume.PersistentVolumeInfo")
}

func init() { proto.RegisterFile("peloton/api/v0/volume/volume.proto", fileDescriptor_fcbac1cc2e3f5c7b) }

var fileDescriptor_fcbac1cc2e3f5c7b = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x6b, 0xe2, 0x40,
	0x18, 0xc7, 0x37, 0x71, 0x7d, 0x7b, 0x82, 0xbb, 0x32, 0xac, 0xcb, 0x20, 0xbb, 0x4b, 0x90, 0x3d,
	0x84, 0x3d, 0x44, 0xd1, 0xcb, 0x1e, 0xab, 0x4d, 0x0e, 0xd3, 0xda, 0x54, 0x52, 0xdb, 0x82, 0xb7,
	0xd1, 0x4c, 0xeb, 0x14, 0x9d, 0x09, 0xc9, 0xe8, 0xa1, 0x5f, 0xab, 0x5f, 0xb0, 0x64, 0x12, 0xab,
	0x15, 0x0b, 0x3d, 0x85, 0xff, 0xcb, 0x2f, 0xfc, 0x13, 0x1e, 0xe8, 0xc4, 0x6c, 0x25, 0x95, 0x14,
	0x5d, 0x1a, 0xf3, 0xee, 0xb6, 0xd7, 0xdd, 0xca, 0xd5, 0x66, 0xcd, 0x8a, 0x87, 0x1b, 0x27, 0x52,
	0x49, 0xd4, 0x2a, 0x3a, 0x2e, 0x8d, 0xb9, 0xbb, 0xed, 0xb9, 0x79, 0xd8, 0xfe, 0x75, 0x84, 0xee,
	0x5a, 0x1a, 0xea, 0xbc, 0x94, 0xe0, 0xc7, 0x84, 0x25, 0x29, 0x4f, 0x15, 0x13, 0xea, 0x4e, 0x23,
	0x44, 0x3c, 0x48, 0xd4, 0x03, 0x93, 0x47, 0xd8, 0xb0, 0x0d, 0xc7, 0xea, 0xdb, 0xee, 0xd1, 0xab,
	0x77, 0xb2, 0xe8, 0x7b, 0xa1, 0xc9, 0x23, 0x34, 0x80, 0xf2, 0x93, 0x9c, 0x93, 0x08, 0x9b, 0x1a,
	0xfa, 0xfd, 0x11, 0x74, 0x21, 0xe7, 0xc4, 0x0b, 0xf3, 0x2e, 0xfa, 0x03, 0xc0, 0x45, 0xaa, 0xa8,
	0x58, 0x30, 0x12, 0xe1, 0x92, 0x6d, 0x38, 0x8d, 0xf0, 0xc0, 0x41, 0x6d, 0xa8, 0x2d, 0x65, 0xaa,
	0x04, 0x5d, 0x33, 0xfc, 0xd5, 0x36, 0x9c, 0x7a, 0xf8, 0xa6, 0xd1, 0x7f, 0x28, 0xa7, 0x8a, 0x2a,
	0x86, 0xcb, 0xb6, 0xe1, 0x7c, 0xeb, 0x77, 0xdc, 0x93, 0x3f, 0xa0, 0x18, 0x79, 0x93, 0x35, 0xc3,
	0x1c, 0x40, 0x67, 0x50, 0x7f, 0x94, 0x74, 0xa5, 0x3d, 0x5c, 0xf9, 0x34, 0xbd, 0x87, 0xd0, 0x4f,
	0xa8, 0xa4, 0xfc, 0x99, 0x5d, 0x8d, 0x70, 0x55, 0x6f, 0x2e, 0x14, 0xfa, 0x0b, 0x8d, 0x85, 0x14,
	0x8a, 0x72, 0xc1, 0x92, 0x09, 0x55, 0x4b, 0x5c, 0xd3, 0xa3, 0xdf, 0x9b, 0xd9, 0x57, 0x2f, 0x12,
	0x46, 0x15, 0x9b, 0xf2, 0x35, 0xc3, 0x75, 0x5d, 0x39, 0x70, 0xb2, 0x7c, 0x13, 0x47, 0xbb, 0x1c,
	0xf2, 0x7c, 0xef, 0xfc, 0xf3, 0xc1, 0x3a, 0xd8, 0x85, 0x2c, 0xa8, 0xde, 0x06, 0x97, 0xc1, 0xf5,
	0x7d, 0xd0, 0xfc, 0x82, 0xbe, 0x83, 0x45, 0x02, 0x32, 0x25, 0xc3, 0x31, 0x99, 0xf9, 0x5e, 0xd3,
	0xc8, 0xd2, 0xf3, 0xd0, 0x1f, 0x4e, 0x7d, 0xaf, 0x69, 0x66, 0xc2, 0xf3, 0xc7, 0x7e, 0x26, 0x4a,
	0x23, 0x17, 0x4e, 0xdf, 0xcc, 0xac, 0x75, 0xf2, 0xdc, 0xe6, 0x15, 0x7d, 0x33, 0x83, 0xd7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x64, 0x95, 0x2b, 0x67, 0x8e, 0x02, 0x00, 0x00,
}
