// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/volume/svc/volume_svc.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	volume "github.com/uber/peloton/.gen/peloton/api/v0/volume"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//  Request message for VolumeService.List method.
type ListVolumesRequest struct {
	// job ID for the volumes.
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListVolumesRequest) Reset()         { *m = ListVolumesRequest{} }
func (m *ListVolumesRequest) String() string { return proto.CompactTextString(m) }
func (*ListVolumesRequest) ProtoMessage()    {}
func (*ListVolumesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b161a39b040a30, []int{0}
}

func (m *ListVolumesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesRequest.Unmarshal(m, b)
}
func (m *ListVolumesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesRequest.Marshal(b, m, deterministic)
}
func (m *ListVolumesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesRequest.Merge(m, src)
}
func (m *ListVolumesRequest) XXX_Size() int {
	return xxx_messageInfo_ListVolumesRequest.Size(m)
}
func (m *ListVolumesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesRequest proto.InternalMessageInfo

func (m *ListVolumesRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

//*
//  Response message for VolumeService.List method.
//
//  Return errors:
//    NOT_FOUND:         if the volume is not found.
type ListVolumesResponse struct {
	// volumes result map from volume uuid to volume info.
	Volumes              map[string]*volume.PersistentVolumeInfo `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ListVolumesResponse) Reset()         { *m = ListVolumesResponse{} }
func (m *ListVolumesResponse) String() string { return proto.CompactTextString(m) }
func (*ListVolumesResponse) ProtoMessage()    {}
func (*ListVolumesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b161a39b040a30, []int{1}
}

func (m *ListVolumesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesResponse.Unmarshal(m, b)
}
func (m *ListVolumesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesResponse.Marshal(b, m, deterministic)
}
func (m *ListVolumesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesResponse.Merge(m, src)
}
func (m *ListVolumesResponse) XXX_Size() int {
	return xxx_messageInfo_ListVolumesResponse.Size(m)
}
func (m *ListVolumesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesResponse proto.InternalMessageInfo

func (m *ListVolumesResponse) GetVolumes() map[string]*volume.PersistentVolumeInfo {
	if m != nil {
		return m.Volumes
	}
	return nil
}

//*
//  Request message for VolumeService.Get method.
type GetVolumeRequest struct {
	// the volume id.
	Id                   *peloton.VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetVolumeRequest) Reset()         { *m = GetVolumeRequest{} }
func (m *GetVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*GetVolumeRequest) ProtoMessage()    {}
func (*GetVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b161a39b040a30, []int{2}
}

func (m *GetVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeRequest.Unmarshal(m, b)
}
func (m *GetVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeRequest.Marshal(b, m, deterministic)
}
func (m *GetVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeRequest.Merge(m, src)
}
func (m *GetVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_GetVolumeRequest.Size(m)
}
func (m *GetVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeRequest proto.InternalMessageInfo

func (m *GetVolumeRequest) GetId() *peloton.VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

//*
//  Response message for VolumeService.Get method.
//
//  Return errors:
//    NOT_FOUND:         if the volume is not found.
type GetVolumeResponse struct {
	// volume info result.
	Result               *volume.PersistentVolumeInfo `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetVolumeResponse) Reset()         { *m = GetVolumeResponse{} }
func (m *GetVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*GetVolumeResponse) ProtoMessage()    {}
func (*GetVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b161a39b040a30, []int{3}
}

func (m *GetVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeResponse.Unmarshal(m, b)
}
func (m *GetVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeResponse.Marshal(b, m, deterministic)
}
func (m *GetVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeResponse.Merge(m, src)
}
func (m *GetVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_GetVolumeResponse.Size(m)
}
func (m *GetVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeResponse proto.InternalMessageInfo

func (m *GetVolumeResponse) GetResult() *volume.PersistentVolumeInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

//*
//  Request message for VolumeService.Delete method.
type DeleteVolumeRequest struct {
	// volume id for the delete request.
	Id                   *peloton.VolumeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteVolumeRequest) Reset()         { *m = DeleteVolumeRequest{} }
func (m *DeleteVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeRequest) ProtoMessage()    {}
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b161a39b040a30, []int{4}
}

func (m *DeleteVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeRequest.Unmarshal(m, b)
}
func (m *DeleteVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeRequest.Merge(m, src)
}
func (m *DeleteVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeRequest.Size(m)
}
func (m *DeleteVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeRequest proto.InternalMessageInfo

func (m *DeleteVolumeRequest) GetId() *peloton.VolumeID {
	if m != nil {
		return m.Id
	}
	return nil
}

//*
//  Response message for VolumeService.Delete method.
//
//  Return errors:
//    NOT_FOUND:         if the volume is not found.
type DeleteVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeResponse) Reset()         { *m = DeleteVolumeResponse{} }
func (m *DeleteVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeResponse) ProtoMessage()    {}
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b161a39b040a30, []int{5}
}

func (m *DeleteVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeResponse.Unmarshal(m, b)
}
func (m *DeleteVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeResponse.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeResponse.Merge(m, src)
}
func (m *DeleteVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeResponse.Size(m)
}
func (m *DeleteVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ListVolumesRequest)(nil), "peloton.api.v0.volume.svc.ListVolumesRequest")
	proto.RegisterType((*ListVolumesResponse)(nil), "peloton.api.v0.volume.svc.ListVolumesResponse")
	proto.RegisterMapType((map[string]*volume.PersistentVolumeInfo)(nil), "peloton.api.v0.volume.svc.ListVolumesResponse.VolumesEntry")
	proto.RegisterType((*GetVolumeRequest)(nil), "peloton.api.v0.volume.svc.GetVolumeRequest")
	proto.RegisterType((*GetVolumeResponse)(nil), "peloton.api.v0.volume.svc.GetVolumeResponse")
	proto.RegisterType((*DeleteVolumeRequest)(nil), "peloton.api.v0.volume.svc.DeleteVolumeRequest")
	proto.RegisterType((*DeleteVolumeResponse)(nil), "peloton.api.v0.volume.svc.DeleteVolumeResponse")
}

func init() {
	proto.RegisterFile("peloton/api/v0/volume/svc/volume_svc.proto", fileDescriptor_31b161a39b040a30)
}

var fileDescriptor_31b161a39b040a30 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5d, 0x6b, 0xe2, 0x40,
	0x14, 0x25, 0x11, 0x5d, 0xbc, 0xba, 0xe0, 0x8e, 0xcb, 0xa2, 0x61, 0x17, 0x24, 0x4f, 0xb2, 0xee,
	0x4e, 0x44, 0x61, 0x59, 0xda, 0xa7, 0xb6, 0x29, 0x92, 0xd2, 0x87, 0x92, 0xd2, 0x52, 0xfa, 0x52,
	0x34, 0x5e, 0x4b, 0xda, 0x34, 0x93, 0x66, 0x26, 0x03, 0xfe, 0xd0, 0xf6, 0xf7, 0x94, 0x26, 0x93,
	0x12, 0xc5, 0x88, 0xd2, 0xb7, 0xf9, 0x38, 0xf7, 0x9c, 0x73, 0xcf, 0x65, 0x06, 0x7e, 0x47, 0x18,
	0x30, 0xc1, 0x42, 0x6b, 0x1a, 0xf9, 0x96, 0x1c, 0x5a, 0x92, 0x05, 0xc9, 0x13, 0x5a, 0x5c, 0x7a,
	0x6a, 0x79, 0xc7, 0xa5, 0x47, 0xa3, 0x98, 0x09, 0x46, 0xba, 0x0a, 0x4b, 0xa7, 0x91, 0x4f, 0xe5,
	0x90, 0x66, 0x00, 0xca, 0xa5, 0x67, 0xfc, 0x5c, 0xa3, 0xc9, 0x91, 0x69, 0xa1, 0x61, 0x6e, 0x16,
	0x51, 0xf5, 0x29, 0xc6, 0x74, 0x80, 0x9c, 0xfb, 0x5c, 0x5c, 0xa7, 0x67, 0xdc, 0xc5, 0xe7, 0x04,
	0xb9, 0x20, 0x63, 0xa8, 0x3e, 0xb0, 0x99, 0x33, 0xef, 0x68, 0x3d, 0xad, 0xdf, 0x18, 0xfd, 0xa2,
	0x6b, 0x16, 0xf2, 0xed, 0x19, 0x9b, 0x39, 0xb6, 0x9b, 0x61, 0xcd, 0x17, 0x0d, 0xda, 0x2b, 0x5c,
	0x3c, 0x62, 0x21, 0x47, 0x72, 0x05, 0x5f, 0x32, 0x49, 0xde, 0xd1, 0x7a, 0x95, 0x7e, 0x63, 0x74,
	0x48, 0x4b, 0x3b, 0xa2, 0x1b, 0x08, 0xa8, 0xda, 0x9f, 0x86, 0x22, 0x5e, 0xba, 0x39, 0x97, 0x71,
	0x0f, 0xcd, 0xe2, 0x05, 0x69, 0x41, 0xe5, 0x11, 0x97, 0xa9, 0xe3, 0xba, 0xfb, 0xbe, 0x24, 0x47,
	0x50, 0x95, 0xd3, 0x20, 0xc1, 0x8e, 0x9e, 0x76, 0x31, 0x28, 0x91, 0xbd, 0xc0, 0x98, 0xfb, 0x5c,
	0x60, 0xa8, 0x84, 0x9d, 0x70, 0xc1, 0xdc, 0xac, 0xf2, 0x40, 0xff, 0xaf, 0x99, 0x36, 0xb4, 0x26,
	0xa8, 0xee, 0xf2, 0x80, 0x86, 0xa0, 0xfb, 0x79, 0x3a, 0xbd, 0xb2, 0x74, 0x14, 0x9d, 0xed, 0xea,
	0xfe, 0xdc, 0xbc, 0x81, 0x6f, 0x05, 0x16, 0x15, 0xcd, 0x09, 0xd4, 0x62, 0xe4, 0x49, 0x20, 0x14,
	0xd5, 0x5e, 0x16, 0x55, 0xa9, 0x39, 0x81, 0xb6, 0x8d, 0x01, 0x0a, 0xfc, 0xac, 0xc5, 0x1f, 0xf0,
	0x7d, 0x95, 0x28, 0x73, 0x39, 0x7a, 0xd5, 0xe1, 0x6b, 0x76, 0x74, 0x89, 0xb1, 0xf4, 0x3d, 0x24,
	0x01, 0x34, 0x0a, 0x83, 0x22, 0x7f, 0x77, 0x1d, 0x68, 0xea, 0xcc, 0xa0, 0xfb, 0xcd, 0x9f, 0x2c,
	0xa0, 0xfe, 0x11, 0x1d, 0x19, 0x6c, 0x29, 0x5e, 0x1f, 0x93, 0xf1, 0x67, 0x37, 0xb0, 0xd2, 0x61,
	0xd0, 0x2c, 0xf6, 0x4f, 0xb6, 0xf9, 0xdc, 0x90, 0xb8, 0x61, 0xed, 0x8c, 0xcf, 0x04, 0x8f, 0xff,
	0x41, 0xf9, 0xdb, 0xbe, 0xed, 0x96, 0x7e, 0x11, 0xb3, 0x5a, 0xfa, 0x76, 0xc7, 0x6f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xea, 0x81, 0xb4, 0x83, 0x46, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeServiceClient interface {
	// List associated volumes for given job.
	ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	// Get volume data.
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*GetVolumeResponse, error)
	// Delete a persistent volume.
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
}

type volumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewVolumeServiceClient(cc *grpc.ClientConn) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	out := new(ListVolumesResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.volume.svc.VolumeService/ListVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*GetVolumeResponse, error) {
	out := new(GetVolumeResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.volume.svc.VolumeService/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.volume.svc.VolumeService/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServiceServer is the server API for VolumeService service.
type VolumeServiceServer interface {
	// List associated volumes for given job.
	ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error)
	// Get volume data.
	GetVolume(context.Context, *GetVolumeRequest) (*GetVolumeResponse, error)
	// Delete a persistent volume.
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
}

func RegisterVolumeServiceServer(s *grpc.Server, srv VolumeServiceServer) {
	s.RegisterService(&_VolumeService_serviceDesc, srv)
}

func _VolumeService_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.volume.svc.VolumeService/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).ListVolumes(ctx, req.(*ListVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.volume.svc.VolumeService/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).GetVolume(ctx, req.(*GetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.volume.svc.VolumeService/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.v0.volume.svc.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVolumes",
			Handler:    _VolumeService_ListVolumes_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _VolumeService_GetVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _VolumeService_DeleteVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/api/v0/volume/svc/volume_svc.proto",
}
