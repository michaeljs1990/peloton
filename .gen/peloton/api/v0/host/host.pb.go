// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/host/host.proto

package peloton_api_v0_host

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HostState int32

const (
	HostState_HOST_STATE_INVALID HostState = 0
	// Reserved for future compatibility of new states.
	HostState_HOST_STATE_UNKNOWN HostState = 1
	// The host is healthy
	HostState_HOST_STATE_UP HostState = 2
	// The tasks running on the host are being rescheduled.
	// There will be no further placement of tasks on the host
	HostState_HOST_STATE_DRAINING HostState = 3
	// There are no tasks running on the host and is ready to be put into maintenance.
	HostState_HOST_STATE_DRAINED HostState = 4
	// The host is in maintenance.
	HostState_HOST_STATE_DOWN HostState = 5
)

var HostState_name = map[int32]string{
	0: "HOST_STATE_INVALID",
	1: "HOST_STATE_UNKNOWN",
	2: "HOST_STATE_UP",
	3: "HOST_STATE_DRAINING",
	4: "HOST_STATE_DRAINED",
	5: "HOST_STATE_DOWN",
}

var HostState_value = map[string]int32{
	"HOST_STATE_INVALID":  0,
	"HOST_STATE_UNKNOWN":  1,
	"HOST_STATE_UP":       2,
	"HOST_STATE_DRAINING": 3,
	"HOST_STATE_DRAINED":  4,
	"HOST_STATE_DOWN":     5,
}

func (x HostState) String() string {
	return proto.EnumName(HostState_name, int32(x))
}

func (HostState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a485e6d27968d73, []int{0}
}

type HostInfo struct {
	// The hostname of the host
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The IP address of the host
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// The current state of the host
	State                HostState `protobuf:"varint,3,opt,name=state,proto3,enum=peloton.api.v0.host.HostState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HostInfo) Reset()         { *m = HostInfo{} }
func (m *HostInfo) String() string { return proto.CompactTextString(m) }
func (*HostInfo) ProtoMessage()    {}
func (*HostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a485e6d27968d73, []int{0}
}

func (m *HostInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostInfo.Unmarshal(m, b)
}
func (m *HostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostInfo.Marshal(b, m, deterministic)
}
func (m *HostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostInfo.Merge(m, src)
}
func (m *HostInfo) XXX_Size() int {
	return xxx_messageInfo_HostInfo.Size(m)
}
func (m *HostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HostInfo proto.InternalMessageInfo

func (m *HostInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HostInfo) GetState() HostState {
	if m != nil {
		return m.State
	}
	return HostState_HOST_STATE_INVALID
}

func init() {
	proto.RegisterEnum("peloton.api.v0.host.HostState", HostState_name, HostState_value)
	proto.RegisterType((*HostInfo)(nil), "peloton.api.v0.host.HostInfo")
}

func init() { proto.RegisterFile("peloton/api/v0/host/host.proto", fileDescriptor_7a485e6d27968d73) }

var fileDescriptor_7a485e6d27968d73 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x48, 0xcd, 0xc9,
	0x2f, 0xc9, 0xcf, 0xd3, 0x4f, 0x2c, 0xc8, 0xd4, 0x2f, 0x33, 0xd0, 0xcf, 0xc8, 0x2f, 0x2e, 0x01,
	0x13, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xc2, 0x50, 0x79, 0xbd, 0xc4, 0x82, 0x4c, 0xbd,
	0x32, 0x03, 0x3d, 0x90, 0x94, 0x52, 0x0e, 0x17, 0x87, 0x47, 0x7e, 0x71, 0x89, 0x67, 0x5e, 0x5a,
	0xbe, 0x90, 0x14, 0x17, 0x07, 0x48, 0x2c, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83,
	0x33, 0x08, 0xce, 0x17, 0xe2, 0xe3, 0x62, 0xca, 0x2c, 0x90, 0x60, 0x02, 0x8b, 0x32, 0x65, 0x16,
	0x08, 0x99, 0x70, 0xb1, 0x16, 0x97, 0x24, 0x96, 0xa4, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0xf0, 0x19,
	0xc9, 0xe9, 0x61, 0x31, 0x5c, 0x0f, 0x64, 0x72, 0x30, 0x48, 0x55, 0x10, 0x44, 0xb1, 0xd6, 0x14,
	0x46, 0x2e, 0x4e, 0xb8, 0xa0, 0x90, 0x18, 0x97, 0x90, 0x87, 0x7f, 0x70, 0x48, 0x7c, 0x70, 0x88,
	0x63, 0x88, 0x6b, 0xbc, 0xa7, 0x5f, 0x98, 0xa3, 0x8f, 0xa7, 0x8b, 0x00, 0x03, 0x9a, 0x78, 0xa8,
	0x9f, 0xb7, 0x9f, 0x7f, 0xb8, 0x9f, 0x00, 0xa3, 0x90, 0x20, 0x17, 0x2f, 0xb2, 0x78, 0x80, 0x00,
	0x93, 0x90, 0x38, 0x97, 0x30, 0x92, 0x90, 0x4b, 0x90, 0xa3, 0xa7, 0x9f, 0xa7, 0x9f, 0xbb, 0x00,
	0x33, 0x9a, 0x19, 0x60, 0x09, 0x57, 0x17, 0x01, 0x16, 0x21, 0x61, 0x2e, 0x7e, 0x64, 0x71, 0x90,
	0xc1, 0xac, 0x49, 0x6c, 0xe0, 0x00, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xba, 0xf8,
	0x16, 0x42, 0x01, 0x00, 0x00,
}
