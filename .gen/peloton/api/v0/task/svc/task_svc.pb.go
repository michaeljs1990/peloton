// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/task/svc/task_svc.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	query "github.com/uber/peloton/.gen/peloton/api/v0/query"
	task "github.com/uber/peloton/.gen/peloton/api/v0/task"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//  Request message for TaskService.GetTask method.
type GetTaskRequest struct {
	// The job ID of the task to get.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID of the task to get.
	InstanceId           uint32   `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskRequest) Reset()         { *m = GetTaskRequest{} }
func (m *GetTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskRequest) ProtoMessage()    {}
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{0}
}

func (m *GetTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTaskRequest.Unmarshal(m, b)
}
func (m *GetTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTaskRequest.Marshal(b, m, deterministic)
}
func (m *GetTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskRequest.Merge(m, src)
}
func (m *GetTaskRequest) XXX_Size() int {
	return xxx_messageInfo_GetTaskRequest.Size(m)
}
func (m *GetTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskRequest proto.InternalMessageInfo

func (m *GetTaskRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetTaskRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

//*
//  Response message for TaskService.GetTask method.
//
//  Return errors:
//    NOT_FOUND:     if the job or task not found.
//    OUT_OF_RANGE:  if the instance ID is out of range.
type GetTaskResponse struct {
	// The task info of the task.
	// DEPRECATED
	Result *task.TaskInfo `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// Returns all active and completed tasks of the given instance.
	Results              []*task.TaskInfo `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetTaskResponse) Reset()         { *m = GetTaskResponse{} }
func (m *GetTaskResponse) String() string { return proto.CompactTextString(m) }
func (*GetTaskResponse) ProtoMessage()    {}
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{1}
}

func (m *GetTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTaskResponse.Unmarshal(m, b)
}
func (m *GetTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTaskResponse.Marshal(b, m, deterministic)
}
func (m *GetTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskResponse.Merge(m, src)
}
func (m *GetTaskResponse) XXX_Size() int {
	return xxx_messageInfo_GetTaskResponse.Size(m)
}
func (m *GetTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskResponse proto.InternalMessageInfo

func (m *GetTaskResponse) GetResult() *task.TaskInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetTaskResponse) GetResults() []*task.TaskInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

//*
//  Request message for TaskService.ListTasks method.
type ListTasksRequest struct {
	// The job ID of the tasks to list.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID range of the tasks to list.
	Range                *task.InstanceRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListTasksRequest) Reset()         { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()    {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{2}
}

func (m *ListTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTasksRequest.Unmarshal(m, b)
}
func (m *ListTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTasksRequest.Marshal(b, m, deterministic)
}
func (m *ListTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTasksRequest.Merge(m, src)
}
func (m *ListTasksRequest) XXX_Size() int {
	return xxx_messageInfo_ListTasksRequest.Size(m)
}
func (m *ListTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTasksRequest proto.InternalMessageInfo

func (m *ListTasksRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *ListTasksRequest) GetRange() *task.InstanceRange {
	if m != nil {
		return m.Range
	}
	return nil
}

//*
//  Response message for TaskService.GetTask method.
//
//  Return errors:
//    NOT_FOUND:  if the job ID is not found.
//    OUT_OF_RANGE:  if the instance IDs are out of range.
type ListTasksResponse struct {
	// The map of instance ID to task info for all matching tasks.
	Tasks                map[uint32]*task.TaskInfo `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListTasksResponse) Reset()         { *m = ListTasksResponse{} }
func (m *ListTasksResponse) String() string { return proto.CompactTextString(m) }
func (*ListTasksResponse) ProtoMessage()    {}
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{3}
}

func (m *ListTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTasksResponse.Unmarshal(m, b)
}
func (m *ListTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTasksResponse.Marshal(b, m, deterministic)
}
func (m *ListTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTasksResponse.Merge(m, src)
}
func (m *ListTasksResponse) XXX_Size() int {
	return xxx_messageInfo_ListTasksResponse.Size(m)
}
func (m *ListTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTasksResponse proto.InternalMessageInfo

func (m *ListTasksResponse) GetTasks() map[uint32]*task.TaskInfo {
	if m != nil {
		return m.Tasks
	}
	return nil
}

//*
//  Request message for TaskService.StartTasks method.
type StartTasksRequest struct {
	// The job ID of the tasks to start.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID ranges of the tasks to start.
	Ranges               []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StartTasksRequest) Reset()         { *m = StartTasksRequest{} }
func (m *StartTasksRequest) String() string { return proto.CompactTextString(m) }
func (*StartTasksRequest) ProtoMessage()    {}
func (*StartTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{4}
}

func (m *StartTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartTasksRequest.Unmarshal(m, b)
}
func (m *StartTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartTasksRequest.Marshal(b, m, deterministic)
}
func (m *StartTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTasksRequest.Merge(m, src)
}
func (m *StartTasksRequest) XXX_Size() int {
	return xxx_messageInfo_StartTasksRequest.Size(m)
}
func (m *StartTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartTasksRequest proto.InternalMessageInfo

func (m *StartTasksRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *StartTasksRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

//*
//  Response message for TaskService.StartTasks method.
//
//  Return errors:
//    NOT_FOUND:     if the job ID is not found.
//    OUT_OF_RANGE:  if the instance IDs are out of range.
//    INTERNAL:      if the tasks fail to start for internal errors.
type StartTasksResponse struct {
	// The set of instance IDs that have been started.
	Started []uint32 `protobuf:"varint,1,rep,packed,name=started,proto3" json:"started,omitempty"`
	// The set of instance IDs that are failed to start.
	Failed               []uint32 `protobuf:"varint,2,rep,packed,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartTasksResponse) Reset()         { *m = StartTasksResponse{} }
func (m *StartTasksResponse) String() string { return proto.CompactTextString(m) }
func (*StartTasksResponse) ProtoMessage()    {}
func (*StartTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{5}
}

func (m *StartTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartTasksResponse.Unmarshal(m, b)
}
func (m *StartTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartTasksResponse.Marshal(b, m, deterministic)
}
func (m *StartTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTasksResponse.Merge(m, src)
}
func (m *StartTasksResponse) XXX_Size() int {
	return xxx_messageInfo_StartTasksResponse.Size(m)
}
func (m *StartTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartTasksResponse proto.InternalMessageInfo

func (m *StartTasksResponse) GetStarted() []uint32 {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *StartTasksResponse) GetFailed() []uint32 {
	if m != nil {
		return m.Failed
	}
	return nil
}

//*
//  Request message for TaskService.StopTasks method.
type StopTasksRequest struct {
	// The job ID of the tasks to stop.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID ranges of the tasks to stop. If you dont specify any range
	// it will signal all instance IDs to stop.
	Ranges               []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StopTasksRequest) Reset()         { *m = StopTasksRequest{} }
func (m *StopTasksRequest) String() string { return proto.CompactTextString(m) }
func (*StopTasksRequest) ProtoMessage()    {}
func (*StopTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{6}
}

func (m *StopTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopTasksRequest.Unmarshal(m, b)
}
func (m *StopTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopTasksRequest.Marshal(b, m, deterministic)
}
func (m *StopTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopTasksRequest.Merge(m, src)
}
func (m *StopTasksRequest) XXX_Size() int {
	return xxx_messageInfo_StopTasksRequest.Size(m)
}
func (m *StopTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopTasksRequest proto.InternalMessageInfo

func (m *StopTasksRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *StopTasksRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

//*
//  Response message for TaskService.StopTasks method.
//
//  Return errors:
//    NOT_FOUND:     if the job ID is not found in Peloton.
//    OUT_OF_RANGE:  if the instance IDs are out of range.
//    INTERNAL:      if the tasks fail to stop for internal errors.
type StopTasksResponse struct {
	// The set of instance IDs that have been signalled to be stopped.
	// These instanced IDs will be asynchronously stopped.
	Stopped []uint32 `protobuf:"varint,1,rep,packed,name=stopped,proto3" json:"stopped,omitempty"`
	// The set of instance IDs that have failed to be signalled successfuly.
	Failed               []uint32 `protobuf:"varint,2,rep,packed,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopTasksResponse) Reset()         { *m = StopTasksResponse{} }
func (m *StopTasksResponse) String() string { return proto.CompactTextString(m) }
func (*StopTasksResponse) ProtoMessage()    {}
func (*StopTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{7}
}

func (m *StopTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopTasksResponse.Unmarshal(m, b)
}
func (m *StopTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopTasksResponse.Marshal(b, m, deterministic)
}
func (m *StopTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopTasksResponse.Merge(m, src)
}
func (m *StopTasksResponse) XXX_Size() int {
	return xxx_messageInfo_StopTasksResponse.Size(m)
}
func (m *StopTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopTasksResponse proto.InternalMessageInfo

func (m *StopTasksResponse) GetStopped() []uint32 {
	if m != nil {
		return m.Stopped
	}
	return nil
}

func (m *StopTasksResponse) GetFailed() []uint32 {
	if m != nil {
		return m.Failed
	}
	return nil
}

//*
//  Request message for TaskService.RestartTasks method.
type RestartTasksRequest struct {
	// The job ID of the tasks to restart.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID ranges of the tasks to restart.
	Ranges               []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RestartTasksRequest) Reset()         { *m = RestartTasksRequest{} }
func (m *RestartTasksRequest) String() string { return proto.CompactTextString(m) }
func (*RestartTasksRequest) ProtoMessage()    {}
func (*RestartTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{8}
}

func (m *RestartTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartTasksRequest.Unmarshal(m, b)
}
func (m *RestartTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartTasksRequest.Marshal(b, m, deterministic)
}
func (m *RestartTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartTasksRequest.Merge(m, src)
}
func (m *RestartTasksRequest) XXX_Size() int {
	return xxx_messageInfo_RestartTasksRequest.Size(m)
}
func (m *RestartTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartTasksRequest proto.InternalMessageInfo

func (m *RestartTasksRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *RestartTasksRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

//*
//  Response message for TaskService.RestartTasks method.
//
//  Return errors:
//    NOT_FOUND:     if the job ID is not found.
//    OUT_OF_RANGE:  if the instance IDs are out of range.
//    INTERNAL:      if the tasks fail to restart for internal errors.
type RestartTasksResponse struct {
	// The set of instance IDs that have been stopped.
	Stopped []uint32 `protobuf:"varint,1,rep,packed,name=stopped,proto3" json:"stopped,omitempty"`
	// The set of instance IDs that are failed to stop.
	Failed               []uint32 `protobuf:"varint,2,rep,packed,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartTasksResponse) Reset()         { *m = RestartTasksResponse{} }
func (m *RestartTasksResponse) String() string { return proto.CompactTextString(m) }
func (*RestartTasksResponse) ProtoMessage()    {}
func (*RestartTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{9}
}

func (m *RestartTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartTasksResponse.Unmarshal(m, b)
}
func (m *RestartTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartTasksResponse.Marshal(b, m, deterministic)
}
func (m *RestartTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartTasksResponse.Merge(m, src)
}
func (m *RestartTasksResponse) XXX_Size() int {
	return xxx_messageInfo_RestartTasksResponse.Size(m)
}
func (m *RestartTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestartTasksResponse proto.InternalMessageInfo

func (m *RestartTasksResponse) GetStopped() []uint32 {
	if m != nil {
		return m.Stopped
	}
	return nil
}

func (m *RestartTasksResponse) GetFailed() []uint32 {
	if m != nil {
		return m.Failed
	}
	return nil
}

//*
//  Request message for TaskService.QueryTasks method.
type QueryTasksRequest struct {
	// The job ID of the tasks to query.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The spec of query criteria for the tasks.
	Spec *task.QuerySpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// The spec of how to do pagination for the query results.
	Pagination           *query.PaginationSpec `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *QueryTasksRequest) Reset()         { *m = QueryTasksRequest{} }
func (m *QueryTasksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTasksRequest) ProtoMessage()    {}
func (*QueryTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{10}
}

func (m *QueryTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTasksRequest.Unmarshal(m, b)
}
func (m *QueryTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTasksRequest.Marshal(b, m, deterministic)
}
func (m *QueryTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTasksRequest.Merge(m, src)
}
func (m *QueryTasksRequest) XXX_Size() int {
	return xxx_messageInfo_QueryTasksRequest.Size(m)
}
func (m *QueryTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTasksRequest proto.InternalMessageInfo

func (m *QueryTasksRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *QueryTasksRequest) GetSpec() *task.QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QueryTasksRequest) GetPagination() *query.PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

//*
//  Response message for TaskService.QueryTasks method.
//
//  Return errors:
//    NOT_FOUND:     if the job ID is not found.
//    INTERNAL:      if fail to query the tasks for internal errors.
type QueryTasksResponse struct {
	// List of tasks that match the task query criteria.
	Records []*task.TaskInfo `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// Pagination result of the task query.
	Pagination           *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *QueryTasksResponse) Reset()         { *m = QueryTasksResponse{} }
func (m *QueryTasksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTasksResponse) ProtoMessage()    {}
func (*QueryTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{11}
}

func (m *QueryTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryTasksResponse.Unmarshal(m, b)
}
func (m *QueryTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryTasksResponse.Marshal(b, m, deterministic)
}
func (m *QueryTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTasksResponse.Merge(m, src)
}
func (m *QueryTasksResponse) XXX_Size() int {
	return xxx_messageInfo_QueryTasksResponse.Size(m)
}
func (m *QueryTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTasksResponse proto.InternalMessageInfo

func (m *QueryTasksResponse) GetRecords() []*task.TaskInfo {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryTasksResponse) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

//*
//  Request message for TaskService.BrowseSandbox method.
type BrowseSandboxRequest struct {
	// The job ID of the task to browse the sandbox.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID of the task to browse the sandbox.
	InstanceId uint32 `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// Get the sandbox path of a particular task of an instance.
	// This should be set to the mesos task id in the runtime of
	// the task for which the sandbox is being requested.
	// If not provided, the path of the latest task is returned.
	TaskId               string   `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowseSandboxRequest) Reset()         { *m = BrowseSandboxRequest{} }
func (m *BrowseSandboxRequest) String() string { return proto.CompactTextString(m) }
func (*BrowseSandboxRequest) ProtoMessage()    {}
func (*BrowseSandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{12}
}

func (m *BrowseSandboxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowseSandboxRequest.Unmarshal(m, b)
}
func (m *BrowseSandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowseSandboxRequest.Marshal(b, m, deterministic)
}
func (m *BrowseSandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowseSandboxRequest.Merge(m, src)
}
func (m *BrowseSandboxRequest) XXX_Size() int {
	return xxx_messageInfo_BrowseSandboxRequest.Size(m)
}
func (m *BrowseSandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowseSandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrowseSandboxRequest proto.InternalMessageInfo

func (m *BrowseSandboxRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *BrowseSandboxRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *BrowseSandboxRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

//*
//  Response message for TaskService.BrowseSandbox method.
//
//  Return errors:
//    NOT_FOUND:     if the job ID is not found.
//    OUT_OF_RANGE:  if the instance IDs are out of range.
//    INTERNAL:      if fail to browse the sandbox for internal errors.
//    FAILED_PRECONDITION:  if the task has not been run yet.
type BrowseSandboxResponse struct {
	// The hostname of the sandbox.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port of the sandbox.
	Port string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	// The list of sandbox file paths.
	// TODO: distinguish files and directories in the sandbox
	Paths []string `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty"`
	// Mesos Master hostname and port.
	MesosMasterHostname  string   `protobuf:"bytes,5,opt,name=mesosMasterHostname,proto3" json:"mesosMasterHostname,omitempty"`
	MesosMasterPort      string   `protobuf:"bytes,6,opt,name=mesosMasterPort,proto3" json:"mesosMasterPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowseSandboxResponse) Reset()         { *m = BrowseSandboxResponse{} }
func (m *BrowseSandboxResponse) String() string { return proto.CompactTextString(m) }
func (*BrowseSandboxResponse) ProtoMessage()    {}
func (*BrowseSandboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{13}
}

func (m *BrowseSandboxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowseSandboxResponse.Unmarshal(m, b)
}
func (m *BrowseSandboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowseSandboxResponse.Marshal(b, m, deterministic)
}
func (m *BrowseSandboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowseSandboxResponse.Merge(m, src)
}
func (m *BrowseSandboxResponse) XXX_Size() int {
	return xxx_messageInfo_BrowseSandboxResponse.Size(m)
}
func (m *BrowseSandboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowseSandboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BrowseSandboxResponse proto.InternalMessageInfo

func (m *BrowseSandboxResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *BrowseSandboxResponse) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *BrowseSandboxResponse) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *BrowseSandboxResponse) GetMesosMasterHostname() string {
	if m != nil {
		return m.MesosMasterHostname
	}
	return ""
}

func (m *BrowseSandboxResponse) GetMesosMasterPort() string {
	if m != nil {
		return m.MesosMasterPort
	}
	return ""
}

type TaskEventsError struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskEventsError) Reset()         { *m = TaskEventsError{} }
func (m *TaskEventsError) String() string { return proto.CompactTextString(m) }
func (*TaskEventsError) ProtoMessage()    {}
func (*TaskEventsError) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{14}
}

func (m *TaskEventsError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskEventsError.Unmarshal(m, b)
}
func (m *TaskEventsError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskEventsError.Marshal(b, m, deterministic)
}
func (m *TaskEventsError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEventsError.Merge(m, src)
}
func (m *TaskEventsError) XXX_Size() int {
	return xxx_messageInfo_TaskEventsError.Size(m)
}
func (m *TaskEventsError) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEventsError.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEventsError proto.InternalMessageInfo

func (m *TaskEventsError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//*
//  Pod event of a Peloton pod instance.
type PodEvent struct {
	// The task ID of the task event.
	TaskId *peloton.TaskID `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// Actual state of an instance
	ActualState string `protobuf:"bytes,2,opt,name=actualState,proto3" json:"actualState,omitempty"`
	// Goal State of an instance
	GoalState string `protobuf:"bytes,3,opt,name=goalState,proto3" json:"goalState,omitempty"`
	// The time when the event was created. The time is represented in
	// RFC3339 form with UTC timezone.
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The config version currently used by the runtime.
	ConfigVersion uint64 `protobuf:"varint,5,opt,name=configVersion,proto3" json:"configVersion,omitempty"`
	// The desired config version that should be used by the runtime.
	DesiredConfigVersion uint64 `protobuf:"varint,6,opt,name=desiredConfigVersion,proto3" json:"desiredConfigVersion,omitempty"`
	// The agentID for the task
	AgentID string `protobuf:"bytes,7,opt,name=agentID,proto3" json:"agentID,omitempty"`
	// The host on which the task is running
	Hostname string `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Short human friendly message explaining state.
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// The short reason for the task event
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	// The previous task ID of the pod event.
	PrevTaskId *peloton.TaskID `protobuf:"bytes,11,opt,name=prevTaskId,proto3" json:"prevTaskId,omitempty"`
	// The health check state of the task
	Healthy              string   `protobuf:"bytes,12,opt,name=healthy,proto3" json:"healthy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodEvent) Reset()         { *m = PodEvent{} }
func (m *PodEvent) String() string { return proto.CompactTextString(m) }
func (*PodEvent) ProtoMessage()    {}
func (*PodEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{15}
}

func (m *PodEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodEvent.Unmarshal(m, b)
}
func (m *PodEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodEvent.Marshal(b, m, deterministic)
}
func (m *PodEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodEvent.Merge(m, src)
}
func (m *PodEvent) XXX_Size() int {
	return xxx_messageInfo_PodEvent.Size(m)
}
func (m *PodEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PodEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PodEvent proto.InternalMessageInfo

func (m *PodEvent) GetTaskId() *peloton.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *PodEvent) GetActualState() string {
	if m != nil {
		return m.ActualState
	}
	return ""
}

func (m *PodEvent) GetGoalState() string {
	if m != nil {
		return m.GoalState
	}
	return ""
}

func (m *PodEvent) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PodEvent) GetConfigVersion() uint64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *PodEvent) GetDesiredConfigVersion() uint64 {
	if m != nil {
		return m.DesiredConfigVersion
	}
	return 0
}

func (m *PodEvent) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *PodEvent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PodEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PodEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodEvent) GetPrevTaskId() *peloton.TaskID {
	if m != nil {
		return m.PrevTaskId
	}
	return nil
}

func (m *PodEvent) GetHealthy() string {
	if m != nil {
		return m.Healthy
	}
	return ""
}

//*
//  Request message for TaskService.GetPodEvents method.
type GetPodEventsRequest struct {
	// The job ID of the task
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID of the task
	InstanceId uint32 `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// Limit of events
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPodEventsRequest) Reset()         { *m = GetPodEventsRequest{} }
func (m *GetPodEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsRequest) ProtoMessage()    {}
func (*GetPodEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{16}
}

func (m *GetPodEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsRequest.Unmarshal(m, b)
}
func (m *GetPodEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsRequest.Marshal(b, m, deterministic)
}
func (m *GetPodEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsRequest.Merge(m, src)
}
func (m *GetPodEventsRequest) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsRequest.Size(m)
}
func (m *GetPodEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsRequest proto.InternalMessageInfo

func (m *GetPodEventsRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetPodEventsRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *GetPodEventsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

//*
//  Response message for TaskService.GetPodEvents method.
//
//  Return errors:
//    INTERNAL:      if failed to get pod events for internal errors.
type GetPodEventsResponse struct {
	Result               []*PodEvent                 `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error                *GetPodEventsResponse_Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetPodEventsResponse) Reset()         { *m = GetPodEventsResponse{} }
func (m *GetPodEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsResponse) ProtoMessage()    {}
func (*GetPodEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{17}
}

func (m *GetPodEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsResponse.Unmarshal(m, b)
}
func (m *GetPodEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsResponse.Marshal(b, m, deterministic)
}
func (m *GetPodEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsResponse.Merge(m, src)
}
func (m *GetPodEventsResponse) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsResponse.Size(m)
}
func (m *GetPodEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsResponse proto.InternalMessageInfo

func (m *GetPodEventsResponse) GetResult() []*PodEvent {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetPodEventsResponse) GetError() *GetPodEventsResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetPodEventsResponse_Error struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPodEventsResponse_Error) Reset()         { *m = GetPodEventsResponse_Error{} }
func (m *GetPodEventsResponse_Error) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsResponse_Error) ProtoMessage()    {}
func (*GetPodEventsResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{17, 0}
}

func (m *GetPodEventsResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsResponse_Error.Unmarshal(m, b)
}
func (m *GetPodEventsResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsResponse_Error.Marshal(b, m, deterministic)
}
func (m *GetPodEventsResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsResponse_Error.Merge(m, src)
}
func (m *GetPodEventsResponse_Error) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsResponse_Error.Size(m)
}
func (m *GetPodEventsResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsResponse_Error proto.InternalMessageInfo

func (m *GetPodEventsResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//*
//  Request message for TaskService.RefreshTasks method.
type RefreshTasksRequest struct {
	// The job ID of the tasks to list.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID range of the tasks to refresh.
	Range                *task.InstanceRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RefreshTasksRequest) Reset()         { *m = RefreshTasksRequest{} }
func (m *RefreshTasksRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshTasksRequest) ProtoMessage()    {}
func (*RefreshTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{18}
}

func (m *RefreshTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshTasksRequest.Unmarshal(m, b)
}
func (m *RefreshTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshTasksRequest.Marshal(b, m, deterministic)
}
func (m *RefreshTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshTasksRequest.Merge(m, src)
}
func (m *RefreshTasksRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshTasksRequest.Size(m)
}
func (m *RefreshTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshTasksRequest proto.InternalMessageInfo

func (m *RefreshTasksRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *RefreshTasksRequest) GetRange() *task.InstanceRange {
	if m != nil {
		return m.Range
	}
	return nil
}

//*
//  Response message for TaskService.RefreshTasks method.
//
//  Return errors:
//    NOT_FOUND:  if the job or tasks are not found.
type RefreshTasksResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshTasksResponse) Reset()         { *m = RefreshTasksResponse{} }
func (m *RefreshTasksResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshTasksResponse) ProtoMessage()    {}
func (*RefreshTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{19}
}

func (m *RefreshTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshTasksResponse.Unmarshal(m, b)
}
func (m *RefreshTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshTasksResponse.Marshal(b, m, deterministic)
}
func (m *RefreshTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshTasksResponse.Merge(m, src)
}
func (m *RefreshTasksResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshTasksResponse.Size(m)
}
func (m *RefreshTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshTasksResponse proto.InternalMessageInfo

//*
//  Request message for TaskService.GetTaskCache method.
type GetTaskCacheRequest struct {
	// The job ID to look up the task.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID of the task to get.
	InstanceId           uint32   `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskCacheRequest) Reset()         { *m = GetTaskCacheRequest{} }
func (m *GetTaskCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskCacheRequest) ProtoMessage()    {}
func (*GetTaskCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{20}
}

func (m *GetTaskCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTaskCacheRequest.Unmarshal(m, b)
}
func (m *GetTaskCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTaskCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetTaskCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskCacheRequest.Merge(m, src)
}
func (m *GetTaskCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetTaskCacheRequest.Size(m)
}
func (m *GetTaskCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskCacheRequest proto.InternalMessageInfo

func (m *GetTaskCacheRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetTaskCacheRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

//*
//  Response message for TaskService.GetTaskCache method.
//
//  Return errors:
//    NOT_FOUND:      if the job or task not found in cache.
//    INTERNAL_ERROR: if fail to read cache due to internal error.
type GetTaskCacheResponse struct {
	// The task runtime of the task.
	Runtime              *task.RuntimeInfo `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetTaskCacheResponse) Reset()         { *m = GetTaskCacheResponse{} }
func (m *GetTaskCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetTaskCacheResponse) ProtoMessage()    {}
func (*GetTaskCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c4af01266713cbb, []int{21}
}

func (m *GetTaskCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTaskCacheResponse.Unmarshal(m, b)
}
func (m *GetTaskCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTaskCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetTaskCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskCacheResponse.Merge(m, src)
}
func (m *GetTaskCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetTaskCacheResponse.Size(m)
}
func (m *GetTaskCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskCacheResponse proto.InternalMessageInfo

func (m *GetTaskCacheResponse) GetRuntime() *task.RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTaskRequest)(nil), "peloton.api.v0.task.svc.GetTaskRequest")
	proto.RegisterType((*GetTaskResponse)(nil), "peloton.api.v0.task.svc.GetTaskResponse")
	proto.RegisterType((*ListTasksRequest)(nil), "peloton.api.v0.task.svc.ListTasksRequest")
	proto.RegisterType((*ListTasksResponse)(nil), "peloton.api.v0.task.svc.ListTasksResponse")
	proto.RegisterMapType((map[uint32]*task.TaskInfo)(nil), "peloton.api.v0.task.svc.ListTasksResponse.TasksEntry")
	proto.RegisterType((*StartTasksRequest)(nil), "peloton.api.v0.task.svc.StartTasksRequest")
	proto.RegisterType((*StartTasksResponse)(nil), "peloton.api.v0.task.svc.StartTasksResponse")
	proto.RegisterType((*StopTasksRequest)(nil), "peloton.api.v0.task.svc.StopTasksRequest")
	proto.RegisterType((*StopTasksResponse)(nil), "peloton.api.v0.task.svc.StopTasksResponse")
	proto.RegisterType((*RestartTasksRequest)(nil), "peloton.api.v0.task.svc.RestartTasksRequest")
	proto.RegisterType((*RestartTasksResponse)(nil), "peloton.api.v0.task.svc.RestartTasksResponse")
	proto.RegisterType((*QueryTasksRequest)(nil), "peloton.api.v0.task.svc.QueryTasksRequest")
	proto.RegisterType((*QueryTasksResponse)(nil), "peloton.api.v0.task.svc.QueryTasksResponse")
	proto.RegisterType((*BrowseSandboxRequest)(nil), "peloton.api.v0.task.svc.BrowseSandboxRequest")
	proto.RegisterType((*BrowseSandboxResponse)(nil), "peloton.api.v0.task.svc.BrowseSandboxResponse")
	proto.RegisterType((*TaskEventsError)(nil), "peloton.api.v0.task.svc.TaskEventsError")
	proto.RegisterType((*PodEvent)(nil), "peloton.api.v0.task.svc.PodEvent")
	proto.RegisterType((*GetPodEventsRequest)(nil), "peloton.api.v0.task.svc.GetPodEventsRequest")
	proto.RegisterType((*GetPodEventsResponse)(nil), "peloton.api.v0.task.svc.GetPodEventsResponse")
	proto.RegisterType((*GetPodEventsResponse_Error)(nil), "peloton.api.v0.task.svc.GetPodEventsResponse.Error")
	proto.RegisterType((*RefreshTasksRequest)(nil), "peloton.api.v0.task.svc.RefreshTasksRequest")
	proto.RegisterType((*RefreshTasksResponse)(nil), "peloton.api.v0.task.svc.RefreshTasksResponse")
	proto.RegisterType((*GetTaskCacheRequest)(nil), "peloton.api.v0.task.svc.GetTaskCacheRequest")
	proto.RegisterType((*GetTaskCacheResponse)(nil), "peloton.api.v0.task.svc.GetTaskCacheResponse")
}

func init() {
	proto.RegisterFile("peloton/api/v0/task/svc/task_svc.proto", fileDescriptor_1c4af01266713cbb)
}

var fileDescriptor_1c4af01266713cbb = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xd7, 0x35, 0xb6, 0x13, 0x4f, 0x6a, 0x92, 0x6c, 0x4c, 0x7b, 0xb2, 0x4a, 0xe4, 0x9e, 0x2a,
	0x08, 0x2d, 0x38, 0x91, 0xa3, 0x42, 0xc9, 0x03, 0x42, 0x6d, 0x42, 0x6b, 0xfe, 0x48, 0x61, 0x5d,
	0x81, 0x84, 0x90, 0xd0, 0xfa, 0xbc, 0xb1, 0xaf, 0xb1, 0x6f, 0xaf, 0xbb, 0x6b, 0x43, 0xde, 0x40,
	0xad, 0x78, 0xe5, 0x53, 0xf0, 0x21, 0x90, 0x90, 0x90, 0xf8, 0x64, 0x68, 0xff, 0x9c, 0x7d, 0xb6,
	0xef, 0xce, 0x16, 0x25, 0xca, 0x8b, 0x75, 0xb3, 0x3b, 0xb3, 0x33, 0xbf, 0xdf, 0xcc, 0xce, 0x8e,
	0x0c, 0xef, 0x46, 0x74, 0xc0, 0x24, 0x0b, 0x0f, 0x48, 0x14, 0x1c, 0x8c, 0x0f, 0x0f, 0x24, 0x11,
	0x17, 0x07, 0x62, 0xec, 0xeb, 0x8f, 0x1f, 0xc5, 0xd8, 0x6f, 0x44, 0x9c, 0x49, 0x86, 0x6e, 0x5b,
	0xbd, 0x06, 0x89, 0x82, 0xc6, 0xf8, 0xb0, 0xa1, 0xb6, 0x1b, 0x62, 0xec, 0xd7, 0xee, 0xcc, 0x1d,
	0x10, 0xeb, 0x69, 0xb3, 0x5a, 0x7d, 0x6e, 0xf7, 0xe5, 0x88, 0xf2, 0x4b, 0xf3, 0x6b, 0x35, 0xf6,
	0xd2, 0x02, 0xd0, 0xa7, 0xeb, 0x7d, 0x8f, 0xc2, 0x5b, 0x4f, 0xa9, 0x7c, 0x4e, 0xc4, 0x05, 0xa6,
	0x2f, 0x47, 0x54, 0x48, 0x74, 0x04, 0xc5, 0x17, 0xac, 0xd3, 0xea, 0xba, 0x4e, 0xdd, 0xd9, 0xdf,
	0x6c, 0xbe, 0xd3, 0x98, 0x0b, 0x2d, 0x16, 0xbf, 0x60, 0x9d, 0xd6, 0x09, 0x36, 0xba, 0x68, 0x0f,
	0x20, 0x08, 0x85, 0x24, 0xa1, 0x4f, 0x5b, 0x5d, 0xf7, 0x46, 0xdd, 0xd9, 0xaf, 0xe0, 0xc4, 0x8a,
	0xf7, 0xab, 0x03, 0x5b, 0x13, 0x3f, 0x22, 0x62, 0xa1, 0xa0, 0xe8, 0x21, 0x94, 0x38, 0x15, 0xa3,
	0x81, 0xcc, 0xf2, 0xa4, 0xc3, 0x54, 0x26, 0xad, 0xf0, 0x9c, 0x61, 0xab, 0x8c, 0x3e, 0x86, 0x75,
	0xf3, 0x25, 0xdc, 0x1b, 0xf5, 0xb5, 0xe5, 0x76, 0xb1, 0xb6, 0x8a, 0x61, 0xfb, 0xab, 0x40, 0xe8,
	0x20, 0xc4, 0x1b, 0xa1, 0x7d, 0x04, 0x45, 0x4e, 0xc2, 0x1e, 0xd5, 0x40, 0x37, 0x9b, 0x5e, 0x6a,
	0x00, 0x2d, 0x8b, 0x1e, 0x2b, 0x4d, 0x6c, 0x0c, 0xbc, 0x3f, 0x1d, 0xd8, 0x49, 0xc4, 0x60, 0x99,
	0xf8, 0x12, 0x8a, 0xca, 0x44, 0xb8, 0x8e, 0x06, 0xf4, 0xb0, 0x91, 0x51, 0x0d, 0x8d, 0x05, 0x53,
	0x0d, 0x53, 0x9c, 0x86, 0x92, 0x5f, 0x62, 0x73, 0x46, 0xed, 0x3b, 0x80, 0xe9, 0x22, 0xda, 0x86,
	0xb5, 0x0b, 0x7a, 0xa9, 0xd1, 0x55, 0xb0, 0xfa, 0x54, 0x88, 0xc7, 0x64, 0x30, 0x8a, 0x83, 0x5f,
	0xc2, 0x9e, 0xd1, 0x3d, 0xbe, 0xf1, 0xc8, 0xf1, 0x5e, 0x3b, 0xb0, 0xd3, 0x96, 0x84, 0xff, 0x0f,
	0x04, 0x1e, 0x43, 0x49, 0xf3, 0x11, 0xa7, 0x70, 0x15, 0x06, 0xad, 0x85, 0xf7, 0x39, 0xa0, 0x64,
	0x14, 0x96, 0x42, 0x17, 0xd6, 0x85, 0x5a, 0xa5, 0x5d, 0x4d, 0x62, 0x05, 0xc7, 0x22, 0xba, 0x05,
	0xa5, 0x73, 0x12, 0x0c, 0x68, 0x57, 0xfb, 0xaa, 0x60, 0x2b, 0x79, 0xaf, 0x1c, 0xd8, 0x6e, 0x4b,
	0x16, 0x5d, 0x2f, 0x9a, 0x53, 0xc5, 0xe9, 0x24, 0x88, 0x24, 0x18, 0x16, 0x45, 0x49, 0x30, 0x5a,
	0xcc, 0x04, 0xf3, 0x9b, 0x03, 0xbb, 0x98, 0x8a, 0xeb, 0xcf, 0xce, 0x33, 0xa8, 0xce, 0xc6, 0xf1,
	0x9f, 0x21, 0xfd, 0xe3, 0xc0, 0xce, 0x37, 0xaa, 0x93, 0xbd, 0x39, 0xa0, 0x26, 0x14, 0x44, 0x44,
	0x7d, 0x5b, 0xf1, 0x7b, 0xa9, 0x70, 0xb4, 0xab, 0x76, 0x44, 0x7d, 0xac, 0x75, 0xd1, 0x09, 0x40,
	0x44, 0x7a, 0x41, 0x48, 0x64, 0xc0, 0x42, 0x77, 0x4d, 0x5b, 0xde, 0x9b, 0xb7, 0x34, 0x9d, 0xf6,
	0x6c, 0xa2, 0xa7, 0xed, 0x13, 0x76, 0xde, 0xef, 0x0e, 0xa0, 0x24, 0x08, 0xcb, 0x86, 0xee, 0x61,
	0x3e, 0xe3, 0xdd, 0xf8, 0xca, 0x2f, 0xef, 0x61, 0x5a, 0x1b, 0x7d, 0x36, 0x13, 0x95, 0xc1, 0x53,
	0x5f, 0x16, 0xd5, 0x4c, 0x44, 0xaf, 0x1c, 0xa8, 0x3e, 0xe6, 0xec, 0x27, 0x41, 0xdb, 0x24, 0xec,
	0x76, 0xd8, 0xcf, 0x57, 0xd9, 0xf7, 0x55, 0x72, 0x15, 0x92, 0x56, 0x57, 0x33, 0x58, 0xc6, 0x56,
	0x52, 0x7d, 0xf0, 0xed, 0xb9, 0x28, 0x2c, 0x35, 0x35, 0xd8, 0xe8, 0x33, 0x21, 0x43, 0x32, 0x34,
	0x1d, 0xaa, 0x8c, 0x27, 0x32, 0x42, 0x50, 0x88, 0x18, 0x97, 0xf6, 0x2c, 0xfd, 0x8d, 0xaa, 0x50,
	0x8c, 0x88, 0xec, 0x0b, 0xb7, 0x50, 0x5f, 0xdb, 0x2f, 0x63, 0x23, 0xa0, 0x43, 0xd8, 0x1d, 0x52,
	0xc1, 0xc4, 0xd7, 0x44, 0x48, 0xca, 0x9f, 0xc5, 0x07, 0x16, 0xb5, 0x61, 0xda, 0x16, 0xda, 0x87,
	0xad, 0xc4, 0xf2, 0x99, 0x72, 0x53, 0xd2, 0xda, 0xf3, 0xcb, 0xde, 0x03, 0xd8, 0x52, 0x89, 0x39,
	0x1d, 0xd3, 0x50, 0x8a, 0x53, 0xce, 0x19, 0x57, 0xd5, 0x3d, 0xa4, 0x42, 0x90, 0x1e, 0xd5, 0xec,
	0x95, 0x71, 0x2c, 0x7a, 0x7f, 0xad, 0xc1, 0xc6, 0x19, 0xeb, 0x6a, 0x65, 0xf4, 0xd1, 0x84, 0x0d,
	0x27, 0xbd, 0x12, 0x63, 0x51, 0x27, 0xfe, 0x24, 0x66, 0x0b, 0xd5, 0x61, 0x93, 0xf8, 0x72, 0x44,
	0x06, 0x6d, 0x49, 0x64, 0x4c, 0x4b, 0x72, 0x09, 0xdd, 0x81, 0x72, 0x8f, 0xc5, 0xfb, 0x86, 0x9e,
	0xe9, 0x82, 0xda, 0x95, 0xc1, 0x50, 0x5d, 0xcb, 0x61, 0xe4, 0x16, 0xcc, 0xee, 0x64, 0x01, 0xdd,
	0x83, 0x8a, 0xcf, 0xc2, 0xf3, 0xa0, 0xf7, 0x2d, 0xe5, 0x42, 0x95, 0x95, 0x62, 0xa9, 0x80, 0x67,
	0x17, 0x51, 0x13, 0xaa, 0x5d, 0x2a, 0x02, 0x4e, 0xbb, 0x4f, 0x66, 0x94, 0x4b, 0x5a, 0x39, 0x75,
	0x4f, 0xd1, 0x42, 0x7a, 0x34, 0x94, 0xad, 0x13, 0x77, 0xdd, 0xd0, 0x62, 0xc5, 0x99, 0x2c, 0x6f,
	0xcc, 0x65, 0x39, 0x41, 0x66, 0x79, 0x86, 0x4c, 0x55, 0x4d, 0x9c, 0x12, 0xc1, 0x42, 0x17, 0x4c,
	0x35, 0x19, 0x09, 0x7d, 0x0a, 0x10, 0x71, 0x3a, 0x7e, 0x6e, 0xb8, 0xdd, 0x5c, 0x89, 0xdb, 0x84,
	0x85, 0xf2, 0xd8, 0xa7, 0x64, 0x20, 0xfb, 0x97, 0xee, 0x4d, 0xe3, 0xd1, 0x8a, 0xde, 0x2f, 0x0e,
	0xec, 0x3e, 0xa5, 0x32, 0xce, 0xa0, 0xb8, 0xd2, 0xcb, 0x52, 0x85, 0xe2, 0x20, 0x18, 0x06, 0xa6,
	0xbe, 0x0b, 0xd8, 0x08, 0xde, 0xdf, 0x0e, 0x54, 0x67, 0x43, 0xb0, 0x37, 0xe5, 0x93, 0xc4, 0xfc,
	0xa4, 0x7a, 0xc8, 0xdd, 0xcc, 0xb1, 0x21, 0xb6, 0x9d, 0xcc, 0x50, 0x2d, 0x28, 0x52, 0x55, 0xb8,
	0xb6, 0x83, 0x1c, 0x65, 0x5a, 0xa6, 0x39, 0x6e, 0xe8, 0x9a, 0xc7, 0xe6, 0x84, 0xda, 0x5d, 0x28,
	0x2e, 0xbb, 0x03, 0xaf, 0xf5, 0xe3, 0x74, 0xce, 0xa9, 0xe8, 0x5f, 0xe7, 0xec, 0x75, 0x4b, 0x3d,
	0x4d, 0xc9, 0x28, 0x0c, 0x1c, 0xef, 0x85, 0x4e, 0xb1, 0x5a, 0x7b, 0x42, 0xfc, 0x3e, 0xbd, 0xd2,
	0x39, 0x18, 0xeb, 0x5c, 0x26, 0x7c, 0xd9, 0x5c, 0x1e, 0xc3, 0x3a, 0x1f, 0x85, 0xea, 0x4e, 0x5a,
	0x77, 0xf5, 0x54, 0x5c, 0xd8, 0xe8, 0xd8, 0x37, 0xc1, 0x08, 0xcd, 0x3f, 0x36, 0x60, 0x53, 0x9d,
	0xd8, 0xa6, 0x7c, 0x1c, 0xf8, 0x14, 0xfd, 0x00, 0xeb, 0xd6, 0x07, 0x7a, 0x2f, 0x2f, 0xb1, 0x89,
	0xa1, 0xbf, 0xb6, 0xbf, 0x5c, 0xd1, 0x46, 0xda, 0x81, 0xf2, 0x64, 0x0a, 0x45, 0xef, 0xaf, 0x32,
	0xa9, 0x1a, 0x0f, 0xf7, 0x57, 0x1f, 0x6a, 0x11, 0x05, 0x98, 0x8e, 0x78, 0x28, 0xdb, 0x72, 0x61,
	0x1a, 0xad, 0x3d, 0x58, 0x49, 0x77, 0x0a, 0x65, 0x32, 0x7b, 0xe5, 0x40, 0x99, 0x1f, 0x12, 0x6b,
	0xf7, 0x57, 0x51, 0xb5, 0x3e, 0x2e, 0xe0, 0x66, 0x72, 0x1e, 0x42, 0x1f, 0x64, 0xda, 0xa6, 0x8c,
	0x6f, 0xb5, 0x0f, 0x57, 0xd4, 0x9e, 0xf2, 0x36, 0x1d, 0x36, 0x72, 0x78, 0x5b, 0x18, 0xab, 0x72,
	0x78, 0x4b, 0x99, 0x5e, 0x42, 0xa8, 0xcc, 0xbc, 0xdd, 0x28, 0x3b, 0xcc, 0xb4, 0x49, 0xa3, 0xd6,
	0x58, 0x55, 0x3d, 0xc9, 0xe1, 0xf4, 0xe2, 0xe6, 0x72, 0xb8, 0xd0, 0x65, 0x72, 0x39, 0x5c, 0xec,
	0x06, 0xca, 0x59, 0xf2, 0x86, 0xe6, 0x38, 0x4b, 0x69, 0x1a, 0x39, 0xce, 0x52, 0xaf, 0xbd, 0x71,
	0x36, 0xe9, 0xb0, 0xf9, 0xce, 0xe6, 0x1f, 0xa1, 0x7c, 0x67, 0x0b, 0x6d, 0xfb, 0x71, 0x13, 0xb2,
	0xfe, 0x65, 0xf8, 0xfe, 0x76, 0xc6, 0xdf, 0x14, 0x9d, 0x92, 0xfe, 0x97, 0xe0, 0xe8, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x13, 0xb0, 0x40, 0xc2, 0xc8, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// Get the info of a task in job.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// List a set of tasks in a job for a given range of instance IDs.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// Start a set of tasks for a job. Will be no-op for tasks that
	// are currently running. The tasks are started asynchronously after
	// the API call returns.
	StartTasks(ctx context.Context, in *StartTasksRequest, opts ...grpc.CallOption) (*StartTasksResponse, error)
	// Stop a set of tasks for a job. Will be no-op for tasks that
	// are currently stopped. The tasks are stopped asynchronously after
	// the API call returns.
	StopTasks(ctx context.Context, in *StopTasksRequest, opts ...grpc.CallOption) (*StopTasksResponse, error)
	// Restart a set of tasks for a job. Will start tasks that are
	// currently stopped. This is an asynchronous call.
	RestartTasks(ctx context.Context, in *RestartTasksRequest, opts ...grpc.CallOption) (*RestartTasksResponse, error)
	// Query task info in a job, using a set of filters.
	QueryTasks(ctx context.Context, in *QueryTasksRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error)
	// BrowseSandbox returns list of file paths inside sandbox. The
	// client can use the Mesos Agent HTTP endpoints to read and download
	// the files. http://mesos.apache.org/documentation/latest/endpoints/
	BrowseSandbox(ctx context.Context, in *BrowseSandboxRequest, opts ...grpc.CallOption) (*BrowseSandboxResponse, error)
	// Debug only method. Allows user to load task runtime state from DB
	// and re-execute the action associated with current state.
	RefreshTasks(ctx context.Context, in *RefreshTasksRequest, opts ...grpc.CallOption) (*RefreshTasksResponse, error)
	// Debug only method. Get the cache of a task stored in Peloton.
	GetTaskCache(ctx context.Context, in *GetTaskCacheRequest, opts ...grpc.CallOption) (*GetTaskCacheResponse, error)
	// GetPodEvents returns pod events (state transition for a pod),
	// in reverse chronological order. pod is singular instance of a Peloton job.
	GetPodEvents(ctx context.Context, in *GetPodEventsRequest, opts ...grpc.CallOption) (*GetPodEventsResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) StartTasks(ctx context.Context, in *StartTasksRequest, opts ...grpc.CallOption) (*StartTasksResponse, error) {
	out := new(StartTasksResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/StartTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) StopTasks(ctx context.Context, in *StopTasksRequest, opts ...grpc.CallOption) (*StopTasksResponse, error) {
	out := new(StopTasksResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/StopTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RestartTasks(ctx context.Context, in *RestartTasksRequest, opts ...grpc.CallOption) (*RestartTasksResponse, error) {
	out := new(RestartTasksResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/RestartTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) QueryTasks(ctx context.Context, in *QueryTasksRequest, opts ...grpc.CallOption) (*QueryTasksResponse, error) {
	out := new(QueryTasksResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/QueryTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) BrowseSandbox(ctx context.Context, in *BrowseSandboxRequest, opts ...grpc.CallOption) (*BrowseSandboxResponse, error) {
	out := new(BrowseSandboxResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/BrowseSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RefreshTasks(ctx context.Context, in *RefreshTasksRequest, opts ...grpc.CallOption) (*RefreshTasksResponse, error) {
	out := new(RefreshTasksResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/RefreshTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskCache(ctx context.Context, in *GetTaskCacheRequest, opts ...grpc.CallOption) (*GetTaskCacheResponse, error) {
	out := new(GetTaskCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/GetTaskCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetPodEvents(ctx context.Context, in *GetPodEventsRequest, opts ...grpc.CallOption) (*GetPodEventsResponse, error) {
	out := new(GetPodEventsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.task.svc.TaskService/GetPodEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// Get the info of a task in job.
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// List a set of tasks in a job for a given range of instance IDs.
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// Start a set of tasks for a job. Will be no-op for tasks that
	// are currently running. The tasks are started asynchronously after
	// the API call returns.
	StartTasks(context.Context, *StartTasksRequest) (*StartTasksResponse, error)
	// Stop a set of tasks for a job. Will be no-op for tasks that
	// are currently stopped. The tasks are stopped asynchronously after
	// the API call returns.
	StopTasks(context.Context, *StopTasksRequest) (*StopTasksResponse, error)
	// Restart a set of tasks for a job. Will start tasks that are
	// currently stopped. This is an asynchronous call.
	RestartTasks(context.Context, *RestartTasksRequest) (*RestartTasksResponse, error)
	// Query task info in a job, using a set of filters.
	QueryTasks(context.Context, *QueryTasksRequest) (*QueryTasksResponse, error)
	// BrowseSandbox returns list of file paths inside sandbox. The
	// client can use the Mesos Agent HTTP endpoints to read and download
	// the files. http://mesos.apache.org/documentation/latest/endpoints/
	BrowseSandbox(context.Context, *BrowseSandboxRequest) (*BrowseSandboxResponse, error)
	// Debug only method. Allows user to load task runtime state from DB
	// and re-execute the action associated with current state.
	RefreshTasks(context.Context, *RefreshTasksRequest) (*RefreshTasksResponse, error)
	// Debug only method. Get the cache of a task stored in Peloton.
	GetTaskCache(context.Context, *GetTaskCacheRequest) (*GetTaskCacheResponse, error)
	// GetPodEvents returns pod events (state transition for a pod),
	// in reverse chronological order. pod is singular instance of a Peloton job.
	GetPodEvents(context.Context, *GetPodEventsRequest) (*GetPodEventsResponse, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_StartTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).StartTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/StartTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).StartTasks(ctx, req.(*StartTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_StopTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).StopTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/StopTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).StopTasks(ctx, req.(*StopTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RestartTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RestartTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/RestartTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RestartTasks(ctx, req.(*RestartTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_QueryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).QueryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/QueryTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).QueryTasks(ctx, req.(*QueryTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_BrowseSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).BrowseSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/BrowseSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).BrowseSandbox(ctx, req.(*BrowseSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RefreshTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RefreshTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/RefreshTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RefreshTasks(ctx, req.(*RefreshTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/GetTaskCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskCache(ctx, req.(*GetTaskCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetPodEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetPodEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.task.svc.TaskService/GetPodEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetPodEvents(ctx, req.(*GetPodEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.v0.task.svc.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskService_ListTasks_Handler,
		},
		{
			MethodName: "StartTasks",
			Handler:    _TaskService_StartTasks_Handler,
		},
		{
			MethodName: "StopTasks",
			Handler:    _TaskService_StopTasks_Handler,
		},
		{
			MethodName: "RestartTasks",
			Handler:    _TaskService_RestartTasks_Handler,
		},
		{
			MethodName: "QueryTasks",
			Handler:    _TaskService_QueryTasks_Handler,
		},
		{
			MethodName: "BrowseSandbox",
			Handler:    _TaskService_BrowseSandbox_Handler,
		},
		{
			MethodName: "RefreshTasks",
			Handler:    _TaskService_RefreshTasks_Handler,
		},
		{
			MethodName: "GetTaskCache",
			Handler:    _TaskService_GetTaskCache_Handler,
		},
		{
			MethodName: "GetPodEvents",
			Handler:    _TaskService_GetPodEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/api/v0/task/svc/task_svc.proto",
}
