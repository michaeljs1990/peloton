// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/task/task.proto

package task

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/uber/peloton/.gen/mesos/v1"
	errors "github.com/uber/peloton/.gen/peloton/api/v0/errors"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	query "github.com/uber/peloton/.gen/peloton/api/v0/query"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//  Runtime states of a task instance
type TaskState int32

const (
	// Reserved for future compatibility of new states.
	TaskState_UNKNOWN TaskState = 0
	// The task is being initialized
	TaskState_INITIALIZED TaskState = 1
	// The task is pending and waiting for resources
	TaskState_PENDING TaskState = 2
	// The task has been allocated with resources and ready for placement
	TaskState_READY TaskState = 3
	// The task is being placed to a host based on its resource
	// requirements and constraints
	TaskState_PLACING TaskState = 4
	// The task has been assigned to a host matching the resource
	// requirements and constraints
	TaskState_PLACED TaskState = 5
	// The task is taken from resmgr to be launched
	TaskState_LAUNCHING TaskState = 6
	// The task is being launched in Job manager
	// TODO: We need to correct the numbering
	TaskState_LAUNCHED TaskState = 15
	// The task is being started by Mesos agent
	TaskState_STARTING TaskState = 7
	// The task is running on a Mesos host
	TaskState_RUNNING TaskState = 8
	// The task terminated with an exit code of zero
	TaskState_SUCCEEDED TaskState = 9
	// The task terminated with a non-zero exit code
	TaskState_FAILED TaskState = 10
	// The task is lost
	TaskState_LOST TaskState = 11
	// The task is being preempted by another one on the node
	TaskState_PREEMPTING TaskState = 12
	// The task is being killed
	TaskState_KILLING TaskState = 13
	// Execution of the task was terminated by the system
	TaskState_KILLED TaskState = 14
	// The task is to be deleted after termination
	TaskState_DELETED TaskState = 16
	// Placement engine is reserving host for the task
	TaskState_RESERVED TaskState = 17
)

var TaskState_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "INITIALIZED",
	2:  "PENDING",
	3:  "READY",
	4:  "PLACING",
	5:  "PLACED",
	6:  "LAUNCHING",
	15: "LAUNCHED",
	7:  "STARTING",
	8:  "RUNNING",
	9:  "SUCCEEDED",
	10: "FAILED",
	11: "LOST",
	12: "PREEMPTING",
	13: "KILLING",
	14: "KILLED",
	16: "DELETED",
	17: "RESERVED",
}

var TaskState_value = map[string]int32{
	"UNKNOWN":     0,
	"INITIALIZED": 1,
	"PENDING":     2,
	"READY":       3,
	"PLACING":     4,
	"PLACED":      5,
	"LAUNCHING":   6,
	"LAUNCHED":    15,
	"STARTING":    7,
	"RUNNING":     8,
	"SUCCEEDED":   9,
	"FAILED":      10,
	"LOST":        11,
	"PREEMPTING":  12,
	"KILLING":     13,
	"KILLED":      14,
	"DELETED":     16,
	"RESERVED":    17,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}

func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{0}
}

//*
//  HealthState is the health check state of a task
type HealthState int32

const (
	// Default value.
	HealthState_INVALID HealthState = 0
	// If the health check config is not enabled in the task config,
	// the initial value of the health state is DISABLED.
	HealthState_DISABLED HealthState = 1
	// If the health check config is enabled in the task config,
	// the initial value of the health state is HEALTH_UNKNOWN.
	HealthState_HEALTH_UNKNOWN HealthState = 2
	// In a Mesos event, If the healthy field is true and
	// the reason field is REASON_TASK_HEALTH_CHECK_STATUS_UPDATED
	// the health state of the task is HEALTHY
	HealthState_HEALTHY HealthState = 3
	// In a Mesos event, If the healthy field is false and
	// the reason field is REASON_TASK_HEALTH_CHECK_STATUS_UPDATED
	// the health state of the task is UNHEALTHY
	HealthState_UNHEALTHY HealthState = 4
)

var HealthState_name = map[int32]string{
	0: "INVALID",
	1: "DISABLED",
	2: "HEALTH_UNKNOWN",
	3: "HEALTHY",
	4: "UNHEALTHY",
}

var HealthState_value = map[string]int32{
	"INVALID":        0,
	"DISABLED":       1,
	"HEALTH_UNKNOWN": 2,
	"HEALTHY":        3,
	"UNHEALTHY":      4,
}

func (x HealthState) String() string {
	return proto.EnumName(HealthState_name, int32(x))
}

func (HealthState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{1}
}

type HealthCheckConfig_Type int32

const (
	// Reserved for future compatibility of new types.
	HealthCheckConfig_UNKNOWN HealthCheckConfig_Type = 0
	// Command line based health check
	HealthCheckConfig_COMMAND HealthCheckConfig_Type = 1
	// HTTP endpoint based health check
	HealthCheckConfig_HTTP HealthCheckConfig_Type = 2
	// GRPC endpoint based health check
	HealthCheckConfig_GRPC HealthCheckConfig_Type = 3
)

var HealthCheckConfig_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "COMMAND",
	2: "HTTP",
	3: "GRPC",
}

var HealthCheckConfig_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"COMMAND": 1,
	"HTTP":    2,
	"GRPC":    3,
}

func (x HealthCheckConfig_Type) String() string {
	return proto.EnumName(HealthCheckConfig_Type_name, int32(x))
}

func (HealthCheckConfig_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{1, 0}
}

type Constraint_Type int32

const (
	// Reserved for compatibility.
	Constraint_UNKNOWN_CONSTRAINT Constraint_Type = 0
	Constraint_LABEL_CONSTRAINT   Constraint_Type = 1
	Constraint_AND_CONSTRAINT     Constraint_Type = 2
	Constraint_OR_CONSTRAINT      Constraint_Type = 3
)

var Constraint_Type_name = map[int32]string{
	0: "UNKNOWN_CONSTRAINT",
	1: "LABEL_CONSTRAINT",
	2: "AND_CONSTRAINT",
	3: "OR_CONSTRAINT",
}

var Constraint_Type_value = map[string]int32{
	"UNKNOWN_CONSTRAINT": 0,
	"LABEL_CONSTRAINT":   1,
	"AND_CONSTRAINT":     2,
	"OR_CONSTRAINT":      3,
}

func (x Constraint_Type) String() string {
	return proto.EnumName(Constraint_Type_name, int32(x))
}

func (Constraint_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{3, 0}
}

//*
// Condition represents a constraint on the number of occurrences of the label.
type LabelConstraint_Condition int32

const (
	// Reserved for compatibility.
	LabelConstraint_CONDITION_UNKNOWN      LabelConstraint_Condition = 0
	LabelConstraint_CONDITION_LESS_THAN    LabelConstraint_Condition = 1
	LabelConstraint_CONDITION_EQUAL        LabelConstraint_Condition = 2
	LabelConstraint_CONDITION_GREATER_THAN LabelConstraint_Condition = 3
)

var LabelConstraint_Condition_name = map[int32]string{
	0: "CONDITION_UNKNOWN",
	1: "CONDITION_LESS_THAN",
	2: "CONDITION_EQUAL",
	3: "CONDITION_GREATER_THAN",
}

var LabelConstraint_Condition_value = map[string]int32{
	"CONDITION_UNKNOWN":      0,
	"CONDITION_LESS_THAN":    1,
	"CONDITION_EQUAL":        2,
	"CONDITION_GREATER_THAN": 3,
}

func (x LabelConstraint_Condition) String() string {
	return proto.EnumName(LabelConstraint_Condition_name, int32(x))
}

func (LabelConstraint_Condition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{6, 0}
}

//*
// Kind represents whatever the constraint applies to the labels on the host
// or to the labels of the tasks that are located on the host.
type LabelConstraint_Kind int32

const (
	// Reserved for compatibility.
	LabelConstraint_UNKNOWN LabelConstraint_Kind = 0
	LabelConstraint_TASK    LabelConstraint_Kind = 1
	LabelConstraint_HOST    LabelConstraint_Kind = 2
)

var LabelConstraint_Kind_name = map[int32]string{
	0: "UNKNOWN",
	1: "TASK",
	2: "HOST",
}

var LabelConstraint_Kind_value = map[string]int32{
	"UNKNOWN": 0,
	"TASK":    1,
	"HOST":    2,
}

func (x LabelConstraint_Kind) String() string {
	return proto.EnumName(LabelConstraint_Kind_name, int32(x))
}

func (LabelConstraint_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{6, 1}
}

//*
// Type represents whether the instance is preemptible. If so, it might
// be scheduled using elastic resources from other resource pools and
// subject to preemption when the demands of other resource pools increase.
// If it is non-preemptible it will be scheduled using the reserved
// resources only.
// This can override the preemptible sla configuration at the job level.
type PreemptionPolicy_Type int32

const (
	PreemptionPolicy_TYPE_INVALID         PreemptionPolicy_Type = 0
	PreemptionPolicy_TYPE_PREEMPTIBLE     PreemptionPolicy_Type = 1
	PreemptionPolicy_TYPE_NON_PREEMPTIBLE PreemptionPolicy_Type = 2
)

var PreemptionPolicy_Type_name = map[int32]string{
	0: "TYPE_INVALID",
	1: "TYPE_PREEMPTIBLE",
	2: "TYPE_NON_PREEMPTIBLE",
}

var PreemptionPolicy_Type_value = map[string]int32{
	"TYPE_INVALID":         0,
	"TYPE_PREEMPTIBLE":     1,
	"TYPE_NON_PREEMPTIBLE": 2,
}

func (x PreemptionPolicy_Type) String() string {
	return proto.EnumName(PreemptionPolicy_Type_name, int32(x))
}

func (PreemptionPolicy_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{8, 0}
}

// Reason lists various causes for a task termination
type TerminationStatus_Reason int32

const (
	// Default value.
	TerminationStatus_TERMINATION_STATUS_REASON_INVALID TerminationStatus_Reason = 0
	// Task was killed because a stop request was received from a client.
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_ON_REQUEST TerminationStatus_Reason = 1
	// Task failed. See also TerminationStatus.exit_code,
	// TerminationStatus.signal and ContainerStatus.message.
	TerminationStatus_TERMINATION_STATUS_REASON_FAILED TerminationStatus_Reason = 2
	// Task was killed to put the host in to maintenance.
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_HOST_MAINTENANCE TerminationStatus_Reason = 3
	// Task was killed to reclaim resources allocated to it.
	TerminationStatus_TERMINATION_STATUS_REASON_PREEMPTED_RESOURCES TerminationStatus_Reason = 4
	// Task was killed due to deadline tracker exceeding task timeout
	TerminationStatus_TERMINATION_STATUS_REASON_DEADLINE_TIMEOUT_EXCEEDED TerminationStatus_Reason = 5
	// Task was killed for update
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_FOR_UPDATE TerminationStatus_Reason = 6
	// Task was killed for restart
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_FOR_RESTART TerminationStatus_Reason = 7
)

var TerminationStatus_Reason_name = map[int32]string{
	0: "TERMINATION_STATUS_REASON_INVALID",
	1: "TERMINATION_STATUS_REASON_KILLED_ON_REQUEST",
	2: "TERMINATION_STATUS_REASON_FAILED",
	3: "TERMINATION_STATUS_REASON_KILLED_HOST_MAINTENANCE",
	4: "TERMINATION_STATUS_REASON_PREEMPTED_RESOURCES",
	5: "TERMINATION_STATUS_REASON_DEADLINE_TIMEOUT_EXCEEDED",
	6: "TERMINATION_STATUS_REASON_KILLED_FOR_UPDATE",
	7: "TERMINATION_STATUS_REASON_KILLED_FOR_RESTART",
}

var TerminationStatus_Reason_value = map[string]int32{
	"TERMINATION_STATUS_REASON_INVALID":                   0,
	"TERMINATION_STATUS_REASON_KILLED_ON_REQUEST":         1,
	"TERMINATION_STATUS_REASON_FAILED":                    2,
	"TERMINATION_STATUS_REASON_KILLED_HOST_MAINTENANCE":   3,
	"TERMINATION_STATUS_REASON_PREEMPTED_RESOURCES":       4,
	"TERMINATION_STATUS_REASON_DEADLINE_TIMEOUT_EXCEEDED": 5,
	"TERMINATION_STATUS_REASON_KILLED_FOR_UPDATE":         6,
	"TERMINATION_STATUS_REASON_KILLED_FOR_RESTART":        7,
}

func (x TerminationStatus_Reason) String() string {
	return proto.EnumName(TerminationStatus_Reason_name, int32(x))
}

func (TerminationStatus_Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{11, 0}
}

// Describes the source of the task event
type TaskEvent_Source int32

const (
	TaskEvent_SOURCE_UNKNOWN TaskEvent_Source = 0
	TaskEvent_SOURCE_JOBMGR  TaskEvent_Source = 1
	TaskEvent_SOURCE_RESMGR  TaskEvent_Source = 2
	TaskEvent_SOURCE_HOSTMGR TaskEvent_Source = 3
)

var TaskEvent_Source_name = map[int32]string{
	0: "SOURCE_UNKNOWN",
	1: "SOURCE_JOBMGR",
	2: "SOURCE_RESMGR",
	3: "SOURCE_HOSTMGR",
}

var TaskEvent_Source_value = map[string]int32{
	"SOURCE_UNKNOWN": 0,
	"SOURCE_JOBMGR":  1,
	"SOURCE_RESMGR":  2,
	"SOURCE_HOSTMGR": 3,
}

func (x TaskEvent_Source) String() string {
	return proto.EnumName(TaskEvent_Source_name, int32(x))
}

func (TaskEvent_Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{16, 0}
}

//*
//  Resource configuration for a task.
type ResourceConfig struct {
	// CPU limit in number of CPU cores
	CpuLimit float64 `protobuf:"fixed64,1,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`
	// Memory limit in MB
	MemLimitMb float64 `protobuf:"fixed64,2,opt,name=memLimitMb,proto3" json:"memLimitMb,omitempty"`
	// Disk limit in MB
	DiskLimitMb float64 `protobuf:"fixed64,3,opt,name=diskLimitMb,proto3" json:"diskLimitMb,omitempty"`
	// File descriptor limit
	FdLimit uint32 `protobuf:"varint,4,opt,name=fdLimit,proto3" json:"fdLimit,omitempty"`
	// GPU limit in number of GPUs
	GpuLimit             float64  `protobuf:"fixed64,5,opt,name=gpuLimit,proto3" json:"gpuLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceConfig) Reset()         { *m = ResourceConfig{} }
func (m *ResourceConfig) String() string { return proto.CompactTextString(m) }
func (*ResourceConfig) ProtoMessage()    {}
func (*ResourceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{0}
}

func (m *ResourceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceConfig.Unmarshal(m, b)
}
func (m *ResourceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceConfig.Marshal(b, m, deterministic)
}
func (m *ResourceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceConfig.Merge(m, src)
}
func (m *ResourceConfig) XXX_Size() int {
	return xxx_messageInfo_ResourceConfig.Size(m)
}
func (m *ResourceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceConfig proto.InternalMessageInfo

func (m *ResourceConfig) GetCpuLimit() float64 {
	if m != nil {
		return m.CpuLimit
	}
	return 0
}

func (m *ResourceConfig) GetMemLimitMb() float64 {
	if m != nil {
		return m.MemLimitMb
	}
	return 0
}

func (m *ResourceConfig) GetDiskLimitMb() float64 {
	if m != nil {
		return m.DiskLimitMb
	}
	return 0
}

func (m *ResourceConfig) GetFdLimit() uint32 {
	if m != nil {
		return m.FdLimit
	}
	return 0
}

func (m *ResourceConfig) GetGpuLimit() float64 {
	if m != nil {
		return m.GpuLimit
	}
	return 0
}

//*
//  Health check configuration for a task
type HealthCheckConfig struct {
	// Whether the health check is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Start time wait in seconds.
	// Zero or empty value would use default value of 15 from Mesos.
	InitialIntervalSecs uint32 `protobuf:"varint,2,opt,name=initialIntervalSecs,proto3" json:"initialIntervalSecs,omitempty"`
	// Interval in seconds between two health checks.
	// Zero or empty value would use default value of 10 from Mesos.
	IntervalSecs uint32 `protobuf:"varint,3,opt,name=intervalSecs,proto3" json:"intervalSecs,omitempty"`
	// Max number of consecutive failures before failing health check.
	// Zero or empty value would use default value of 3 from Mesos.
	MaxConsecutiveFailures uint32 `protobuf:"varint,4,opt,name=maxConsecutiveFailures,proto3" json:"maxConsecutiveFailures,omitempty"`
	// Health check command timeout in seconds.
	// Zero or empty value would use default value of 20 from Mesos.
	TimeoutSecs uint32                 `protobuf:"varint,5,opt,name=timeoutSecs,proto3" json:"timeoutSecs,omitempty"`
	Type        HealthCheckConfig_Type `protobuf:"varint,6,opt,name=type,proto3,enum=peloton.api.v0.task.HealthCheckConfig_Type" json:"type,omitempty"`
	// Only applicable when type is `COMMAND`.
	CommandCheck *HealthCheckConfig_CommandCheck `protobuf:"bytes,7,opt,name=commandCheck,proto3" json:"commandCheck,omitempty"`
	// Only applicable when type is 'HTTP'.
	HttpCheck            *HealthCheckConfig_HTTPCheck `protobuf:"bytes,8,opt,name=httpCheck,proto3" json:"httpCheck,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *HealthCheckConfig) Reset()         { *m = HealthCheckConfig{} }
func (m *HealthCheckConfig) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig) ProtoMessage()    {}
func (*HealthCheckConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{1}
}

func (m *HealthCheckConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig.Unmarshal(m, b)
}
func (m *HealthCheckConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig.Merge(m, src)
}
func (m *HealthCheckConfig) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig.Size(m)
}
func (m *HealthCheckConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig proto.InternalMessageInfo

func (m *HealthCheckConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *HealthCheckConfig) GetInitialIntervalSecs() uint32 {
	if m != nil {
		return m.InitialIntervalSecs
	}
	return 0
}

func (m *HealthCheckConfig) GetIntervalSecs() uint32 {
	if m != nil {
		return m.IntervalSecs
	}
	return 0
}

func (m *HealthCheckConfig) GetMaxConsecutiveFailures() uint32 {
	if m != nil {
		return m.MaxConsecutiveFailures
	}
	return 0
}

func (m *HealthCheckConfig) GetTimeoutSecs() uint32 {
	if m != nil {
		return m.TimeoutSecs
	}
	return 0
}

func (m *HealthCheckConfig) GetType() HealthCheckConfig_Type {
	if m != nil {
		return m.Type
	}
	return HealthCheckConfig_UNKNOWN
}

func (m *HealthCheckConfig) GetCommandCheck() *HealthCheckConfig_CommandCheck {
	if m != nil {
		return m.CommandCheck
	}
	return nil
}

func (m *HealthCheckConfig) GetHttpCheck() *HealthCheckConfig_HTTPCheck {
	if m != nil {
		return m.HttpCheck
	}
	return nil
}

type HealthCheckConfig_CommandCheck struct {
	// Health check command to be executed.
	// Note that this command by default inherits all environment varibles from
	// the task it's monitoring, unless `unshare_environments` is set to true.
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// If set, this check will not share the environment variables of the task.
	UnshareEnvironments  bool     `protobuf:"varint,2,opt,name=unshareEnvironments,proto3" json:"unshareEnvironments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_CommandCheck) Reset()         { *m = HealthCheckConfig_CommandCheck{} }
func (m *HealthCheckConfig_CommandCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_CommandCheck) ProtoMessage()    {}
func (*HealthCheckConfig_CommandCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{1, 0}
}

func (m *HealthCheckConfig_CommandCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_CommandCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_CommandCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_CommandCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_CommandCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_CommandCheck.Merge(m, src)
}
func (m *HealthCheckConfig_CommandCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_CommandCheck.Size(m)
}
func (m *HealthCheckConfig_CommandCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_CommandCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_CommandCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_CommandCheck) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *HealthCheckConfig_CommandCheck) GetUnshareEnvironments() bool {
	if m != nil {
		return m.UnshareEnvironments
	}
	return false
}

type HealthCheckConfig_HTTPCheck struct {
	// Currently http and https are supported.
	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Port to send the HTTP GET.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The request path.
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckConfig_HTTPCheck) Reset()         { *m = HealthCheckConfig_HTTPCheck{} }
func (m *HealthCheckConfig_HTTPCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckConfig_HTTPCheck) ProtoMessage()    {}
func (*HealthCheckConfig_HTTPCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{1, 1}
}

func (m *HealthCheckConfig_HTTPCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckConfig_HTTPCheck.Unmarshal(m, b)
}
func (m *HealthCheckConfig_HTTPCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckConfig_HTTPCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckConfig_HTTPCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckConfig_HTTPCheck.Merge(m, src)
}
func (m *HealthCheckConfig_HTTPCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckConfig_HTTPCheck.Size(m)
}
func (m *HealthCheckConfig_HTTPCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckConfig_HTTPCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckConfig_HTTPCheck proto.InternalMessageInfo

func (m *HealthCheckConfig_HTTPCheck) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *HealthCheckConfig_HTTPCheck) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *HealthCheckConfig_HTTPCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

//*
//  Network port configuration for a task
type PortConfig struct {
	// Name of the network port, e.g. http, tchannel. Required field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Static port number if any. If unset, will be dynamically allocated
	// by the scheduler
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Environment variable name to be exported when running a task for this port.
	// Required field for dynamic port.
	EnvName              string   `protobuf:"bytes,3,opt,name=envName,proto3" json:"envName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortConfig) Reset()         { *m = PortConfig{} }
func (m *PortConfig) String() string { return proto.CompactTextString(m) }
func (*PortConfig) ProtoMessage()    {}
func (*PortConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{2}
}

func (m *PortConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortConfig.Unmarshal(m, b)
}
func (m *PortConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortConfig.Marshal(b, m, deterministic)
}
func (m *PortConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortConfig.Merge(m, src)
}
func (m *PortConfig) XXX_Size() int {
	return xxx_messageInfo_PortConfig.Size(m)
}
func (m *PortConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PortConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PortConfig proto.InternalMessageInfo

func (m *PortConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortConfig) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PortConfig) GetEnvName() string {
	if m != nil {
		return m.EnvName
	}
	return ""
}

//*
// Constraint represents a host label constraint or a related tasks label constraint.
// This is used to require that a host have certain label constraints or to require
// that the tasks already running on the host have certain label constraints.
type Constraint struct {
	Type                 Constraint_Type  `protobuf:"varint,1,opt,name=type,proto3,enum=peloton.api.v0.task.Constraint_Type" json:"type,omitempty"`
	LabelConstraint      *LabelConstraint `protobuf:"bytes,2,opt,name=labelConstraint,proto3" json:"labelConstraint,omitempty"`
	AndConstraint        *AndConstraint   `protobuf:"bytes,3,opt,name=andConstraint,proto3" json:"andConstraint,omitempty"`
	OrConstraint         *OrConstraint    `protobuf:"bytes,4,opt,name=orConstraint,proto3" json:"orConstraint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Constraint) Reset()         { *m = Constraint{} }
func (m *Constraint) String() string { return proto.CompactTextString(m) }
func (*Constraint) ProtoMessage()    {}
func (*Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{3}
}

func (m *Constraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Constraint.Unmarshal(m, b)
}
func (m *Constraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Constraint.Marshal(b, m, deterministic)
}
func (m *Constraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Constraint.Merge(m, src)
}
func (m *Constraint) XXX_Size() int {
	return xxx_messageInfo_Constraint.Size(m)
}
func (m *Constraint) XXX_DiscardUnknown() {
	xxx_messageInfo_Constraint.DiscardUnknown(m)
}

var xxx_messageInfo_Constraint proto.InternalMessageInfo

func (m *Constraint) GetType() Constraint_Type {
	if m != nil {
		return m.Type
	}
	return Constraint_UNKNOWN_CONSTRAINT
}

func (m *Constraint) GetLabelConstraint() *LabelConstraint {
	if m != nil {
		return m.LabelConstraint
	}
	return nil
}

func (m *Constraint) GetAndConstraint() *AndConstraint {
	if m != nil {
		return m.AndConstraint
	}
	return nil
}

func (m *Constraint) GetOrConstraint() *OrConstraint {
	if m != nil {
		return m.OrConstraint
	}
	return nil
}

//*
// AndConstraint represents a logical 'and' of constraints.
type AndConstraint struct {
	Constraints          []*Constraint `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AndConstraint) Reset()         { *m = AndConstraint{} }
func (m *AndConstraint) String() string { return proto.CompactTextString(m) }
func (*AndConstraint) ProtoMessage()    {}
func (*AndConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{4}
}

func (m *AndConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AndConstraint.Unmarshal(m, b)
}
func (m *AndConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AndConstraint.Marshal(b, m, deterministic)
}
func (m *AndConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AndConstraint.Merge(m, src)
}
func (m *AndConstraint) XXX_Size() int {
	return xxx_messageInfo_AndConstraint.Size(m)
}
func (m *AndConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_AndConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_AndConstraint proto.InternalMessageInfo

func (m *AndConstraint) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

//*
// OrConstraint represents a logical 'or' of constraints.
type OrConstraint struct {
	Constraints          []*Constraint `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrConstraint) Reset()         { *m = OrConstraint{} }
func (m *OrConstraint) String() string { return proto.CompactTextString(m) }
func (*OrConstraint) ProtoMessage()    {}
func (*OrConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{5}
}

func (m *OrConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrConstraint.Unmarshal(m, b)
}
func (m *OrConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrConstraint.Marshal(b, m, deterministic)
}
func (m *OrConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrConstraint.Merge(m, src)
}
func (m *OrConstraint) XXX_Size() int {
	return xxx_messageInfo_OrConstraint.Size(m)
}
func (m *OrConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_OrConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_OrConstraint proto.InternalMessageInfo

func (m *OrConstraint) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

//*
// LabelConstraint represents a constraint on the number of occurrences of a given
// label from the set of host labels or task labels present on the host.
type LabelConstraint struct {
	// Determines which labels the constraint should apply to.
	Kind LabelConstraint_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=peloton.api.v0.task.LabelConstraint_Kind" json:"kind,omitempty"`
	// Determines which constraint there should be on the number of occurrences of the label.
	Condition LabelConstraint_Condition `protobuf:"varint,2,opt,name=condition,proto3,enum=peloton.api.v0.task.LabelConstraint_Condition" json:"condition,omitempty"`
	// The label which this defines a constraint on:
	// For Kind == HOST, each attribute on Mesos agent is transformed to a label,
	// with `hostname` as a special label which is always inferred from agent
	// hostname and set.
	Label *peloton.Label `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// A limit on the number of occurrences of the label.
	Requirement          uint32   `protobuf:"varint,4,opt,name=requirement,proto3" json:"requirement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelConstraint) Reset()         { *m = LabelConstraint{} }
func (m *LabelConstraint) String() string { return proto.CompactTextString(m) }
func (*LabelConstraint) ProtoMessage()    {}
func (*LabelConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{6}
}

func (m *LabelConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelConstraint.Unmarshal(m, b)
}
func (m *LabelConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelConstraint.Marshal(b, m, deterministic)
}
func (m *LabelConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelConstraint.Merge(m, src)
}
func (m *LabelConstraint) XXX_Size() int {
	return xxx_messageInfo_LabelConstraint.Size(m)
}
func (m *LabelConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_LabelConstraint proto.InternalMessageInfo

func (m *LabelConstraint) GetKind() LabelConstraint_Kind {
	if m != nil {
		return m.Kind
	}
	return LabelConstraint_UNKNOWN
}

func (m *LabelConstraint) GetCondition() LabelConstraint_Condition {
	if m != nil {
		return m.Condition
	}
	return LabelConstraint_CONDITION_UNKNOWN
}

func (m *LabelConstraint) GetLabel() *peloton.Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *LabelConstraint) GetRequirement() uint32 {
	if m != nil {
		return m.Requirement
	}
	return 0
}

//*
//  Restart policy for a task.
type RestartPolicy struct {
	// Max number of task failures can occur before giving up scheduling retry, no
	// backoff for now. Default 0 means no retry on failures.
	MaxFailures          uint32   `protobuf:"varint,1,opt,name=maxFailures,proto3" json:"maxFailures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartPolicy) Reset()         { *m = RestartPolicy{} }
func (m *RestartPolicy) String() string { return proto.CompactTextString(m) }
func (*RestartPolicy) ProtoMessage()    {}
func (*RestartPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{7}
}

func (m *RestartPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartPolicy.Unmarshal(m, b)
}
func (m *RestartPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartPolicy.Marshal(b, m, deterministic)
}
func (m *RestartPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartPolicy.Merge(m, src)
}
func (m *RestartPolicy) XXX_Size() int {
	return xxx_messageInfo_RestartPolicy.Size(m)
}
func (m *RestartPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RestartPolicy proto.InternalMessageInfo

func (m *RestartPolicy) GetMaxFailures() uint32 {
	if m != nil {
		return m.MaxFailures
	}
	return 0
}

//*
// Preemption policy for a task
type PreemptionPolicy struct {
	Type PreemptionPolicy_Type `protobuf:"varint,1,opt,name=type,proto3,enum=peloton.api.v0.task.PreemptionPolicy_Type" json:"type,omitempty"`
	// This policy defines if the task should be restarted after it is
	// preempted. If set to true the task will not be rescheduled
	// after it is preempted. If set to false the task will be rescheduled.
	// Defaults to false
	// This only takes effect if the task is preemptible.
	KillOnPreempt        bool     `protobuf:"varint,2,opt,name=killOnPreempt,proto3" json:"killOnPreempt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreemptionPolicy) Reset()         { *m = PreemptionPolicy{} }
func (m *PreemptionPolicy) String() string { return proto.CompactTextString(m) }
func (*PreemptionPolicy) ProtoMessage()    {}
func (*PreemptionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{8}
}

func (m *PreemptionPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreemptionPolicy.Unmarshal(m, b)
}
func (m *PreemptionPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreemptionPolicy.Marshal(b, m, deterministic)
}
func (m *PreemptionPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptionPolicy.Merge(m, src)
}
func (m *PreemptionPolicy) XXX_Size() int {
	return xxx_messageInfo_PreemptionPolicy.Size(m)
}
func (m *PreemptionPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptionPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptionPolicy proto.InternalMessageInfo

func (m *PreemptionPolicy) GetType() PreemptionPolicy_Type {
	if m != nil {
		return m.Type
	}
	return PreemptionPolicy_TYPE_INVALID
}

func (m *PreemptionPolicy) GetKillOnPreempt() bool {
	if m != nil {
		return m.KillOnPreempt
	}
	return false
}

//*
//  Persistent volume configuration for a task.
type PersistentVolumeConfig struct {
	// Volume mount path inside container.
	ContainerPath string `protobuf:"bytes,1,opt,name=containerPath,proto3" json:"containerPath,omitempty"`
	// Volume size in MB.
	SizeMB               uint32   `protobuf:"varint,2,opt,name=sizeMB,proto3" json:"sizeMB,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersistentVolumeConfig) Reset()         { *m = PersistentVolumeConfig{} }
func (m *PersistentVolumeConfig) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeConfig) ProtoMessage()    {}
func (*PersistentVolumeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{9}
}

func (m *PersistentVolumeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistentVolumeConfig.Unmarshal(m, b)
}
func (m *PersistentVolumeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistentVolumeConfig.Marshal(b, m, deterministic)
}
func (m *PersistentVolumeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeConfig.Merge(m, src)
}
func (m *PersistentVolumeConfig) XXX_Size() int {
	return xxx_messageInfo_PersistentVolumeConfig.Size(m)
}
func (m *PersistentVolumeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeConfig proto.InternalMessageInfo

func (m *PersistentVolumeConfig) GetContainerPath() string {
	if m != nil {
		return m.ContainerPath
	}
	return ""
}

func (m *PersistentVolumeConfig) GetSizeMB() uint32 {
	if m != nil {
		return m.SizeMB
	}
	return 0
}

//*
//  Task configuration for a given job instance
//  Note that only add string/slice/ptr type into TaskConfig directly due to
//  the limitation of go reflection inside our task specific config logic.
type TaskConfig struct {
	// Name of the task
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of user-defined labels for the task
	Labels []*peloton.Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Resource config of the task
	Resource *ResourceConfig `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// Container config of the task.
	Container *v1.ContainerInfo `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	// Command line config of the task
	Command *v1.CommandInfo `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	// Custom executor config of the task.
	Executor *v1.ExecutorInfo `protobuf:"bytes,15,opt,name=executor,proto3" json:"executor,omitempty"`
	// Health check config of the task
	HealthCheck *HealthCheckConfig `protobuf:"bytes,6,opt,name=healthCheck,proto3" json:"healthCheck,omitempty"`
	// List of network ports to be allocated for the task
	Ports []*PortConfig `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty"`
	// Constraint on the attributes of the host or labels on tasks on the host
	// that this task should run on.
	// Use `AndConstraint`/`OrConstraint` to compose multiple constraints if
	// necessary.
	Constraint *Constraint `protobuf:"bytes,8,opt,name=constraint,proto3" json:"constraint,omitempty"`
	// Task restart policy on failures
	RestartPolicy *RestartPolicy `protobuf:"bytes,9,opt,name=restartPolicy,proto3" json:"restartPolicy,omitempty"`
	// Persistent volume config of the task.
	Volume *PersistentVolumeConfig `protobuf:"bytes,10,opt,name=volume,proto3" json:"volume,omitempty"`
	// Preemption policy of the task
	PreemptionPolicy *PreemptionPolicy `protobuf:"bytes,11,opt,name=preemptionPolicy,proto3" json:"preemptionPolicy,omitempty"`
	// Whether this is a controller task. A controller is a special batch task
	// which controls other tasks inside a job. E.g. spark driver tasks in a spark
	// job will be a controller task.
	Controller bool `protobuf:"varint,12,opt,name=controller,proto3" json:"controller,omitempty"`
	// This is used to set the amount of time between when the executor sends the
	// SIGTERM message to gracefully terminate a task and when it kills it by
	// sending SIGKILL. If you do not set the grace period duration the default is
	// 30 seconds.
	KillGracePeriodSeconds uint32 `protobuf:"varint,13,opt,name=killGracePeriodSeconds,proto3" json:"killGracePeriodSeconds,omitempty"`
	// Whether the instance is revocable. If so, it might
	// be scheduled using revocable resources and subject to preemption
	// when there is resource contention on the host.
	// This can override the revocable configuration at the job level.
	Revocable            bool     `protobuf:"varint,14,opt,name=revocable,proto3" json:"revocable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskConfig) Reset()         { *m = TaskConfig{} }
func (m *TaskConfig) String() string { return proto.CompactTextString(m) }
func (*TaskConfig) ProtoMessage()    {}
func (*TaskConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{10}
}

func (m *TaskConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskConfig.Unmarshal(m, b)
}
func (m *TaskConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskConfig.Marshal(b, m, deterministic)
}
func (m *TaskConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskConfig.Merge(m, src)
}
func (m *TaskConfig) XXX_Size() int {
	return xxx_messageInfo_TaskConfig.Size(m)
}
func (m *TaskConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TaskConfig proto.InternalMessageInfo

func (m *TaskConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskConfig) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *TaskConfig) GetResource() *ResourceConfig {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *TaskConfig) GetContainer() *v1.ContainerInfo {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *TaskConfig) GetCommand() *v1.CommandInfo {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *TaskConfig) GetExecutor() *v1.ExecutorInfo {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *TaskConfig) GetHealthCheck() *HealthCheckConfig {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *TaskConfig) GetPorts() []*PortConfig {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *TaskConfig) GetConstraint() *Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (m *TaskConfig) GetRestartPolicy() *RestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return nil
}

func (m *TaskConfig) GetVolume() *PersistentVolumeConfig {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *TaskConfig) GetPreemptionPolicy() *PreemptionPolicy {
	if m != nil {
		return m.PreemptionPolicy
	}
	return nil
}

func (m *TaskConfig) GetController() bool {
	if m != nil {
		return m.Controller
	}
	return false
}

func (m *TaskConfig) GetKillGracePeriodSeconds() uint32 {
	if m != nil {
		return m.KillGracePeriodSeconds
	}
	return 0
}

func (m *TaskConfig) GetRevocable() bool {
	if m != nil {
		return m.Revocable
	}
	return false
}

// TerminationStatus contains details about termination of a task. It mainly
// contains Peloton-specific reasons for termination.
type TerminationStatus struct {
	// Reason for termination.
	Reason TerminationStatus_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=peloton.api.v0.task.TerminationStatus_Reason" json:"reason,omitempty"`
	// If non-zero, exit status when the container terminated.
	ExitCode uint32 `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Name of signal received by the container when it terminated.
	Signal               string   `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TerminationStatus) Reset()         { *m = TerminationStatus{} }
func (m *TerminationStatus) String() string { return proto.CompactTextString(m) }
func (*TerminationStatus) ProtoMessage()    {}
func (*TerminationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{11}
}

func (m *TerminationStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TerminationStatus.Unmarshal(m, b)
}
func (m *TerminationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TerminationStatus.Marshal(b, m, deterministic)
}
func (m *TerminationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminationStatus.Merge(m, src)
}
func (m *TerminationStatus) XXX_Size() int {
	return xxx_messageInfo_TerminationStatus.Size(m)
}
func (m *TerminationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TerminationStatus proto.InternalMessageInfo

func (m *TerminationStatus) GetReason() TerminationStatus_Reason {
	if m != nil {
		return m.Reason
	}
	return TerminationStatus_TERMINATION_STATUS_REASON_INVALID
}

func (m *TerminationStatus) GetExitCode() uint32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *TerminationStatus) GetSignal() string {
	if m != nil {
		return m.Signal
	}
	return ""
}

//*
//  Runtime info of an task instance in a Job
type RuntimeInfo struct {
	// Runtime status of the task
	State TaskState `protobuf:"varint,1,opt,name=state,proto3,enum=peloton.api.v0.task.TaskState" json:"state,omitempty"`
	// The mesos task ID for this instance
	MesosTaskId *v1.TaskID `protobuf:"bytes,2,opt,name=mesosTaskId,proto3" json:"mesosTaskId,omitempty"`
	// The time when the instance starts to run. Will be unset if the
	// instance hasn't started running yet. The time is represented in
	// RFC3339 form with UTC timezone.
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// The time when the instance is completed. Will be unset if the
	// instance hasn't completed yet. The time is represented in
	// RFC3339 form with UTC timezone.
	CompletionTime string `protobuf:"bytes,4,opt,name=completionTime,proto3" json:"completionTime,omitempty"`
	// The name of the host where the instance is running
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// Dynamic ports reserved on the host while this instance is running
	Ports map[string]uint32 `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The desired state of the task which should be eventually reached
	// by the system.
	GoalState TaskState `protobuf:"varint,7,opt,name=goalState,proto3,enum=peloton.api.v0.task.TaskState" json:"goalState,omitempty"`
	// The message that explains the current state of a task such as why
	// the task is failed. Only track the latest one if the task has been
	// retried and failed multiple times.
	Message string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// The reason that explains the current state of a task. Only track
	// the latest one if the task has been retried and failed multiple times.
	// See Mesos TaskStatus.Reason for more details.
	Reason string `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	// The number of times the task has failed after retries.
	FailureCount uint32 `protobuf:"varint,10,opt,name=failureCount,proto3" json:"failureCount,omitempty"`
	// persistent volume id
	VolumeID *peloton.VolumeID `protobuf:"bytes,11,opt,name=volumeID,proto3" json:"volumeID,omitempty"`
	// The config version currently used by the runtime.
	ConfigVersion uint64 `protobuf:"varint,12,opt,name=configVersion,proto3" json:"configVersion,omitempty"`
	// The desired config version that should be used by the runtime.
	DesiredConfigVersion uint64 `protobuf:"varint,13,opt,name=desiredConfigVersion,proto3" json:"desiredConfigVersion,omitempty"`
	// the id of mesos agent on the host to be launched.
	AgentID *v1.AgentID `protobuf:"bytes,14,opt,name=agentID,proto3" json:"agentID,omitempty"`
	// Revision of the current task info.
	Revision *peloton.ChangeLog `protobuf:"bytes,15,opt,name=revision,proto3" json:"revision,omitempty"`
	// The mesos task id of the previous task run of the instance.
	PrevMesosTaskId *v1.TaskID `protobuf:"bytes,16,opt,name=prevMesosTaskId,proto3" json:"prevMesosTaskId,omitempty"`
	// The resource usage for this task. The map key is each resource kind
	// in string format and the map value is the number of unit-seconds
	// of that resource used by the job. Example: if a task that uses 1 CPU
	// and finishes in 10 seconds, this map will contain <"cpu":10>
	ResourceUsage map[string]float64 `protobuf:"bytes,17,rep,name=resourceUsage,proto3" json:"resourceUsage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// The result of the health check
	Healthy HealthState `protobuf:"varint,18,opt,name=healthy,proto3,enum=peloton.api.v0.task.HealthState" json:"healthy,omitempty"`
	// The desired mesos task ID for this instance
	DesiredMesosTaskId *v1.TaskID `protobuf:"bytes,19,opt,name=desiredMesosTaskId,proto3" json:"desiredMesosTaskId,omitempty"`
	// Termination status of the task. Set only if the task is in a non-successful
	// terminal state such as KILLED or FAILED.
	TerminationStatus *TerminationStatus `protobuf:"bytes,20,opt,name=terminationStatus,proto3" json:"terminationStatus,omitempty"`
	// The name of the host where the instance should be running on upon restart.
	// It is used for best effort in-place update/restart.
	DesiredHost          string   `protobuf:"bytes,21,opt,name=desiredHost,proto3" json:"desiredHost,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuntimeInfo) Reset()         { *m = RuntimeInfo{} }
func (m *RuntimeInfo) String() string { return proto.CompactTextString(m) }
func (*RuntimeInfo) ProtoMessage()    {}
func (*RuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{12}
}

func (m *RuntimeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuntimeInfo.Unmarshal(m, b)
}
func (m *RuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuntimeInfo.Marshal(b, m, deterministic)
}
func (m *RuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeInfo.Merge(m, src)
}
func (m *RuntimeInfo) XXX_Size() int {
	return xxx_messageInfo_RuntimeInfo.Size(m)
}
func (m *RuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeInfo proto.InternalMessageInfo

func (m *RuntimeInfo) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_UNKNOWN
}

func (m *RuntimeInfo) GetMesosTaskId() *v1.TaskID {
	if m != nil {
		return m.MesosTaskId
	}
	return nil
}

func (m *RuntimeInfo) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RuntimeInfo) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *RuntimeInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RuntimeInfo) GetPorts() map[string]uint32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *RuntimeInfo) GetGoalState() TaskState {
	if m != nil {
		return m.GoalState
	}
	return TaskState_UNKNOWN
}

func (m *RuntimeInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RuntimeInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RuntimeInfo) GetFailureCount() uint32 {
	if m != nil {
		return m.FailureCount
	}
	return 0
}

func (m *RuntimeInfo) GetVolumeID() *peloton.VolumeID {
	if m != nil {
		return m.VolumeID
	}
	return nil
}

func (m *RuntimeInfo) GetConfigVersion() uint64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *RuntimeInfo) GetDesiredConfigVersion() uint64 {
	if m != nil {
		return m.DesiredConfigVersion
	}
	return 0
}

func (m *RuntimeInfo) GetAgentID() *v1.AgentID {
	if m != nil {
		return m.AgentID
	}
	return nil
}

func (m *RuntimeInfo) GetRevision() *peloton.ChangeLog {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *RuntimeInfo) GetPrevMesosTaskId() *v1.TaskID {
	if m != nil {
		return m.PrevMesosTaskId
	}
	return nil
}

func (m *RuntimeInfo) GetResourceUsage() map[string]float64 {
	if m != nil {
		return m.ResourceUsage
	}
	return nil
}

func (m *RuntimeInfo) GetHealthy() HealthState {
	if m != nil {
		return m.Healthy
	}
	return HealthState_INVALID
}

func (m *RuntimeInfo) GetDesiredMesosTaskId() *v1.TaskID {
	if m != nil {
		return m.DesiredMesosTaskId
	}
	return nil
}

func (m *RuntimeInfo) GetTerminationStatus() *TerminationStatus {
	if m != nil {
		return m.TerminationStatus
	}
	return nil
}

func (m *RuntimeInfo) GetDesiredHost() string {
	if m != nil {
		return m.DesiredHost
	}
	return ""
}

//*
//  Info of a task instance in a Job
type TaskInfo struct {
	// The numerical ID assigned to this instance. Instance IDs must be
	// unique and contiguous within a job. The ID is in the range of
	// [0, N-1] for a job with instance count of N.
	InstanceId uint32 `protobuf:"varint,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// Job ID of the task
	JobId *peloton.JobID `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// Configuration of the task
	Config *TaskConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// Runtime info of the instance
	Runtime              *RuntimeInfo `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TaskInfo) Reset()         { *m = TaskInfo{} }
func (m *TaskInfo) String() string { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()    {}
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{13}
}

func (m *TaskInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskInfo.Unmarshal(m, b)
}
func (m *TaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskInfo.Marshal(b, m, deterministic)
}
func (m *TaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfo.Merge(m, src)
}
func (m *TaskInfo) XXX_Size() int {
	return xxx_messageInfo_TaskInfo.Size(m)
}
func (m *TaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfo proto.InternalMessageInfo

func (m *TaskInfo) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *TaskInfo) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *TaskInfo) GetConfig() *TaskConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *TaskInfo) GetRuntime() *RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

//*
//  Task InstanceID range [from, to)
type InstanceRange struct {
	From                 uint32   `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   uint32   `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceRange) Reset()         { *m = InstanceRange{} }
func (m *InstanceRange) String() string { return proto.CompactTextString(m) }
func (*InstanceRange) ProtoMessage()    {}
func (*InstanceRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{14}
}

func (m *InstanceRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceRange.Unmarshal(m, b)
}
func (m *InstanceRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceRange.Marshal(b, m, deterministic)
}
func (m *InstanceRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceRange.Merge(m, src)
}
func (m *InstanceRange) XXX_Size() int {
	return xxx_messageInfo_InstanceRange.Size(m)
}
func (m *InstanceRange) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceRange.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceRange proto.InternalMessageInfo

func (m *InstanceRange) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *InstanceRange) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

//*
//  QuerySpec specifies the list of query criteria for tasks. All
//  indexed fields should be part of this message. And all fields
//  in this message have to be indexed too.
type QuerySpec struct {
	// DEPRECATED: use QueryJobRequest.pagination instead.
	// The spec of how to do pagination for the query results.
	Pagination *query.PaginationSpec `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// List of task states to query the tasks. Will match all tasks if
	// the list is empty.
	TaskStates []TaskState `protobuf:"varint,2,rep,packed,name=taskStates,proto3,enum=peloton.api.v0.task.TaskState" json:"taskStates,omitempty"`
	// List of task names to query the tasks. Will match all names if
	// the list is empty.
	Names []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	// List of hosts to query the tasks. Will match all hosts if
	// the list is empty.
	Hosts                []string `protobuf:"bytes,4,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySpec) Reset()         { *m = QuerySpec{} }
func (m *QuerySpec) String() string { return proto.CompactTextString(m) }
func (*QuerySpec) ProtoMessage()    {}
func (*QuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{15}
}

func (m *QuerySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec.Unmarshal(m, b)
}
func (m *QuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec.Marshal(b, m, deterministic)
}
func (m *QuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec.Merge(m, src)
}
func (m *QuerySpec) XXX_Size() int {
	return xxx_messageInfo_QuerySpec.Size(m)
}
func (m *QuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec proto.InternalMessageInfo

func (m *QuerySpec) GetPagination() *query.PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QuerySpec) GetTaskStates() []TaskState {
	if m != nil {
		return m.TaskStates
	}
	return nil
}

func (m *QuerySpec) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *QuerySpec) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

//*
//  Task event of a Peloton task instance.
type TaskEvent struct {
	// The task ID of the task event.
	TaskId *peloton.TaskID `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// The task state of the task event.
	State TaskState `protobuf:"varint,2,opt,name=state,proto3,enum=peloton.api.v0.task.TaskState" json:"state,omitempty"`
	// Short human friendly message explaining state.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// The time when the event was created. The time is represented in
	// RFC3339 form with UTC timezone.
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The source that generated the task event.
	Source TaskEvent_Source `protobuf:"varint,5,opt,name=source,proto3,enum=peloton.api.v0.task.TaskEvent_Source" json:"source,omitempty"`
	// The host on which the task is running
	Hostname string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The short reason for the task event
	Reason string `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	// The agentID for the task
	AgentId string `protobuf:"bytes,8,opt,name=agentId,proto3" json:"agentId,omitempty"`
	// The previous mesos task ID of the task event.
	PrevTaskId *peloton.TaskID `protobuf:"bytes,9,opt,name=prevTaskId,proto3" json:"prevTaskId,omitempty"`
	// The health check result of the task
	Healthy HealthState `protobuf:"varint,10,opt,name=healthy,proto3,enum=peloton.api.v0.task.HealthState" json:"healthy,omitempty"`
	// The desired mesos task ID of the task event.
	DesiredTaskId        *peloton.TaskID `protobuf:"bytes,11,opt,name=desiredTaskId,proto3" json:"desiredTaskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TaskEvent) Reset()         { *m = TaskEvent{} }
func (m *TaskEvent) String() string { return proto.CompactTextString(m) }
func (*TaskEvent) ProtoMessage()    {}
func (*TaskEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{16}
}

func (m *TaskEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskEvent.Unmarshal(m, b)
}
func (m *TaskEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskEvent.Marshal(b, m, deterministic)
}
func (m *TaskEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEvent.Merge(m, src)
}
func (m *TaskEvent) XXX_Size() int {
	return xxx_messageInfo_TaskEvent.Size(m)
}
func (m *TaskEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEvent proto.InternalMessageInfo

func (m *TaskEvent) GetTaskId() *peloton.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskEvent) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_UNKNOWN
}

func (m *TaskEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TaskEvent) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *TaskEvent) GetSource() TaskEvent_Source {
	if m != nil {
		return m.Source
	}
	return TaskEvent_SOURCE_UNKNOWN
}

func (m *TaskEvent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *TaskEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *TaskEvent) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *TaskEvent) GetPrevTaskId() *peloton.TaskID {
	if m != nil {
		return m.PrevTaskId
	}
	return nil
}

func (m *TaskEvent) GetHealthy() HealthState {
	if m != nil {
		return m.Healthy
	}
	return HealthState_INVALID
}

func (m *TaskEvent) GetDesiredTaskId() *peloton.TaskID {
	if m != nil {
		return m.DesiredTaskId
	}
	return nil
}

//*
//  Pod event of a Peloton pod instance.
type PodEvent struct {
	// The task ID of the task event.
	TaskId *v1.TaskID `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// Actual state of an instance
	ActualState string `protobuf:"bytes,2,opt,name=actualState,proto3" json:"actualState,omitempty"`
	// Goal State of an instance
	GoalState string `protobuf:"bytes,3,opt,name=goalState,proto3" json:"goalState,omitempty"`
	// The time when the event was created. The time is represented in
	// RFC3339 form with UTC timezone.
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The config version currently used by the runtime.
	ConfigVersion uint64 `protobuf:"varint,5,opt,name=configVersion,proto3" json:"configVersion,omitempty"`
	// The desired config version that should be used by the runtime.
	DesiredConfigVersion uint64 `protobuf:"varint,6,opt,name=desiredConfigVersion,proto3" json:"desiredConfigVersion,omitempty"`
	// The agentID for the task
	AgentID string `protobuf:"bytes,7,opt,name=agentID,proto3" json:"agentID,omitempty"`
	// The host on which the task is running
	Hostname string `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Short human friendly message explaining state.
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// The short reason for the task event
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	// The previous task ID of the pod event.
	PrevTaskId *v1.TaskID `protobuf:"bytes,11,opt,name=prevTaskId,proto3" json:"prevTaskId,omitempty"`
	// The health check result of the task
	Healthy string `protobuf:"bytes,12,opt,name=healthy,proto3" json:"healthy,omitempty"`
	// The desired mesos task ID of the task event.
	DesriedTaskId        *v1.TaskID `protobuf:"bytes,13,opt,name=desriedTaskId,proto3" json:"desriedTaskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PodEvent) Reset()         { *m = PodEvent{} }
func (m *PodEvent) String() string { return proto.CompactTextString(m) }
func (*PodEvent) ProtoMessage()    {}
func (*PodEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{17}
}

func (m *PodEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodEvent.Unmarshal(m, b)
}
func (m *PodEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodEvent.Marshal(b, m, deterministic)
}
func (m *PodEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodEvent.Merge(m, src)
}
func (m *PodEvent) XXX_Size() int {
	return xxx_messageInfo_PodEvent.Size(m)
}
func (m *PodEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PodEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PodEvent proto.InternalMessageInfo

func (m *PodEvent) GetTaskId() *v1.TaskID {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *PodEvent) GetActualState() string {
	if m != nil {
		return m.ActualState
	}
	return ""
}

func (m *PodEvent) GetGoalState() string {
	if m != nil {
		return m.GoalState
	}
	return ""
}

func (m *PodEvent) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PodEvent) GetConfigVersion() uint64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *PodEvent) GetDesiredConfigVersion() uint64 {
	if m != nil {
		return m.DesiredConfigVersion
	}
	return 0
}

func (m *PodEvent) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *PodEvent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PodEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PodEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodEvent) GetPrevTaskId() *v1.TaskID {
	if m != nil {
		return m.PrevTaskId
	}
	return nil
}

func (m *PodEvent) GetHealthy() string {
	if m != nil {
		return m.Healthy
	}
	return ""
}

func (m *PodEvent) GetDesriedTaskId() *v1.TaskID {
	if m != nil {
		return m.DesriedTaskId
	}
	return nil
}

//*
//  Failures for browsing sandbox files requests to mesos call.
type BrowseSandboxFailure struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowseSandboxFailure) Reset()         { *m = BrowseSandboxFailure{} }
func (m *BrowseSandboxFailure) String() string { return proto.CompactTextString(m) }
func (*BrowseSandboxFailure) ProtoMessage()    {}
func (*BrowseSandboxFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{18}
}

func (m *BrowseSandboxFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowseSandboxFailure.Unmarshal(m, b)
}
func (m *BrowseSandboxFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowseSandboxFailure.Marshal(b, m, deterministic)
}
func (m *BrowseSandboxFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowseSandboxFailure.Merge(m, src)
}
func (m *BrowseSandboxFailure) XXX_Size() int {
	return xxx_messageInfo_BrowseSandboxFailure.Size(m)
}
func (m *BrowseSandboxFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowseSandboxFailure.DiscardUnknown(m)
}

var xxx_messageInfo_BrowseSandboxFailure proto.InternalMessageInfo

func (m *BrowseSandboxFailure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//*
//  Task not running error.
type TaskNotRunning struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskNotRunning) Reset()         { *m = TaskNotRunning{} }
func (m *TaskNotRunning) String() string { return proto.CompactTextString(m) }
func (*TaskNotRunning) ProtoMessage()    {}
func (*TaskNotRunning) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{19}
}

func (m *TaskNotRunning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskNotRunning.Unmarshal(m, b)
}
func (m *TaskNotRunning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskNotRunning.Marshal(b, m, deterministic)
}
func (m *TaskNotRunning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskNotRunning.Merge(m, src)
}
func (m *TaskNotRunning) XXX_Size() int {
	return xxx_messageInfo_TaskNotRunning.Size(m)
}
func (m *TaskNotRunning) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskNotRunning.DiscardUnknown(m)
}

var xxx_messageInfo_TaskNotRunning proto.InternalMessageInfo

func (m *TaskNotRunning) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by peloton.api.v0.task.svc.BrowseSandboxRequest.
type BrowseSandboxRequest struct {
	JobId      *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	InstanceId uint32         `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// Get the sandbox path of a particular task of an instance.
	// This should be set to the mesos task id in the runtime of
	// the task for which the sandbox is being requested.
	// If not provided, the path of the latest task is returned.
	TaskId               string   `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowseSandboxRequest) Reset()         { *m = BrowseSandboxRequest{} }
func (m *BrowseSandboxRequest) String() string { return proto.CompactTextString(m) }
func (*BrowseSandboxRequest) ProtoMessage()    {}
func (*BrowseSandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{20}
}

func (m *BrowseSandboxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowseSandboxRequest.Unmarshal(m, b)
}
func (m *BrowseSandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowseSandboxRequest.Marshal(b, m, deterministic)
}
func (m *BrowseSandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowseSandboxRequest.Merge(m, src)
}
func (m *BrowseSandboxRequest) XXX_Size() int {
	return xxx_messageInfo_BrowseSandboxRequest.Size(m)
}
func (m *BrowseSandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowseSandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrowseSandboxRequest proto.InternalMessageInfo

func (m *BrowseSandboxRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *BrowseSandboxRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *BrowseSandboxRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// DEPRECATED by peloton.api.v0.task.svc.BrowseSandboxResponse.
type BrowseSandboxResponse struct {
	Error    *BrowseSandboxResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Hostname string                       `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     string                       `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Paths    []string                     `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty"`
	// Mesos Master hostname and port.
	MesosMasterHostname  string   `protobuf:"bytes,5,opt,name=mesosMasterHostname,proto3" json:"mesosMasterHostname,omitempty"`
	MesosMasterPort      string   `protobuf:"bytes,6,opt,name=mesosMasterPort,proto3" json:"mesosMasterPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowseSandboxResponse) Reset()         { *m = BrowseSandboxResponse{} }
func (m *BrowseSandboxResponse) String() string { return proto.CompactTextString(m) }
func (*BrowseSandboxResponse) ProtoMessage()    {}
func (*BrowseSandboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{21}
}

func (m *BrowseSandboxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowseSandboxResponse.Unmarshal(m, b)
}
func (m *BrowseSandboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowseSandboxResponse.Marshal(b, m, deterministic)
}
func (m *BrowseSandboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowseSandboxResponse.Merge(m, src)
}
func (m *BrowseSandboxResponse) XXX_Size() int {
	return xxx_messageInfo_BrowseSandboxResponse.Size(m)
}
func (m *BrowseSandboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowseSandboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BrowseSandboxResponse proto.InternalMessageInfo

func (m *BrowseSandboxResponse) GetError() *BrowseSandboxResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BrowseSandboxResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *BrowseSandboxResponse) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *BrowseSandboxResponse) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *BrowseSandboxResponse) GetMesosMasterHostname() string {
	if m != nil {
		return m.MesosMasterHostname
	}
	return ""
}

func (m *BrowseSandboxResponse) GetMesosMasterPort() string {
	if m != nil {
		return m.MesosMasterPort
	}
	return ""
}

type BrowseSandboxResponse_Error struct {
	NotFound             *errors.JobNotFound   `protobuf:"bytes,1,opt,name=notFound,proto3" json:"notFound,omitempty"`
	OutOfRange           *InstanceIdOutOfRange `protobuf:"bytes,2,opt,name=outOfRange,proto3" json:"outOfRange,omitempty"`
	NotRunning           *TaskNotRunning       `protobuf:"bytes,3,opt,name=notRunning,proto3" json:"notRunning,omitempty"`
	Failure              *BrowseSandboxFailure `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BrowseSandboxResponse_Error) Reset()         { *m = BrowseSandboxResponse_Error{} }
func (m *BrowseSandboxResponse_Error) String() string { return proto.CompactTextString(m) }
func (*BrowseSandboxResponse_Error) ProtoMessage()    {}
func (*BrowseSandboxResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{21, 0}
}

func (m *BrowseSandboxResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowseSandboxResponse_Error.Unmarshal(m, b)
}
func (m *BrowseSandboxResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowseSandboxResponse_Error.Marshal(b, m, deterministic)
}
func (m *BrowseSandboxResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowseSandboxResponse_Error.Merge(m, src)
}
func (m *BrowseSandboxResponse_Error) XXX_Size() int {
	return xxx_messageInfo_BrowseSandboxResponse_Error.Size(m)
}
func (m *BrowseSandboxResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowseSandboxResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_BrowseSandboxResponse_Error proto.InternalMessageInfo

func (m *BrowseSandboxResponse_Error) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

func (m *BrowseSandboxResponse_Error) GetOutOfRange() *InstanceIdOutOfRange {
	if m != nil {
		return m.OutOfRange
	}
	return nil
}

func (m *BrowseSandboxResponse_Error) GetNotRunning() *TaskNotRunning {
	if m != nil {
		return m.NotRunning
	}
	return nil
}

func (m *BrowseSandboxResponse_Error) GetFailure() *BrowseSandboxFailure {
	if m != nil {
		return m.Failure
	}
	return nil
}

// DEPRECATED by google.rpc.OUT_OF_RANGE error.
type InstanceIdOutOfRange struct {
	// Entity ID of the job
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// Instance count of the job
	InstanceCount        uint32   `protobuf:"varint,2,opt,name=instanceCount,proto3" json:"instanceCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceIdOutOfRange) Reset()         { *m = InstanceIdOutOfRange{} }
func (m *InstanceIdOutOfRange) String() string { return proto.CompactTextString(m) }
func (*InstanceIdOutOfRange) ProtoMessage()    {}
func (*InstanceIdOutOfRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{22}
}

func (m *InstanceIdOutOfRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIdOutOfRange.Unmarshal(m, b)
}
func (m *InstanceIdOutOfRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIdOutOfRange.Marshal(b, m, deterministic)
}
func (m *InstanceIdOutOfRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIdOutOfRange.Merge(m, src)
}
func (m *InstanceIdOutOfRange) XXX_Size() int {
	return xxx_messageInfo_InstanceIdOutOfRange.Size(m)
}
func (m *InstanceIdOutOfRange) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIdOutOfRange.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIdOutOfRange proto.InternalMessageInfo

func (m *InstanceIdOutOfRange) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *InstanceIdOutOfRange) GetInstanceCount() uint32 {
	if m != nil {
		return m.InstanceCount
	}
	return 0
}

// DEPRECATED by peloton.api.v0.task.svc.GetTaskRequest.
type GetRequest struct {
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	InstanceId           uint32         `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{23}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

// DEPRECATED by peloton.api.v0.task.svc.GetTaskResponse.
type GetResponse struct {
	// DEPRECATED by repeated TaskInfo
	Result     *TaskInfo             `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	NotFound   *errors.JobNotFound   `protobuf:"bytes,2,opt,name=notFound,proto3" json:"notFound,omitempty"`
	OutOfRange *InstanceIdOutOfRange `protobuf:"bytes,3,opt,name=outOfRange,proto3" json:"outOfRange,omitempty"`
	// Returns all active and completed tasks of the given instance.
	Results              []*TaskInfo `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{24}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetResult() *TaskInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetResponse) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

func (m *GetResponse) GetOutOfRange() *InstanceIdOutOfRange {
	if m != nil {
		return m.OutOfRange
	}
	return nil
}

func (m *GetResponse) GetResults() []*TaskInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

//*
//  Request message for TaskService.GetPodEvents method.
type GetPodEventsRequest struct {
	// The job ID of the task
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID of the task
	InstanceId uint32 `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// Defines the number of unique run ids for which the pod events will be
	// returned.
	// If a specific run id is requested, using runId, then this defaults to 1.
	// Defaults to 10 otherwise.
	Limit uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Unique identifier to fetch pod events of an instance for a particular run.
	// This is an optional parameter, if unset limit number of run ids worth of
	// pod events will be returned.
	RunId                string   `protobuf:"bytes,4,opt,name=runId,proto3" json:"runId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPodEventsRequest) Reset()         { *m = GetPodEventsRequest{} }
func (m *GetPodEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsRequest) ProtoMessage()    {}
func (*GetPodEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{25}
}

func (m *GetPodEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsRequest.Unmarshal(m, b)
}
func (m *GetPodEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsRequest.Marshal(b, m, deterministic)
}
func (m *GetPodEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsRequest.Merge(m, src)
}
func (m *GetPodEventsRequest) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsRequest.Size(m)
}
func (m *GetPodEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsRequest proto.InternalMessageInfo

func (m *GetPodEventsRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetPodEventsRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *GetPodEventsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetPodEventsRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

//*
//  Response message for TaskService.GetPodEvents method.
//
//  Return errors:
//    INTERNAL:      if failed to get task events for internal errors.
type GetPodEventsResponse struct {
	Result               []*PodEvent                 `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error                *GetPodEventsResponse_Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetPodEventsResponse) Reset()         { *m = GetPodEventsResponse{} }
func (m *GetPodEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsResponse) ProtoMessage()    {}
func (*GetPodEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{26}
}

func (m *GetPodEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsResponse.Unmarshal(m, b)
}
func (m *GetPodEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsResponse.Marshal(b, m, deterministic)
}
func (m *GetPodEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsResponse.Merge(m, src)
}
func (m *GetPodEventsResponse) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsResponse.Size(m)
}
func (m *GetPodEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsResponse proto.InternalMessageInfo

func (m *GetPodEventsResponse) GetResult() []*PodEvent {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetPodEventsResponse) GetError() *GetPodEventsResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetPodEventsResponse_Error struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPodEventsResponse_Error) Reset()         { *m = GetPodEventsResponse_Error{} }
func (m *GetPodEventsResponse_Error) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsResponse_Error) ProtoMessage()    {}
func (*GetPodEventsResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{26, 0}
}

func (m *GetPodEventsResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsResponse_Error.Unmarshal(m, b)
}
func (m *GetPodEventsResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsResponse_Error.Marshal(b, m, deterministic)
}
func (m *GetPodEventsResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsResponse_Error.Merge(m, src)
}
func (m *GetPodEventsResponse_Error) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsResponse_Error.Size(m)
}
func (m *GetPodEventsResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsResponse_Error proto.InternalMessageInfo

func (m *GetPodEventsResponse_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//*
//  Request message for TaskService.DeletePodEvents method.
type DeletePodEventsRequest struct {
	// The job ID of the task
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID of the task
	InstanceId uint32 `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// deletes the run less than equal to runId.
	RunId                uint64   `protobuf:"varint,3,opt,name=runId,proto3" json:"runId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePodEventsRequest) Reset()         { *m = DeletePodEventsRequest{} }
func (m *DeletePodEventsRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePodEventsRequest) ProtoMessage()    {}
func (*DeletePodEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{27}
}

func (m *DeletePodEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePodEventsRequest.Unmarshal(m, b)
}
func (m *DeletePodEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePodEventsRequest.Marshal(b, m, deterministic)
}
func (m *DeletePodEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePodEventsRequest.Merge(m, src)
}
func (m *DeletePodEventsRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePodEventsRequest.Size(m)
}
func (m *DeletePodEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePodEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePodEventsRequest proto.InternalMessageInfo

func (m *DeletePodEventsRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *DeletePodEventsRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *DeletePodEventsRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

//*
//  Response message for TaskService.DeletePodEvents method.
//
//  Return errors:
//    INTERNAL:      if failed to delete task events for internal errors.
type DeletePodEventsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePodEventsResponse) Reset()         { *m = DeletePodEventsResponse{} }
func (m *DeletePodEventsResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePodEventsResponse) ProtoMessage()    {}
func (*DeletePodEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{28}
}

func (m *DeletePodEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePodEventsResponse.Unmarshal(m, b)
}
func (m *DeletePodEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePodEventsResponse.Marshal(b, m, deterministic)
}
func (m *DeletePodEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePodEventsResponse.Merge(m, src)
}
func (m *DeletePodEventsResponse) XXX_Size() int {
	return xxx_messageInfo_DeletePodEventsResponse.Size(m)
}
func (m *DeletePodEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePodEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePodEventsResponse proto.InternalMessageInfo

// DEPRECATED by google.rpc.INTERNAL error.
type TaskEventsError struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskEventsError) Reset()         { *m = TaskEventsError{} }
func (m *TaskEventsError) String() string { return proto.CompactTextString(m) }
func (*TaskEventsError) ProtoMessage()    {}
func (*TaskEventsError) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{29}
}

func (m *TaskEventsError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskEventsError.Unmarshal(m, b)
}
func (m *TaskEventsError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskEventsError.Marshal(b, m, deterministic)
}
func (m *TaskEventsError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskEventsError.Merge(m, src)
}
func (m *TaskEventsError) XXX_Size() int {
	return xxx_messageInfo_TaskEventsError.Size(m)
}
func (m *TaskEventsError) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskEventsError.DiscardUnknown(m)
}

var xxx_messageInfo_TaskEventsError proto.InternalMessageInfo

func (m *TaskEventsError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by peloton.api.v0.task.svc.ListTasksRequest.
type ListRequest struct {
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Range                *InstanceRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{30}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *ListRequest) GetRange() *InstanceRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.ListTasksResponse.
type ListResponse struct {
	Result               *ListResponse_Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	NotFound             *errors.JobNotFound  `protobuf:"bytes,2,opt,name=notFound,proto3" json:"notFound,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{31}
}

func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse.Unmarshal(m, b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return xxx_messageInfo_ListResponse.Size(m)
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetResult() *ListResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ListResponse) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

type ListResponse_Result struct {
	Value                map[uint32]*TaskInfo `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListResponse_Result) Reset()         { *m = ListResponse_Result{} }
func (m *ListResponse_Result) String() string { return proto.CompactTextString(m) }
func (*ListResponse_Result) ProtoMessage()    {}
func (*ListResponse_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{31, 0}
}

func (m *ListResponse_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse_Result.Unmarshal(m, b)
}
func (m *ListResponse_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse_Result.Marshal(b, m, deterministic)
}
func (m *ListResponse_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse_Result.Merge(m, src)
}
func (m *ListResponse_Result) XXX_Size() int {
	return xxx_messageInfo_ListResponse_Result.Size(m)
}
func (m *ListResponse_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse_Result.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse_Result proto.InternalMessageInfo

func (m *ListResponse_Result) GetValue() map[uint32]*TaskInfo {
	if m != nil {
		return m.Value
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.StartTasksRequest.
type StartRequest struct {
	JobId                *peloton.JobID   `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Ranges               []*InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StartRequest) Reset()         { *m = StartRequest{} }
func (m *StartRequest) String() string { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()    {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{32}
}

func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRequest.Unmarshal(m, b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return xxx_messageInfo_StartRequest.Size(m)
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

func (m *StartRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *StartRequest) GetRanges() []*InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.StartTasksResponse.
type StartResponse struct {
	Error                *StartResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StartedInstanceIds   []uint32             `protobuf:"varint,2,rep,packed,name=startedInstanceIds,proto3" json:"startedInstanceIds,omitempty"`
	InvalidInstanceIds   []uint32             `protobuf:"varint,3,rep,packed,name=invalidInstanceIds,proto3" json:"invalidInstanceIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{33}
}

func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse.Unmarshal(m, b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return xxx_messageInfo_StartResponse.Size(m)
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

func (m *StartResponse) GetError() *StartResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StartResponse) GetStartedInstanceIds() []uint32 {
	if m != nil {
		return m.StartedInstanceIds
	}
	return nil
}

func (m *StartResponse) GetInvalidInstanceIds() []uint32 {
	if m != nil {
		return m.InvalidInstanceIds
	}
	return nil
}

type StartResponse_Error struct {
	NotFound             *errors.JobNotFound   `protobuf:"bytes,1,opt,name=notFound,proto3" json:"notFound,omitempty"`
	OutOfRange           *InstanceIdOutOfRange `protobuf:"bytes,2,opt,name=outOfRange,proto3" json:"outOfRange,omitempty"`
	Failure              *TaskStartFailure     `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StartResponse_Error) Reset()         { *m = StartResponse_Error{} }
func (m *StartResponse_Error) String() string { return proto.CompactTextString(m) }
func (*StartResponse_Error) ProtoMessage()    {}
func (*StartResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{33, 0}
}

func (m *StartResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse_Error.Unmarshal(m, b)
}
func (m *StartResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse_Error.Marshal(b, m, deterministic)
}
func (m *StartResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse_Error.Merge(m, src)
}
func (m *StartResponse_Error) XXX_Size() int {
	return xxx_messageInfo_StartResponse_Error.Size(m)
}
func (m *StartResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse_Error proto.InternalMessageInfo

func (m *StartResponse_Error) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

func (m *StartResponse_Error) GetOutOfRange() *InstanceIdOutOfRange {
	if m != nil {
		return m.OutOfRange
	}
	return nil
}

func (m *StartResponse_Error) GetFailure() *TaskStartFailure {
	if m != nil {
		return m.Failure
	}
	return nil
}

//*
// Error when TaskStart failed.
type TaskStartFailure struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskStartFailure) Reset()         { *m = TaskStartFailure{} }
func (m *TaskStartFailure) String() string { return proto.CompactTextString(m) }
func (*TaskStartFailure) ProtoMessage()    {}
func (*TaskStartFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{34}
}

func (m *TaskStartFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskStartFailure.Unmarshal(m, b)
}
func (m *TaskStartFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskStartFailure.Marshal(b, m, deterministic)
}
func (m *TaskStartFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStartFailure.Merge(m, src)
}
func (m *TaskStartFailure) XXX_Size() int {
	return xxx_messageInfo_TaskStartFailure.Size(m)
}
func (m *TaskStartFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStartFailure.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStartFailure proto.InternalMessageInfo

func (m *TaskStartFailure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by peloton.api.v0.task.svc.StopTasksRequest.
// If no ranges specified, then stop all the tasks in the job.
type StopRequest struct {
	JobId                *peloton.JobID   `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Ranges               []*InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StopRequest) Reset()         { *m = StopRequest{} }
func (m *StopRequest) String() string { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()    {}
func (*StopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{35}
}

func (m *StopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRequest.Unmarshal(m, b)
}
func (m *StopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRequest.Marshal(b, m, deterministic)
}
func (m *StopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRequest.Merge(m, src)
}
func (m *StopRequest) XXX_Size() int {
	return xxx_messageInfo_StopRequest.Size(m)
}
func (m *StopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRequest proto.InternalMessageInfo

func (m *StopRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *StopRequest) GetRanges() []*InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

// DEPRECATED by google.rpc.INTERNAL error.
type TaskUpdateError struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskUpdateError) Reset()         { *m = TaskUpdateError{} }
func (m *TaskUpdateError) String() string { return proto.CompactTextString(m) }
func (*TaskUpdateError) ProtoMessage()    {}
func (*TaskUpdateError) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{36}
}

func (m *TaskUpdateError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskUpdateError.Unmarshal(m, b)
}
func (m *TaskUpdateError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskUpdateError.Marshal(b, m, deterministic)
}
func (m *TaskUpdateError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdateError.Merge(m, src)
}
func (m *TaskUpdateError) XXX_Size() int {
	return xxx_messageInfo_TaskUpdateError.Size(m)
}
func (m *TaskUpdateError) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdateError.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdateError proto.InternalMessageInfo

func (m *TaskUpdateError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by peloton.api.v0.task.svc.StopTasksResponse.
type StopResponse struct {
	Error                *StopResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StoppedInstanceIds   []uint32            `protobuf:"varint,2,rep,packed,name=stoppedInstanceIds,proto3" json:"stoppedInstanceIds,omitempty"`
	InvalidInstanceIds   []uint32            `protobuf:"varint,3,rep,packed,name=invalidInstanceIds,proto3" json:"invalidInstanceIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StopResponse) Reset()         { *m = StopResponse{} }
func (m *StopResponse) String() string { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()    {}
func (*StopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{37}
}

func (m *StopResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopResponse.Unmarshal(m, b)
}
func (m *StopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopResponse.Marshal(b, m, deterministic)
}
func (m *StopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopResponse.Merge(m, src)
}
func (m *StopResponse) XXX_Size() int {
	return xxx_messageInfo_StopResponse.Size(m)
}
func (m *StopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopResponse proto.InternalMessageInfo

func (m *StopResponse) GetError() *StopResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StopResponse) GetStoppedInstanceIds() []uint32 {
	if m != nil {
		return m.StoppedInstanceIds
	}
	return nil
}

func (m *StopResponse) GetInvalidInstanceIds() []uint32 {
	if m != nil {
		return m.InvalidInstanceIds
	}
	return nil
}

type StopResponse_Error struct {
	NotFound             *errors.JobNotFound   `protobuf:"bytes,1,opt,name=notFound,proto3" json:"notFound,omitempty"`
	OutOfRange           *InstanceIdOutOfRange `protobuf:"bytes,2,opt,name=outOfRange,proto3" json:"outOfRange,omitempty"`
	UpdateError          *TaskUpdateError      `protobuf:"bytes,3,opt,name=updateError,proto3" json:"updateError,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StopResponse_Error) Reset()         { *m = StopResponse_Error{} }
func (m *StopResponse_Error) String() string { return proto.CompactTextString(m) }
func (*StopResponse_Error) ProtoMessage()    {}
func (*StopResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{37, 0}
}

func (m *StopResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopResponse_Error.Unmarshal(m, b)
}
func (m *StopResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopResponse_Error.Marshal(b, m, deterministic)
}
func (m *StopResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopResponse_Error.Merge(m, src)
}
func (m *StopResponse_Error) XXX_Size() int {
	return xxx_messageInfo_StopResponse_Error.Size(m)
}
func (m *StopResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_StopResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_StopResponse_Error proto.InternalMessageInfo

func (m *StopResponse_Error) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

func (m *StopResponse_Error) GetOutOfRange() *InstanceIdOutOfRange {
	if m != nil {
		return m.OutOfRange
	}
	return nil
}

func (m *StopResponse_Error) GetUpdateError() *TaskUpdateError {
	if m != nil {
		return m.UpdateError
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.RestartTasksRequest.
type RestartRequest struct {
	JobId                *peloton.JobID   `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Ranges               []*InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RestartRequest) Reset()         { *m = RestartRequest{} }
func (m *RestartRequest) String() string { return proto.CompactTextString(m) }
func (*RestartRequest) ProtoMessage()    {}
func (*RestartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{38}
}

func (m *RestartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartRequest.Unmarshal(m, b)
}
func (m *RestartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartRequest.Marshal(b, m, deterministic)
}
func (m *RestartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartRequest.Merge(m, src)
}
func (m *RestartRequest) XXX_Size() int {
	return xxx_messageInfo_RestartRequest.Size(m)
}
func (m *RestartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartRequest proto.InternalMessageInfo

func (m *RestartRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *RestartRequest) GetRanges() []*InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.RestartTasksResponse.
type RestartResponse struct {
	NotFound             *errors.JobNotFound   `protobuf:"bytes,1,opt,name=notFound,proto3" json:"notFound,omitempty"`
	OutOfRange           *InstanceIdOutOfRange `protobuf:"bytes,2,opt,name=outOfRange,proto3" json:"outOfRange,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RestartResponse) Reset()         { *m = RestartResponse{} }
func (m *RestartResponse) String() string { return proto.CompactTextString(m) }
func (*RestartResponse) ProtoMessage()    {}
func (*RestartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{39}
}

func (m *RestartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartResponse.Unmarshal(m, b)
}
func (m *RestartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartResponse.Marshal(b, m, deterministic)
}
func (m *RestartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartResponse.Merge(m, src)
}
func (m *RestartResponse) XXX_Size() int {
	return xxx_messageInfo_RestartResponse.Size(m)
}
func (m *RestartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestartResponse proto.InternalMessageInfo

func (m *RestartResponse) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

func (m *RestartResponse) GetOutOfRange() *InstanceIdOutOfRange {
	if m != nil {
		return m.OutOfRange
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.QueryTasksRequest.
type QueryRequest struct {
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Spec                 *QuerySpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{40}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *QueryRequest) GetSpec() *QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.QueryTasksResponse.
type QueryResponse struct {
	Error                *QueryResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Records              []*TaskInfo          `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	Pagination           *query.Pagination    `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{41}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetError() *QueryResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryResponse) GetRecords() []*TaskInfo {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryResponse) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryResponse_Error struct {
	NotFound             *errors.JobNotFound `protobuf:"bytes,1,opt,name=notFound,proto3" json:"notFound,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *QueryResponse_Error) Reset()         { *m = QueryResponse_Error{} }
func (m *QueryResponse_Error) String() string { return proto.CompactTextString(m) }
func (*QueryResponse_Error) ProtoMessage()    {}
func (*QueryResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{41, 0}
}

func (m *QueryResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse_Error.Unmarshal(m, b)
}
func (m *QueryResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse_Error.Marshal(b, m, deterministic)
}
func (m *QueryResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse_Error.Merge(m, src)
}
func (m *QueryResponse_Error) XXX_Size() int {
	return xxx_messageInfo_QueryResponse_Error.Size(m)
}
func (m *QueryResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse_Error proto.InternalMessageInfo

func (m *QueryResponse_Error) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.RefreshTasksRequest.
type RefreshRequest struct {
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Range                *InstanceRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RefreshRequest) Reset()         { *m = RefreshRequest{} }
func (m *RefreshRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshRequest) ProtoMessage()    {}
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{42}
}

func (m *RefreshRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshRequest.Unmarshal(m, b)
}
func (m *RefreshRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshRequest.Marshal(b, m, deterministic)
}
func (m *RefreshRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshRequest.Merge(m, src)
}
func (m *RefreshRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshRequest.Size(m)
}
func (m *RefreshRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshRequest proto.InternalMessageInfo

func (m *RefreshRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *RefreshRequest) GetRange() *InstanceRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// DEPRECATED by peloton.api.v0.task.svc.RefreshTasksResponse.
type RefreshResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshResponse) Reset()         { *m = RefreshResponse{} }
func (m *RefreshResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshResponse) ProtoMessage()    {}
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{43}
}

func (m *RefreshResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshResponse.Unmarshal(m, b)
}
func (m *RefreshResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshResponse.Marshal(b, m, deterministic)
}
func (m *RefreshResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshResponse.Merge(m, src)
}
func (m *RefreshResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshResponse.Size(m)
}
func (m *RefreshResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshResponse proto.InternalMessageInfo

// DEPRECATED by peloton.api.task.svc.GetTaskCacheRequest.
type GetCacheRequest struct {
	// The job ID to look up the task.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The instance ID of the task to get.
	InstanceId           uint32   `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCacheRequest) Reset()         { *m = GetCacheRequest{} }
func (m *GetCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetCacheRequest) ProtoMessage()    {}
func (*GetCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{44}
}

func (m *GetCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCacheRequest.Unmarshal(m, b)
}
func (m *GetCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheRequest.Merge(m, src)
}
func (m *GetCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetCacheRequest.Size(m)
}
func (m *GetCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheRequest proto.InternalMessageInfo

func (m *GetCacheRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetCacheRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

// DEPRECATED by peloton.api.task.svc.GetTaskCacheResponse.
type GetCacheResponse struct {
	// The task runtime of the task.
	Runtime *RuntimeInfo `protobuf:"bytes,1,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// The labels of the task.
	Labels               []*peloton.Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetCacheResponse) Reset()         { *m = GetCacheResponse{} }
func (m *GetCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetCacheResponse) ProtoMessage()    {}
func (*GetCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6be790197c0e95, []int{45}
}

func (m *GetCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCacheResponse.Unmarshal(m, b)
}
func (m *GetCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheResponse.Merge(m, src)
}
func (m *GetCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetCacheResponse.Size(m)
}
func (m *GetCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheResponse proto.InternalMessageInfo

func (m *GetCacheResponse) GetRuntime() *RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *GetCacheResponse) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterEnum("peloton.api.v0.task.TaskState", TaskState_name, TaskState_value)
	proto.RegisterEnum("peloton.api.v0.task.HealthState", HealthState_name, HealthState_value)
	proto.RegisterEnum("peloton.api.v0.task.HealthCheckConfig_Type", HealthCheckConfig_Type_name, HealthCheckConfig_Type_value)
	proto.RegisterEnum("peloton.api.v0.task.Constraint_Type", Constraint_Type_name, Constraint_Type_value)
	proto.RegisterEnum("peloton.api.v0.task.LabelConstraint_Condition", LabelConstraint_Condition_name, LabelConstraint_Condition_value)
	proto.RegisterEnum("peloton.api.v0.task.LabelConstraint_Kind", LabelConstraint_Kind_name, LabelConstraint_Kind_value)
	proto.RegisterEnum("peloton.api.v0.task.PreemptionPolicy_Type", PreemptionPolicy_Type_name, PreemptionPolicy_Type_value)
	proto.RegisterEnum("peloton.api.v0.task.TerminationStatus_Reason", TerminationStatus_Reason_name, TerminationStatus_Reason_value)
	proto.RegisterEnum("peloton.api.v0.task.TaskEvent_Source", TaskEvent_Source_name, TaskEvent_Source_value)
	proto.RegisterType((*ResourceConfig)(nil), "peloton.api.v0.task.ResourceConfig")
	proto.RegisterType((*HealthCheckConfig)(nil), "peloton.api.v0.task.HealthCheckConfig")
	proto.RegisterType((*HealthCheckConfig_CommandCheck)(nil), "peloton.api.v0.task.HealthCheckConfig.CommandCheck")
	proto.RegisterType((*HealthCheckConfig_HTTPCheck)(nil), "peloton.api.v0.task.HealthCheckConfig.HTTPCheck")
	proto.RegisterType((*PortConfig)(nil), "peloton.api.v0.task.PortConfig")
	proto.RegisterType((*Constraint)(nil), "peloton.api.v0.task.Constraint")
	proto.RegisterType((*AndConstraint)(nil), "peloton.api.v0.task.AndConstraint")
	proto.RegisterType((*OrConstraint)(nil), "peloton.api.v0.task.OrConstraint")
	proto.RegisterType((*LabelConstraint)(nil), "peloton.api.v0.task.LabelConstraint")
	proto.RegisterType((*RestartPolicy)(nil), "peloton.api.v0.task.RestartPolicy")
	proto.RegisterType((*PreemptionPolicy)(nil), "peloton.api.v0.task.PreemptionPolicy")
	proto.RegisterType((*PersistentVolumeConfig)(nil), "peloton.api.v0.task.PersistentVolumeConfig")
	proto.RegisterType((*TaskConfig)(nil), "peloton.api.v0.task.TaskConfig")
	proto.RegisterType((*TerminationStatus)(nil), "peloton.api.v0.task.TerminationStatus")
	proto.RegisterType((*RuntimeInfo)(nil), "peloton.api.v0.task.RuntimeInfo")
	proto.RegisterMapType((map[string]uint32)(nil), "peloton.api.v0.task.RuntimeInfo.PortsEntry")
	proto.RegisterMapType((map[string]float64)(nil), "peloton.api.v0.task.RuntimeInfo.ResourceUsageEntry")
	proto.RegisterType((*TaskInfo)(nil), "peloton.api.v0.task.TaskInfo")
	proto.RegisterType((*InstanceRange)(nil), "peloton.api.v0.task.InstanceRange")
	proto.RegisterType((*QuerySpec)(nil), "peloton.api.v0.task.QuerySpec")
	proto.RegisterType((*TaskEvent)(nil), "peloton.api.v0.task.TaskEvent")
	proto.RegisterType((*PodEvent)(nil), "peloton.api.v0.task.PodEvent")
	proto.RegisterType((*BrowseSandboxFailure)(nil), "peloton.api.v0.task.BrowseSandboxFailure")
	proto.RegisterType((*TaskNotRunning)(nil), "peloton.api.v0.task.TaskNotRunning")
	proto.RegisterType((*BrowseSandboxRequest)(nil), "peloton.api.v0.task.BrowseSandboxRequest")
	proto.RegisterType((*BrowseSandboxResponse)(nil), "peloton.api.v0.task.BrowseSandboxResponse")
	proto.RegisterType((*BrowseSandboxResponse_Error)(nil), "peloton.api.v0.task.BrowseSandboxResponse.Error")
	proto.RegisterType((*InstanceIdOutOfRange)(nil), "peloton.api.v0.task.InstanceIdOutOfRange")
	proto.RegisterType((*GetRequest)(nil), "peloton.api.v0.task.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "peloton.api.v0.task.GetResponse")
	proto.RegisterType((*GetPodEventsRequest)(nil), "peloton.api.v0.task.GetPodEventsRequest")
	proto.RegisterType((*GetPodEventsResponse)(nil), "peloton.api.v0.task.GetPodEventsResponse")
	proto.RegisterType((*GetPodEventsResponse_Error)(nil), "peloton.api.v0.task.GetPodEventsResponse.Error")
	proto.RegisterType((*DeletePodEventsRequest)(nil), "peloton.api.v0.task.DeletePodEventsRequest")
	proto.RegisterType((*DeletePodEventsResponse)(nil), "peloton.api.v0.task.DeletePodEventsResponse")
	proto.RegisterType((*TaskEventsError)(nil), "peloton.api.v0.task.TaskEventsError")
	proto.RegisterType((*ListRequest)(nil), "peloton.api.v0.task.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "peloton.api.v0.task.ListResponse")
	proto.RegisterType((*ListResponse_Result)(nil), "peloton.api.v0.task.ListResponse.Result")
	proto.RegisterMapType((map[uint32]*TaskInfo)(nil), "peloton.api.v0.task.ListResponse.Result.ValueEntry")
	proto.RegisterType((*StartRequest)(nil), "peloton.api.v0.task.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "peloton.api.v0.task.StartResponse")
	proto.RegisterType((*StartResponse_Error)(nil), "peloton.api.v0.task.StartResponse.Error")
	proto.RegisterType((*TaskStartFailure)(nil), "peloton.api.v0.task.TaskStartFailure")
	proto.RegisterType((*StopRequest)(nil), "peloton.api.v0.task.StopRequest")
	proto.RegisterType((*TaskUpdateError)(nil), "peloton.api.v0.task.TaskUpdateError")
	proto.RegisterType((*StopResponse)(nil), "peloton.api.v0.task.StopResponse")
	proto.RegisterType((*StopResponse_Error)(nil), "peloton.api.v0.task.StopResponse.Error")
	proto.RegisterType((*RestartRequest)(nil), "peloton.api.v0.task.RestartRequest")
	proto.RegisterType((*RestartResponse)(nil), "peloton.api.v0.task.RestartResponse")
	proto.RegisterType((*QueryRequest)(nil), "peloton.api.v0.task.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "peloton.api.v0.task.QueryResponse")
	proto.RegisterType((*QueryResponse_Error)(nil), "peloton.api.v0.task.QueryResponse.Error")
	proto.RegisterType((*RefreshRequest)(nil), "peloton.api.v0.task.RefreshRequest")
	proto.RegisterType((*RefreshResponse)(nil), "peloton.api.v0.task.RefreshResponse")
	proto.RegisterType((*GetCacheRequest)(nil), "peloton.api.v0.task.GetCacheRequest")
	proto.RegisterType((*GetCacheResponse)(nil), "peloton.api.v0.task.GetCacheResponse")
}

func init() { proto.RegisterFile("peloton/api/v0/task/task.proto", fileDescriptor_dc6be790197c0e95) }

var fileDescriptor_dc6be790197c0e95 = []byte{
	// 3554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0xcd, 0x6f, 0x23, 0x47,
	0x76, 0xdf, 0xe6, 0x97, 0xc8, 0x47, 0x52, 0x6a, 0x95, 0x64, 0x99, 0x61, 0x9c, 0xb1, 0xa6, 0x57,
	0xde, 0x95, 0xc7, 0x5e, 0x49, 0xa3, 0xd9, 0xb1, 0x0d, 0x63, 0x3d, 0x33, 0x1c, 0xb2, 0x47, 0xa2,
	0x87, 0x6a, 0x72, 0x8a, 0x94, 0x66, 0xed, 0x1c, 0x84, 0x16, 0x59, 0x92, 0x3a, 0x22, 0xbb, 0x39,
	0xdd, 0x4d, 0xed, 0x28, 0x08, 0xb2, 0x08, 0x92, 0x05, 0x82, 0x20, 0xb7, 0x00, 0x39, 0x2d, 0x82,
	0x1c, 0x82, 0x9c, 0x72, 0x0d, 0x72, 0x0a, 0x02, 0xe4, 0x0f, 0x08, 0x10, 0x24, 0x87, 0x45, 0xfe,
	0x95, 0x5c, 0x82, 0xfa, 0x68, 0x76, 0x35, 0xd5, 0xfc, 0x18, 0x8f, 0x1d, 0xfb, 0x62, 0xb3, 0x5e,
	0xbd, 0xf7, 0xea, 0xeb, 0xf7, 0x7e, 0xef, 0x55, 0xb5, 0x06, 0xee, 0x0c, 0x49, 0xdf, 0xf1, 0x1d,
	0x7b, 0xd7, 0x1c, 0x5a, 0xbb, 0xd7, 0x7b, 0xbb, 0xbe, 0xe9, 0x5d, 0xb1, 0xff, 0xec, 0x0c, 0x5d,
	0xc7, 0x77, 0xd0, 0x9a, 0xe8, 0xdf, 0x31, 0x87, 0xd6, 0xce, 0xf5, 0xde, 0x0e, 0xed, 0x2a, 0xaf,
	0x0f, 0x88, 0xe7, 0x78, 0xbb, 0xd7, 0xf7, 0x77, 0xd9, 0x0f, 0xae, 0x5a, 0x7e, 0x6f, 0xc2, 0x55,
	0x60, 0xc9, 0x7b, 0xb5, 0x89, 0x5e, 0xe2, 0xba, 0x8e, 0xeb, 0x89, 0xff, 0x09, 0x9d, 0xcd, 0x09,
	0x9d, 0x57, 0x23, 0xe2, 0xde, 0xf0, 0xff, 0x72, 0x0d, 0xed, 0x1f, 0x14, 0x58, 0xc6, 0xc4, 0x73,
	0x46, 0x6e, 0x97, 0x54, 0x1d, 0xfb, 0xdc, 0xba, 0x40, 0x65, 0xc8, 0x76, 0x87, 0xa3, 0x86, 0x35,
	0xb0, 0xfc, 0x92, 0xb2, 0xa9, 0x6c, 0x2b, 0x78, 0xdc, 0x46, 0x77, 0x00, 0x06, 0x64, 0xc0, 0x7e,
	0x1f, 0x9d, 0x95, 0x12, 0xac, 0x57, 0x92, 0xa0, 0x4d, 0xc8, 0xf7, 0x2c, 0xef, 0x2a, 0x50, 0x48,
	0x32, 0x05, 0x59, 0x84, 0x4a, 0xb0, 0x74, 0xde, 0xe3, 0xce, 0x53, 0x9b, 0xca, 0x76, 0x11, 0x07,
	0x4d, 0x3a, 0xee, 0x45, 0x30, 0x6e, 0x9a, 0x8f, 0x1b, 0xb4, 0xb5, 0x7f, 0x4c, 0xc3, 0xea, 0x21,
	0x31, 0xfb, 0xfe, 0x65, 0xf5, 0x92, 0x74, 0xaf, 0xc4, 0x4c, 0x4b, 0xb0, 0x44, 0x6c, 0xf3, 0xac,
	0x4f, 0x7a, 0x6c, 0xa2, 0x59, 0x1c, 0x34, 0xd1, 0x1e, 0xac, 0x59, 0xb6, 0xe5, 0x5b, 0x66, 0xbf,
	0x6e, 0xfb, 0xc4, 0xbd, 0x36, 0xfb, 0x6d, 0xd2, 0xf5, 0xd8, 0x84, 0x8b, 0x38, 0xae, 0x0b, 0x69,
	0x50, 0xb0, 0x64, 0xd5, 0x24, 0x53, 0x8d, 0xc8, 0xd0, 0x27, 0xb0, 0x31, 0x30, 0x5f, 0x57, 0x1d,
	0xdb, 0x23, 0xdd, 0x91, 0x6f, 0x5d, 0x93, 0x67, 0xa6, 0xd5, 0x1f, 0xb9, 0xc4, 0x13, 0x4b, 0x99,
	0xd2, 0x4b, 0x77, 0xc5, 0xb7, 0x06, 0xc4, 0x19, 0xf9, 0xcc, 0x75, 0x9a, 0x29, 0xcb, 0x22, 0xf4,
	0x18, 0x52, 0xfe, 0xcd, 0x90, 0x94, 0x32, 0x9b, 0xca, 0xf6, 0xf2, 0xfe, 0x47, 0x3b, 0x31, 0x20,
	0xd9, 0xb9, 0xb5, 0xfe, 0x9d, 0xce, 0xcd, 0x90, 0x60, 0x66, 0x88, 0x5e, 0x42, 0xa1, 0xeb, 0x0c,
	0x06, 0xa6, 0xdd, 0x63, 0x0a, 0xa5, 0xa5, 0x4d, 0x65, 0x3b, 0xbf, 0xff, 0x60, 0x41, 0x47, 0x55,
	0xc9, 0x14, 0x47, 0x1c, 0x21, 0x03, 0x72, 0x97, 0xbe, 0x3f, 0xe4, 0x5e, 0xb3, 0xcc, 0xeb, 0xde,
	0x82, 0x5e, 0x0f, 0x3b, 0x9d, 0x16, 0x77, 0x19, 0xba, 0x28, 0x7f, 0x0d, 0x05, 0x79, 0x34, 0x7a,
	0x86, 0x62, 0x3c, 0x76, 0x86, 0x39, 0x1c, 0x34, 0xe9, 0x19, 0x8e, 0x6c, 0xef, 0xd2, 0x74, 0x89,
	0x6e, 0x5f, 0x5b, 0xae, 0x63, 0x0f, 0x88, 0xed, 0xf3, 0x33, 0xcc, 0xe2, 0xb8, 0xae, 0xf2, 0x73,
	0xc8, 0x8d, 0xc7, 0x44, 0x1b, 0x90, 0xf1, 0xba, 0x97, 0x64, 0x40, 0x84, 0x5f, 0xd1, 0x42, 0x08,
	0x52, 0x43, 0xc7, 0xf5, 0x05, 0x16, 0xd8, 0x6f, 0x26, 0x33, 0xfd, 0x4b, 0x76, 0xe8, 0x39, 0xcc,
	0x7e, 0x6b, 0x3f, 0x87, 0x14, 0xdd, 0x5f, 0x94, 0x87, 0xa5, 0x63, 0xe3, 0xb9, 0xd1, 0x7c, 0x69,
	0xa8, 0x3f, 0xa2, 0x8d, 0x6a, 0xf3, 0xe8, 0xa8, 0x62, 0xd4, 0x54, 0x05, 0x65, 0x21, 0x45, 0x87,
	0x53, 0x13, 0xf4, 0xd7, 0x01, 0x6e, 0x55, 0xd5, 0xa4, 0xd6, 0x02, 0x68, 0x39, 0xae, 0x2f, 0x00,
	0x8a, 0x20, 0x65, 0x9b, 0xe3, 0x19, 0xb0, 0xdf, 0x68, 0x1d, 0xd2, 0xd7, 0x66, 0x7f, 0x44, 0xc4,
	0x04, 0x78, 0x83, 0x43, 0xf9, 0xda, 0xa0, 0xca, 0x7c, 0x12, 0x41, 0x53, 0xfb, 0x8b, 0x24, 0x00,
	0x05, 0x95, 0xef, 0x9a, 0x96, 0xed, 0xa3, 0xcf, 0x04, 0x52, 0x14, 0x86, 0x94, 0xad, 0xd8, 0xa3,
	0x08, 0xd5, 0x65, 0x88, 0x18, 0xb0, 0xd2, 0x37, 0xcf, 0x48, 0x3f, 0xec, 0x65, 0x53, 0xc8, 0x4f,
	0x71, 0xd2, 0x88, 0xea, 0xe2, 0x49, 0x63, 0x74, 0x08, 0x45, 0x7a, 0x8a, 0xa1, 0xb7, 0x24, 0xf3,
	0xa6, 0xc5, 0x7a, 0xab, 0xc8, 0x9a, 0x38, 0x6a, 0x88, 0x74, 0x28, 0x38, 0xae, 0xe4, 0x28, 0xc5,
	0x1c, 0xdd, 0x8d, 0x75, 0xd4, 0x94, 0x14, 0x71, 0xc4, 0x4c, 0xfb, 0x43, 0x71, 0x62, 0x1b, 0x80,
	0xc4, 0x89, 0x9d, 0x56, 0x9b, 0x46, 0xbb, 0x83, 0x2b, 0x75, 0xa3, 0xa3, 0xfe, 0x08, 0xad, 0x83,
	0xda, 0xa8, 0x3c, 0xd5, 0x1b, 0xb2, 0x54, 0x41, 0x08, 0x96, 0x2b, 0x46, 0x4d, 0x96, 0x25, 0xd0,
	0x2a, 0x14, 0x9b, 0x58, 0x16, 0x25, 0x35, 0x0c, 0xc5, 0xc8, 0x1a, 0x50, 0x05, 0xf2, 0xdd, 0x71,
	0xcb, 0x2b, 0x29, 0x9b, 0xc9, 0xed, 0xfc, 0xfe, 0xfb, 0x73, 0xce, 0x03, 0xcb, 0x36, 0xda, 0x0b,
	0x28, 0xc8, 0xcb, 0xf9, 0x36, 0x5c, 0xfe, 0x75, 0x12, 0x56, 0x26, 0x4e, 0x0e, 0x7d, 0x01, 0xa9,
	0x2b, 0x4b, 0xc4, 0xd7, 0xf2, 0xfe, 0x87, 0x8b, 0x9c, 0xf6, 0xce, 0x73, 0xcb, 0xee, 0x61, 0x66,
	0x86, 0x1a, 0x90, 0xeb, 0x3a, 0x76, 0xcf, 0xf2, 0x2d, 0xc7, 0x66, 0x88, 0x59, 0xde, 0xdf, 0x59,
	0xc8, 0x47, 0x35, 0xb0, 0xc2, 0xa1, 0x03, 0xf4, 0x00, 0xd2, 0x0c, 0x48, 0x02, 0x2d, 0x7f, 0x30,
	0xe9, 0x29, 0x68, 0x32, 0x67, 0x98, 0xeb, 0x52, 0x02, 0x75, 0xc9, 0xab, 0x91, 0xe5, 0x12, 0x1a,
	0xe8, 0x82, 0x6d, 0x65, 0x91, 0xd6, 0x87, 0xdc, 0x78, 0x38, 0xf4, 0x0e, 0xac, 0x56, 0x9b, 0x46,
	0xad, 0xde, 0xa9, 0x37, 0x8d, 0xd3, 0x30, 0x78, 0xdf, 0x85, 0xb5, 0x50, 0xdc, 0xd0, 0xdb, 0xed,
	0xd3, 0xce, 0x61, 0xc5, 0x50, 0x15, 0xb4, 0x06, 0x2b, 0x61, 0x87, 0xfe, 0xe2, 0xb8, 0xd2, 0x50,
	0x13, 0xa8, 0x0c, 0x1b, 0xa1, 0xf0, 0x00, 0xeb, 0x95, 0x8e, 0x8e, 0xb9, 0x41, 0x52, 0xfb, 0x29,
	0xa4, 0xe8, 0x06, 0x45, 0xb9, 0x21, 0x0b, 0xa9, 0x4e, 0xa5, 0xfd, 0x5c, 0x10, 0x43, 0xb3, 0xdd,
	0x51, 0x13, 0xda, 0x7d, 0x28, 0x62, 0xe2, 0xf9, 0xa6, 0xeb, 0xb7, 0x9c, 0xbe, 0xd5, 0xbd, 0xa1,
	0x2b, 0x19, 0x98, 0xaf, 0xc7, 0x79, 0x43, 0xe1, 0x2b, 0x91, 0x44, 0xda, 0xbf, 0x2b, 0xa0, 0xb6,
	0x5c, 0x42, 0x06, 0x43, 0xba, 0x16, 0x61, 0xf6, 0x28, 0x12, 0xf5, 0xf7, 0x62, 0xb7, 0x7f, 0xd2,
	0x48, 0x8e, 0xfd, 0x2d, 0x28, 0x5e, 0x59, 0xfd, 0x7e, 0xd3, 0x16, 0x4a, 0x82, 0x45, 0xa3, 0x42,
	0xed, 0x50, 0x04, 0x90, 0x0a, 0x85, 0xce, 0x57, 0x2d, 0xfd, 0xb4, 0x6e, 0x9c, 0x54, 0x1a, 0xf5,
	0x1a, 0x0f, 0x1d, 0x26, 0x69, 0x61, 0x5d, 0x3f, 0x6a, 0x75, 0xea, 0x4f, 0x1b, 0xba, 0xaa, 0xa0,
	0x12, 0xac, 0x33, 0xa9, 0xd1, 0x34, 0x22, 0x3d, 0x09, 0xed, 0x04, 0x36, 0x5a, 0xc4, 0xf5, 0x2c,
	0xcf, 0x27, 0xb6, 0x7f, 0xe2, 0xf4, 0x47, 0x83, 0xa0, 0xba, 0xd8, 0x82, 0x62, 0xd7, 0xb1, 0x7d,
	0xd3, 0xb2, 0x89, 0xdb, 0xa2, 0x9c, 0xcb, 0xb9, 0x31, 0x2a, 0x64, 0xe4, 0x6d, 0xfd, 0x31, 0x39,
	0x7a, 0x2a, 0x58, 0x52, 0xb4, 0xb4, 0xff, 0xc8, 0x00, 0x74, 0x4c, 0xef, 0x6a, 0x06, 0xbf, 0x3e,
	0x84, 0x0c, 0x03, 0x0d, 0xcd, 0x14, 0xc9, 0xf9, 0x08, 0x13, 0xca, 0xe8, 0x31, 0x64, 0x5d, 0x51,
	0x07, 0x09, 0x68, 0xfe, 0x38, 0x76, 0x97, 0xa3, 0xc5, 0x12, 0x1e, 0x1b, 0xa1, 0x87, 0x2c, 0x4c,
	0xf8, 0x1a, 0x04, 0x83, 0xbd, 0xbb, 0xc3, 0xcb, 0xb9, 0xeb, 0xfb, 0x34, 0x16, 0x78, 0x57, 0xdd,
	0x3e, 0x77, 0x70, 0xa8, 0x89, 0x76, 0xc3, 0xfc, 0x97, 0x66, 0x46, 0xef, 0xc8, 0x46, 0xac, 0x83,
	0x99, 0x8c, 0xd3, 0xe2, 0x3e, 0x64, 0xc9, 0x6b, 0x5a, 0x61, 0x38, 0x6e, 0x69, 0x85, 0x59, 0x6c,
	0x84, 0x16, 0xba, 0xe8, 0x61, 0x26, 0x63, 0x3d, 0x74, 0x08, 0xf9, 0xcb, 0x30, 0x3d, 0xb3, 0x2a,
	0x23, 0xbf, 0xff, 0x93, 0xc5, 0xd2, 0x38, 0x96, 0x4d, 0xd1, 0x43, 0x48, 0xd3, 0x8c, 0xe9, 0x95,
	0x96, 0x66, 0x90, 0x53, 0x98, 0x01, 0x31, 0xd7, 0x46, 0x8f, 0x01, 0x42, 0x96, 0x12, 0x65, 0xc4,
	0x5c, 0x62, 0x93, 0x4c, 0x68, 0xb2, 0x71, 0xe5, 0x40, 0x2a, 0xe5, 0x66, 0x24, 0x9b, 0x48, 0xc8,
	0xe1, 0xa8, 0x21, 0xaa, 0x42, 0xe6, 0x9a, 0x01, 0xb2, 0x04, 0xcc, 0x45, 0x7c, 0xb1, 0x15, 0x8f,
	0x5e, 0x2c, 0x4c, 0xd1, 0x0b, 0x50, 0x87, 0x13, 0xe1, 0x56, 0xca, 0x33, 0x77, 0x1f, 0x2c, 0x14,
	0x9b, 0xf8, 0x96, 0x39, 0x2d, 0xad, 0x29, 0x2a, 0x5c, 0xa7, 0xdf, 0x27, 0x6e, 0xa9, 0xc0, 0xe2,
	0x53, 0x92, 0xd0, 0xe2, 0x93, 0x46, 0xeb, 0x81, 0x6b, 0x76, 0x49, 0x8b, 0xb8, 0x96, 0xd3, 0x6b,
	0x13, 0x4a, 0xab, 0x5e, 0xa9, 0xc8, 0x8b, 0xcf, 0xf8, 0x5e, 0xf4, 0x1e, 0xe4, 0x5c, 0x72, 0xed,
	0x74, 0x69, 0x61, 0x5c, 0x5a, 0x66, 0x6e, 0x43, 0x81, 0xf6, 0x77, 0x29, 0x58, 0xed, 0x10, 0x77,
	0x60, 0xd9, 0x26, 0x9d, 0x4b, 0xdb, 0x37, 0xfd, 0x91, 0x87, 0x74, 0xc8, 0xb8, 0xc4, 0xf4, 0x1c,
	0x5b, 0x10, 0xce, 0xcf, 0x62, 0x17, 0x75, 0xcb, 0x6e, 0x07, 0x33, 0x23, 0x2c, 0x8c, 0xd1, 0xef,
	0x43, 0x8e, 0xbc, 0xb6, 0xfc, 0xd3, 0xae, 0xd3, 0x0b, 0xca, 0x9d, 0x2c, 0x15, 0x54, 0x9d, 0x1e,
	0xe1, 0x21, 0x7e, 0x61, 0x9b, 0x7d, 0x51, 0xf0, 0x88, 0x16, 0xcd, 0x60, 0x19, 0xee, 0x07, 0x7d,
	0x00, 0x77, 0x3b, 0x3a, 0x3e, 0xaa, 0x1b, 0x15, 0x46, 0xc2, 0xed, 0x4e, 0xa5, 0x73, 0xdc, 0x3e,
	0xc5, 0x7a, 0xa5, 0xdd, 0x34, 0x24, 0x72, 0xda, 0x85, 0x8f, 0xa6, 0xab, 0x3d, 0xaf, 0x37, 0x1a,
	0x7a, 0xed, 0xb4, 0x69, 0x9c, 0x62, 0xfd, 0xc5, 0xb1, 0xde, 0xa6, 0x29, 0x7f, 0x0b, 0x36, 0xa7,
	0x1b, 0x3c, 0xab, 0xd4, 0x1b, 0x7a, 0x4d, 0x4d, 0xa0, 0x87, 0x70, 0x7f, 0xae, 0x5b, 0x4a, 0xf3,
	0xa7, 0x47, 0xb4, 0x44, 0xd0, 0x8d, 0x8a, 0x51, 0xd5, 0xd5, 0x24, 0xba, 0x0f, 0x3f, 0x9b, 0x6e,
	0x26, 0x58, 0x52, 0xaf, 0x9d, 0x62, 0xbd, 0xdd, 0x3c, 0xc6, 0x55, 0xbd, 0xad, 0xa6, 0xd0, 0xa7,
	0xf0, 0x60, 0xba, 0x49, 0x4d, 0xaf, 0xd4, 0x1a, 0x75, 0x43, 0x3f, 0xed, 0xd4, 0x8f, 0xf4, 0xe6,
	0x71, 0xe7, 0x54, 0xff, 0x65, 0x55, 0xd7, 0x6b, 0x7a, 0x4d, 0x4d, 0x2f, 0xb4, 0xf2, 0x67, 0x4d,
	0x7c, 0x7a, 0xdc, 0xaa, 0x55, 0x3a, 0xba, 0x9a, 0x41, 0x7b, 0xf0, 0xf1, 0x42, 0x06, 0x58, 0x6f,
	0x77, 0x2a, 0xb8, 0xa3, 0x2e, 0x69, 0xff, 0x9c, 0x83, 0x3c, 0x1e, 0xd9, 0xf4, 0xb2, 0x42, 0x49,
	0x05, 0xfd, 0x1c, 0xd2, 0x9e, 0x6f, 0xfa, 0x41, 0x2a, 0xba, 0x13, 0x8f, 0x0c, 0xd3, 0xbb, 0xa2,
	0x90, 0x20, 0x98, 0x2b, 0xa3, 0x7d, 0xc8, 0x33, 0x8e, 0xa2, 0x1d, 0xf5, 0x9e, 0xa8, 0x3b, 0xd5,
	0x90, 0xb7, 0x98, 0xbc, 0x86, 0x65, 0x25, 0x0a, 0x5c, 0x16, 0xb7, 0x1d, 0x6b, 0x5c, 0x14, 0x87,
	0x02, 0xf4, 0x13, 0x58, 0xee, 0x3a, 0x83, 0x61, 0x9f, 0x50, 0xf8, 0x31, 0x95, 0x14, 0x53, 0x99,
	0x90, 0xd2, 0x14, 0x71, 0xe9, 0x78, 0xfc, 0x46, 0x99, 0xc3, 0xec, 0x37, 0xaa, 0x04, 0x24, 0x96,
	0x61, 0x24, 0x16, 0xcf, 0x00, 0xd2, 0xa2, 0x19, 0xa1, 0x79, 0xba, 0xed, 0xbb, 0x37, 0x01, 0xa1,
	0xfd, 0x02, 0x72, 0x17, 0x8e, 0xd9, 0x67, 0x8b, 0x64, 0x97, 0xad, 0xf9, 0x5b, 0x11, 0x1a, 0xd0,
	0x6a, 0x7f, 0x40, 0x3c, 0xcf, 0xbc, 0x20, 0x8c, 0x0b, 0x73, 0x38, 0x68, 0xd2, 0xa8, 0x10, 0x91,
	0x97, 0xe3, 0x51, 0x21, 0x42, 0x49, 0x83, 0xc2, 0x39, 0xaf, 0x10, 0xaa, 0xce, 0xc8, 0xf6, 0x19,
	0x77, 0x15, 0x71, 0x44, 0x86, 0x7e, 0x01, 0x59, 0x4e, 0x4f, 0xf5, 0x9a, 0x20, 0xa3, 0xcd, 0x69,
	0xb9, 0xef, 0x44, 0xe8, 0xe1, 0xb1, 0x85, 0x48, 0xcc, 0xe7, 0xd6, 0xc5, 0x09, 0xa5, 0x3e, 0xc7,
	0x66, 0x14, 0x94, 0xc2, 0x51, 0x21, 0xda, 0x87, 0xf5, 0x1e, 0xf1, 0x2c, 0x97, 0xf4, 0xaa, 0x11,
	0xe5, 0x22, 0x53, 0x8e, 0xed, 0x43, 0x1f, 0xc1, 0x92, 0x79, 0x41, 0x6c, 0xbf, 0x5e, 0x63, 0xfc,
	0x93, 0xdf, 0x5f, 0x0d, 0x0f, 0xbe, 0xc2, 0x3b, 0x70, 0xa0, 0x81, 0xbe, 0xa0, 0x79, 0xf8, 0xda,
	0x62, 0x4e, 0x57, 0xe2, 0xef, 0x01, 0x41, 0xb3, 0x7a, 0x69, 0xda, 0x17, 0xa4, 0xe1, 0xb0, 0x2c,
	0xcc, 0x4d, 0xd0, 0xe7, 0xb0, 0x32, 0x74, 0xc9, 0xf5, 0x91, 0x04, 0x36, 0x75, 0x0a, 0xd8, 0x26,
	0x15, 0xd1, 0x57, 0x2c, 0xc7, 0xb0, 0x6c, 0x7e, 0xcc, 0xce, 0x66, 0x95, 0xc1, 0xe3, 0xc1, 0x5c,
	0x78, 0x60, 0xd9, 0x8a, 0xc3, 0x24, 0xea, 0x09, 0x7d, 0x0e, 0x4b, 0x3c, 0x8b, 0xde, 0x94, 0x10,
	0x03, 0xcb, 0xe6, 0x8c, 0xe4, 0xcb, 0xe1, 0x12, 0x18, 0xa0, 0x27, 0x80, 0xc4, 0xb6, 0xca, 0xab,
	0x5a, 0x9b, 0xb2, 0xaa, 0x18, 0x5d, 0xd4, 0x81, 0x55, 0x7f, 0x92, 0xab, 0x4b, 0xeb, 0x33, 0x8a,
	0x80, 0x5b, 0xcc, 0x8e, 0x6f, 0x3b, 0x60, 0x6f, 0x3d, 0x7c, 0xac, 0x43, 0x1a, 0x60, 0xef, 0x30,
	0xbc, 0xca, 0xa2, 0xf2, 0x67, 0xfc, 0x32, 0xcc, 0x23, 0x07, 0xa9, 0x90, 0xbc, 0x22, 0x37, 0xa2,
	0x56, 0xa3, 0x3f, 0xe3, 0xaf, 0xc2, 0x9f, 0x27, 0x3e, 0x53, 0xca, 0x4f, 0x00, 0xdd, 0xde, 0xd4,
	0x79, 0x1e, 0x14, 0xc9, 0x83, 0xf6, 0xdf, 0x0a, 0x64, 0xd9, 0xf2, 0x29, 0x69, 0xdd, 0x01, 0xb0,
	0x6c, 0xcf, 0x37, 0xed, 0x2e, 0xa9, 0xf7, 0x44, 0xd1, 0x2d, 0x49, 0xe8, 0xa5, 0xe4, 0x8f, 0x9c,
	0xb3, 0x31, 0x31, 0x4d, 0x2d, 0x19, 0xbf, 0x74, 0xce, 0xea, 0x35, 0xcc, 0x75, 0xd1, 0xa7, 0x90,
	0xe1, 0xb1, 0x21, 0xea, 0xc5, 0xf7, 0xa7, 0xc6, 0x7f, 0x50, 0x3c, 0x70, 0x75, 0x0a, 0x06, 0x97,
	0xa3, 0x47, 0xd4, 0x89, 0x9b, 0xf3, 0x10, 0x86, 0x03, 0x03, 0xed, 0x01, 0x14, 0xeb, 0x62, 0xde,
	0x98, 0xa2, 0x9f, 0xf2, 0xdb, 0xb9, 0xeb, 0x0c, 0xc4, 0xa2, 0xd8, 0x6f, 0xb4, 0x0c, 0x09, 0xdf,
	0x11, 0x9b, 0x9a, 0xf0, 0x1d, 0xed, 0x5f, 0x15, 0xc8, 0xbd, 0x18, 0x11, 0xf7, 0xa6, 0x3d, 0x24,
	0x5d, 0x54, 0x03, 0x18, 0x9a, 0x17, 0xe2, 0x2c, 0x99, 0x5d, 0xcc, 0x13, 0x00, 0x7f, 0x23, 0x6c,
	0x8d, 0xf5, 0xa8, 0x25, 0x96, 0xec, 0xd0, 0x23, 0x00, 0x3f, 0xa0, 0x36, 0x5e, 0x6a, 0xcf, 0x67,
	0x40, 0xc9, 0x82, 0x9e, 0x1c, 0x2d, 0xd7, 0xbd, 0x52, 0x72, 0x33, 0xb9, 0x9d, 0xc3, 0xbc, 0x41,
	0xa5, 0x94, 0xa1, 0xbd, 0x52, 0x8a, 0x4b, 0x59, 0x43, 0xfb, 0x5d, 0x0a, 0x72, 0xd4, 0x8b, 0x7e,
	0x4d, 0x6c, 0x1f, 0x7d, 0x02, 0x19, 0x9f, 0xc7, 0x00, 0x9f, 0xfb, 0x9d, 0x69, 0xa7, 0x25, 0x22,
	0x42, 0x68, 0x87, 0x99, 0x2b, 0xf1, 0x26, 0x99, 0x4b, 0xa2, 0xea, 0x64, 0x94, 0xaa, 0xdf, 0x83,
	0x1c, 0x3d, 0x12, 0xcf, 0x37, 0x07, 0x43, 0x91, 0x7c, 0x42, 0x01, 0xfa, 0x02, 0x32, 0xe2, 0x36,
	0x91, 0x66, 0xc3, 0x7d, 0x30, 0x75, 0x38, 0xb6, 0xaa, 0x9d, 0x36, 0x53, 0xc6, 0xc2, 0x08, 0x95,
	0x21, 0x4b, 0xd7, 0xce, 0x6e, 0x37, 0x19, 0xe6, 0x7b, 0xdc, 0x96, 0x72, 0xc4, 0x52, 0x24, 0x47,
	0x94, 0x02, 0x9e, 0xed, 0x05, 0x59, 0x45, 0x34, 0xe9, 0x61, 0x51, 0xb2, 0x13, 0xd4, 0x91, 0x5b,
	0x68, 0xdb, 0x24, 0x0b, 0x99, 0xbe, 0xe0, 0x4d, 0xe9, 0xab, 0x06, 0x45, 0xc1, 0x09, 0x62, 0xf8,
	0xfc, 0x42, 0xc3, 0x47, 0x8d, 0xb4, 0x13, 0xc8, 0xf0, 0x1d, 0x42, 0x08, 0x96, 0x79, 0xe5, 0x24,
	0xdd, 0xec, 0x57, 0xa1, 0x28, 0x64, 0x5f, 0x36, 0x9f, 0x1e, 0x1d, 0x60, 0x55, 0x91, 0x44, 0x58,
	0x6f, 0x53, 0x51, 0x42, 0xb2, 0xa4, 0x65, 0x1b, 0x95, 0x25, 0xb5, 0xdf, 0x25, 0x21, 0xdb, 0x72,
	0x7a, 0x1c, 0x59, 0xdb, 0x13, 0xc8, 0xba, 0xcd, 0xae, 0x01, 0x96, 0x36, 0x21, 0x6f, 0x76, 0xfd,
	0x51, 0x50, 0x00, 0x24, 0x38, 0xf7, 0x49, 0x22, 0x8a, 0x8e, 0xb0, 0x40, 0x10, 0xd5, 0x4b, 0x58,
	0x00, 0xcc, 0xc6, 0xce, 0xad, 0x54, 0x9c, 0x7e, 0x93, 0x54, 0x9c, 0x99, 0x91, 0x8a, 0x4b, 0x61,
	0x2a, 0x5e, 0x92, 0x21, 0x52, 0x8b, 0x00, 0x2e, 0x3b, 0x01, 0x38, 0x29, 0x06, 0x72, 0xd3, 0xca,
	0x15, 0x88, 0x40, 0x71, 0x2f, 0x02, 0xb8, 0xfc, 0x94, 0xdd, 0x94, 0x21, 0x56, 0x0a, 0x21, 0x56,
	0xe0, 0x63, 0x04, 0x00, 0xfa, 0x84, 0x01, 0xc8, 0xb5, 0xc6, 0x00, 0x2a, 0x4e, 0x71, 0x17, 0x55,
	0xd3, 0xf6, 0x60, 0xfd, 0xa9, 0xeb, 0xfc, 0xca, 0x23, 0x6d, 0xd3, 0xee, 0x9d, 0x39, 0xc1, 0x0b,
	0x8b, 0xbc, 0x1a, 0x25, 0xb2, 0x1a, 0xed, 0x1e, 0x2c, 0x53, 0x5b, 0xc3, 0xf1, 0xf1, 0xc8, 0xb6,
	0x2d, 0xfb, 0x62, 0x86, 0xee, 0x9f, 0x2b, 0x13, 0xee, 0x31, 0x79, 0x35, 0x22, 0x9e, 0x1f, 0xe6,
	0x12, 0xe5, 0x0d, 0x72, 0x49, 0x34, 0x41, 0x25, 0x6e, 0x25, 0xa8, 0x8d, 0x31, 0x32, 0xc5, 0x65,
	0x89, 0xb7, 0xb4, 0xbf, 0x4f, 0xc1, 0x3b, 0x13, 0xb3, 0xf0, 0x86, 0x8e, 0xed, 0x11, 0xf4, 0x0c,
	0xd2, 0xec, 0x53, 0x90, 0x98, 0x46, 0xfc, 0x9b, 0x7d, 0xac, 0xe9, 0x8e, 0x4e, 0xed, 0x30, 0x37,
	0x8f, 0xe0, 0x22, 0x31, 0x81, 0x8b, 0xe0, 0x29, 0x3d, 0x78, 0x36, 0x77, 0x5c, 0x9f, 0x32, 0xf8,
	0xd0, 0xf4, 0x2f, 0xc7, 0x0c, 0xce, 0x1a, 0x68, 0x0f, 0xd6, 0xd8, 0x69, 0x1d, 0x99, 0x9e, 0x4f,
	0xdc, 0xc3, 0xc0, 0x21, 0x2f, 0xca, 0xe3, 0xba, 0xd0, 0x36, 0xac, 0x48, 0x62, 0x5a, 0x46, 0x08,
	0x1e, 0x9c, 0x14, 0x97, 0x7f, 0x9b, 0x80, 0x34, 0x9b, 0x32, 0x7a, 0x04, 0x59, 0xdb, 0xf1, 0x9f,
	0x39, 0x23, 0x3b, 0xd8, 0xfd, 0x5b, 0xef, 0x03, 0xe2, 0xf3, 0xd8, 0x97, 0xce, 0x99, 0x21, 0x34,
	0xf1, 0xd8, 0x06, 0xd5, 0x01, 0x9c, 0x91, 0xdf, 0x3c, 0x67, 0x99, 0x55, 0xd4, 0x02, 0xf1, 0xcf,
	0xa5, 0xf5, 0xf1, 0xd1, 0x34, 0xc7, 0x06, 0x58, 0x32, 0x46, 0x55, 0x00, 0x7b, 0x0c, 0xa3, 0x99,
	0x0f, 0x4a, 0x51, 0xc4, 0x61, 0xc9, 0x0c, 0x55, 0x61, 0x49, 0x14, 0xf8, 0xa2, 0x50, 0xf8, 0x70,
	0xfe, 0x29, 0x0a, 0x94, 0xe3, 0xc0, 0x52, 0x7b, 0x05, 0xeb, 0x71, 0xb3, 0xfd, 0x66, 0x38, 0xdd,
	0x82, 0x62, 0x80, 0x4a, 0x7e, 0x0f, 0xe1, 0x50, 0x8d, 0x0a, 0x35, 0x13, 0xe0, 0x80, 0xf8, 0xdf,
	0x65, 0x40, 0x68, 0x7f, 0x99, 0x80, 0x3c, 0x1b, 0x43, 0xc0, 0xfd, 0x21, 0x25, 0x22, 0x6f, 0xd4,
	0xf7, 0xa7, 0x8d, 0x32, 0xde, 0x6b, 0x56, 0x4f, 0x09, 0xe5, 0x08, 0x62, 0x12, 0x6f, 0x8d, 0x98,
	0xe4, 0xdb, 0x20, 0xe6, 0x53, 0x58, 0xe2, 0x93, 0xe2, 0xa1, 0x33, 0x77, 0x09, 0x81, 0xb6, 0xf6,
	0xb7, 0x0a, 0xac, 0x1d, 0x10, 0x3f, 0xc8, 0x62, 0xde, 0x77, 0x4a, 0x44, 0xeb, 0x90, 0xee, 0xb3,
	0x2f, 0xb4, 0x49, 0x96, 0x65, 0x78, 0x83, 0x4a, 0xdd, 0x91, 0x5d, 0xef, 0x89, 0x54, 0xc6, 0x1b,
	0xda, 0xbf, 0x28, 0xb0, 0x1e, 0x9d, 0x58, 0xcc, 0x61, 0x4d, 0x5f, 0x69, 0x60, 0x37, 0x3e, 0x2c,
	0x3d, 0xa0, 0x34, 0x7e, 0x52, 0xbb, 0xb1, 0x56, 0x71, 0x03, 0x46, 0x18, 0xad, 0x7c, 0x37, 0xa0,
	0x8b, 0x99, 0xe4, 0xbe, 0x51, 0x23, 0x7d, 0xe2, 0x93, 0xff, 0xb7, 0x5d, 0xe5, 0xfb, 0x27, 0x76,
	0x95, 0xef, 0xdf, 0xef, 0xc1, 0xbb, 0xb7, 0x26, 0xc1, 0x17, 0xa4, 0x7d, 0x04, 0x2b, 0xe3, 0xd2,
	0xd1, 0x9b, 0xb7, 0x9a, 0x3f, 0x81, 0x7c, 0xc3, 0xf2, 0xde, 0x2e, 0x1e, 0x3f, 0x83, 0xb4, 0x2b,
	0xb1, 0xa2, 0x36, 0x13, 0xe3, 0x1c, 0xdc, 0xdc, 0x40, 0xfb, 0xb7, 0x04, 0x14, 0xf8, 0xf0, 0xe2,
	0xf4, 0x9f, 0x4c, 0x84, 0xea, 0x76, 0xfc, 0xc7, 0x24, 0xc9, 0x84, 0x5e, 0xb0, 0x47, 0x7d, 0xff,
	0xdb, 0x8a, 0xda, 0xf2, 0x3f, 0x29, 0x90, 0xe1, 0x2e, 0x51, 0x3d, 0xb8, 0x40, 0x2a, 0x33, 0xee,
	0xfa, 0x31, 0x73, 0xd9, 0x39, 0xa1, 0x56, 0xe2, 0x49, 0x88, 0x79, 0x28, 0xbf, 0x04, 0x08, 0x85,
	0xf2, 0x5d, 0xb5, 0xc8, 0xef, 0xaa, 0x0f, 0xe4, 0xbb, 0xea, 0xdc, 0xf0, 0x96, 0xae, 0xb2, 0xbf,
	0x86, 0x42, 0xdb, 0x37, 0xdd, 0xb7, 0x3b, 0xc0, 0xcf, 0x21, 0xc3, 0xce, 0x23, 0xf8, 0x2c, 0xb2,
	0xc8, 0x09, 0x0a, 0x0b, 0xed, 0x37, 0x49, 0x28, 0x8a, 0x19, 0x88, 0x33, 0x7c, 0x14, 0xad, 0x2e,
	0xe2, 0x8f, 0x30, 0x62, 0x12, 0xad, 0x2a, 0x76, 0x00, 0xb1, 0xa7, 0x3c, 0xd2, 0x0b, 0x79, 0x91,
	0xcf, 0xac, 0x88, 0x63, 0x7a, 0xa8, 0xbe, 0x65, 0x5f, 0x9b, 0x7d, 0x2b, 0xa2, 0x9f, 0xe4, 0xfa,
	0xb7, 0x7b, 0xca, 0xff, 0xa5, 0xfc, 0x00, 0x6b, 0x82, 0xc7, 0x61, 0x3a, 0x4f, 0xce, 0xf8, 0x56,
	0x20, 0xae, 0xa0, 0xae, 0x7f, 0x2b, 0x95, 0x7f, 0x0c, 0xea, 0x64, 0xe7, 0x8c, 0xb0, 0xff, 0x53,
	0xc8, 0xb7, 0x7d, 0x67, 0xf8, 0xbd, 0xa1, 0x46, 0x70, 0xd4, 0xf1, 0xb0, 0x67, 0xfa, 0x64, 0x1e,
	0x47, 0xfd, 0x55, 0x92, 0x82, 0x9c, 0xce, 0x56, 0x20, 0xec, 0x8b, 0x28, 0xc2, 0x7e, 0x3a, 0x05,
	0x61, 0xa1, 0x45, 0x0c, 0xc0, 0x9c, 0xe1, 0x70, 0x0a, 0xc0, 0x26, 0x7b, 0xde, 0x18, 0x60, 0xff,
	0xf3, 0x43, 0x04, 0xd8, 0x33, 0xc8, 0x8f, 0xc2, 0xdd, 0x16, 0x20, 0xdb, 0x9a, 0x0a, 0x32, 0xe9,
	0x64, 0xb0, 0x6c, 0xa8, 0xfd, 0x19, 0xff, 0xa3, 0xb0, 0xef, 0x95, 0x73, 0x7e, 0xab, 0xc0, 0xca,
	0x78, 0x0e, 0x63, 0xd6, 0xf9, 0xa1, 0x6c, 0xb5, 0xf6, 0x2b, 0x28, 0xb0, 0x17, 0xb5, 0xb7, 0xda,
	0x9f, 0x7d, 0x48, 0x79, 0x43, 0xd2, 0x15, 0x33, 0x89, 0x7f, 0x90, 0x1a, 0xbf, 0xdb, 0x61, 0xa6,
	0xab, 0xfd, 0x4d, 0x02, 0x8a, 0x62, 0xe4, 0x37, 0xe1, 0xe2, 0x88, 0x49, 0x34, 0x54, 0x58, 0xe1,
	0xd9, 0x75, 0xdc, 0xde, 0xd4, 0x2f, 0xe6, 0xb7, 0x0a, 0x4f, 0xa6, 0x8d, 0x9e, 0x44, 0x1e, 0x12,
	0x93, 0xf1, 0x4f, 0x99, 0x93, 0x0f, 0x89, 0xf2, 0x23, 0x62, 0xf9, 0xe0, 0x5b, 0x0a, 0x22, 0xed,
	0xd7, 0x14, 0xb0, 0xe7, 0x2e, 0xf1, 0x2e, 0xbf, 0xa7, 0x2a, 0x67, 0x95, 0xa2, 0x55, 0x4c, 0x40,
	0xd4, 0x68, 0xe7, 0xb0, 0x72, 0x40, 0xfc, 0xaa, 0xd9, 0xbd, 0x24, 0xdf, 0xe9, 0x55, 0xe8, 0x37,
	0x0a, 0xa8, 0xe1, 0x40, 0x02, 0x14, 0xd2, 0x1b, 0xb3, 0xf2, 0x86, 0x6f, 0xcc, 0xdf, 0xf0, 0x2f,
	0x28, 0xee, 0xfd, 0xaf, 0xc2, 0x5f, 0x69, 0xf9, 0x0b, 0x57, 0xe4, 0x4f, 0x63, 0x56, 0x20, 0x5f,
	0x37, 0xea, 0x9d, 0x7a, 0xa5, 0x51, 0xff, 0x5a, 0xaf, 0xa9, 0x0a, 0xed, 0x6d, 0xe9, 0x46, 0xad,
	0x6e, 0x1c, 0xa8, 0x09, 0x94, 0x83, 0x34, 0xd6, 0x2b, 0xb5, 0xaf, 0xd4, 0x24, 0x93, 0x37, 0x2a,
	0x55, 0x2a, 0x4f, 0x21, 0x80, 0x0c, 0x6d, 0xb0, 0x2f, 0x9d, 0x45, 0xc8, 0x35, 0x2a, 0xc7, 0x46,
	0xf5, 0x90, 0x76, 0x65, 0x50, 0x01, 0xb2, 0xbc, 0xa9, 0xd7, 0xd4, 0x15, 0xda, 0x62, 0x9f, 0x2b,
	0x69, 0xdf, 0x12, 0xf5, 0x81, 0x8f, 0x0d, 0x83, 0x36, 0xb2, 0xd4, 0xae, 0x7d, 0x5c, 0x15, 0x1f,
	0x4c, 0x73, 0xd4, 0xa5, 0xf8, 0xbe, 0x0b, 0x28, 0x0b, 0xa9, 0x46, 0xb3, 0xdd, 0x51, 0xf3, 0x68,
	0x19, 0x20, 0xf8, 0xf3, 0x15, 0xe3, 0x40, 0x2d, 0x50, 0x0f, 0xcf, 0xeb, 0x8d, 0x06, 0x6d, 0x14,
	0xa9, 0x09, 0xff, 0x30, 0xaa, 0x2e, 0xd3, 0x8e, 0x9a, 0xde, 0xd0, 0x3b, 0x7a, 0x4d, 0x55, 0xe9,
	0xa8, 0x58, 0x6f, 0xeb, 0xf8, 0x44, 0xaf, 0xa9, 0xab, 0xf7, 0x7e, 0x09, 0x79, 0xe9, 0xf9, 0x93,
	0x6a, 0x86, 0x1f, 0xa8, 0x0b, 0x90, 0xad, 0xd5, 0xdb, 0x95, 0xa7, 0x0d, 0xb6, 0x76, 0x04, 0xcb,
	0x87, 0x7a, 0xa5, 0xd1, 0x39, 0x1c, 0x3f, 0x60, 0x26, 0xa8, 0x3a, 0x97, 0xd1, 0x4d, 0x28, 0x42,
	0xee, 0xd8, 0x08, 0x9a, 0xa9, 0xfd, 0xff, 0x5c, 0x82, 0x3c, 0xdd, 0xd7, 0x23, 0xd3, 0x36, 0x2f,
	0x88, 0x8b, 0x0e, 0x21, 0x79, 0x40, 0x7c, 0xf4, 0xfe, 0xb4, 0xeb, 0x8f, 0x00, 0x5b, 0x79, 0x73,
	0xba, 0x82, 0x00, 0xc9, 0x73, 0x48, 0xd1, 0xd2, 0x16, 0x6d, 0xce, 0xa8, 0x7a, 0xb9, 0xaf, 0xbb,
	0x73, 0xeb, 0x62, 0x64, 0x40, 0x9a, 0x15, 0x26, 0xe8, 0xee, 0xac, 0x62, 0x90, 0xbb, 0xd3, 0xe6,
	0xd7, 0x8b, 0x74, 0x72, 0x34, 0xbd, 0x4f, 0x99, 0x9c, 0x54, 0xd9, 0x94, 0xef, 0xce, 0xad, 0x0d,
	0x50, 0x07, 0x96, 0x44, 0x32, 0x41, 0x3f, 0x9e, 0xf5, 0x27, 0x23, 0x81, 0xcb, 0xad, 0xd9, 0x4a,
	0xe1, 0x92, 0x19, 0xaf, 0x4e, 0x59, 0xb2, 0x9c, 0x20, 0xa6, 0x2c, 0x39, 0xca, 0xe4, 0xe7, 0x50,
	0x8c, 0xbc, 0xe5, 0xa0, 0x0f, 0x17, 0x79, 0xb5, 0xe3, 0xfe, 0xef, 0x2d, 0xfe, 0xc0, 0xc7, 0x77,
	0x83, 0x91, 0xd5, 0xd4, 0xdd, 0x90, 0xb9, 0x74, 0xea, 0x6e, 0x44, 0xf8, 0x0e, 0xbd, 0x84, 0x6c,
	0x40, 0x43, 0x68, 0x6b, 0x1a, 0xf6, 0x64, 0x3a, 0x2c, 0x7f, 0x30, 0x47, 0x4b, 0x38, 0xee, 0x42,
	0x41, 0xbe, 0xd5, 0xa3, 0xed, 0x05, 0x2e, 0xfe, 0x7c, 0x80, 0x0f, 0x17, 0x7e, 0x22, 0x40, 0x7d,
	0x58, 0x99, 0xb8, 0x6c, 0xa3, 0xf8, 0xbf, 0x0b, 0x88, 0x7f, 0x17, 0x28, 0x7f, 0xbc, 0x98, 0x32,
	0x1f, 0xed, 0xe9, 0x3d, 0x88, 0xfb, 0x77, 0x00, 0x5f, 0xaf, 0xc5, 0xfc, 0xe3, 0x81, 0xb3, 0x0c,
	0xfb, 0x4b, 0xfd, 0x07, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x51, 0x45, 0x80, 0x2c, 0x5a, 0x30,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskManagerClient interface {
	// Get the info of a task in job.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// List all task info in a job.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Start a set of tasks for a job. Will be no-op for tasks that
	// are currently running.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stop a set of tasks for a job. Will be no-op for tasks that
	// are currently stopped.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Restart a set of tasks for a job. Will start tasks that are
	// currently stopped.
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error)
	// Query task info in a job, using a set of filters.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// BrowseSandbox returns list of file paths inside sandbox.
	BrowseSandbox(ctx context.Context, in *BrowseSandboxRequest, opts ...grpc.CallOption) (*BrowseSandboxResponse, error)
	// Debug only method. Allows user to load task runtime state from DB
	// and re-execute the action associated with current state.
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Debug only method. Get the cache of a task stored in Peloton.
	GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error)
	// GetPodEvents returns pod events (state transition for a pod),
	// in reverse chronological order. pod is singular instance of a Peloton job.
	GetPodEvents(ctx context.Context, in *GetPodEventsRequest, opts ...grpc.CallOption) (*GetPodEventsResponse, error)
	// DeletePodEvents, deletes the pod events for provided request, which is for
	// a jobID + instanceID + less than equal to runID.
	// Response will be successful or error on unable to delete events for input.
	DeletePodEvents(ctx context.Context, in *DeletePodEventsRequest, opts ...grpc.CallOption) (*DeletePodEventsResponse, error)
}

type taskManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagerClient(cc *grpc.ClientConn) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error) {
	out := new(RestartResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) BrowseSandbox(ctx context.Context, in *BrowseSandboxRequest, opts ...grpc.CallOption) (*BrowseSandboxResponse, error) {
	out := new(BrowseSandboxResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/BrowseSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error) {
	out := new(GetCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/GetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) GetPodEvents(ctx context.Context, in *GetPodEventsRequest, opts ...grpc.CallOption) (*GetPodEventsResponse, error) {
	out := new(GetPodEventsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/GetPodEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) DeletePodEvents(ctx context.Context, in *DeletePodEventsRequest, opts ...grpc.CallOption) (*DeletePodEventsResponse, error) {
	out := new(DeletePodEventsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.task.TaskManager/DeletePodEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServer is the server API for TaskManager service.
type TaskManagerServer interface {
	// Get the info of a task in job.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// List all task info in a job.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Start a set of tasks for a job. Will be no-op for tasks that
	// are currently running.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stop a set of tasks for a job. Will be no-op for tasks that
	// are currently stopped.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Restart a set of tasks for a job. Will start tasks that are
	// currently stopped.
	Restart(context.Context, *RestartRequest) (*RestartResponse, error)
	// Query task info in a job, using a set of filters.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// BrowseSandbox returns list of file paths inside sandbox.
	BrowseSandbox(context.Context, *BrowseSandboxRequest) (*BrowseSandboxResponse, error)
	// Debug only method. Allows user to load task runtime state from DB
	// and re-execute the action associated with current state.
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Debug only method. Get the cache of a task stored in Peloton.
	GetCache(context.Context, *GetCacheRequest) (*GetCacheResponse, error)
	// GetPodEvents returns pod events (state transition for a pod),
	// in reverse chronological order. pod is singular instance of a Peloton job.
	GetPodEvents(context.Context, *GetPodEventsRequest) (*GetPodEventsResponse, error)
	// DeletePodEvents, deletes the pod events for provided request, which is for
	// a jobID + instanceID + less than equal to runID.
	// Response will be successful or error on unable to delete events for input.
	DeletePodEvents(context.Context, *DeletePodEventsRequest) (*DeletePodEventsResponse, error)
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_BrowseSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).BrowseSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/BrowseSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).BrowseSandbox(ctx, req.(*BrowseSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/GetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).GetCache(ctx, req.(*GetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_GetPodEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).GetPodEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/GetPodEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).GetPodEvents(ctx, req.(*GetPodEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_DeletePodEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).DeletePodEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.task.TaskManager/DeletePodEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).DeletePodEvents(ctx, req.(*DeletePodEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.task.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TaskManager_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TaskManager_List_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TaskManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TaskManager_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _TaskManager_Restart_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _TaskManager_Query_Handler,
		},
		{
			MethodName: "BrowseSandbox",
			Handler:    _TaskManager_BrowseSandbox_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _TaskManager_Refresh_Handler,
		},
		{
			MethodName: "GetCache",
			Handler:    _TaskManager_GetCache_Handler,
		},
		{
			MethodName: "GetPodEvents",
			Handler:    _TaskManager_GetPodEvents_Handler,
		},
		{
			MethodName: "DeletePodEvents",
			Handler:    _TaskManager_DeletePodEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/api/v0/task/task.proto",
}
