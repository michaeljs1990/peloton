// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/job/job.proto

package job

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	errors "github.com/uber/peloton/.gen/peloton/api/v0/errors"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	query "github.com/uber/peloton/.gen/peloton/api/v0/query"
	respool "github.com/uber/peloton/.gen/peloton/api/v0/respool"
	task "github.com/uber/peloton/.gen/peloton/api/v0/task"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//  Job type definition such as batch, service and infra agent.
type JobType int32

const (
	// Normal batch job which will run to completion after all instances finishes.
	JobType_BATCH JobType = 0
	// Service job which is long running and will be restarted upon failures.
	JobType_SERVICE JobType = 1
	// Daemon job which has one instance running on each host for infra
	// agents like muttley, m3collector etc.
	JobType_DAEMON JobType = 2
)

var JobType_name = map[int32]string{
	0: "BATCH",
	1: "SERVICE",
	2: "DAEMON",
}

var JobType_value = map[string]int32{
	"BATCH":   0,
	"SERVICE": 1,
	"DAEMON":  2,
}

func (x JobType) String() string {
	return proto.EnumName(JobType_name, int32(x))
}

func (JobType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{0}
}

//*
//  Preferences for placement of tasks on hosts. Satisfying
//  these preferences is best-effort only - task constraints,
//  resource utilization of the system and other system configuration
//  settings may prevent satisfying these preferences.
type PlacementStrategy int32

const (
	// Use the system default.
	PlacementStrategy_PLACEMENT_STRATEGY_INVALID PlacementStrategy = 0
	// Place as many tasks of the job as possible on a single host.
	PlacementStrategy_PLACEMENT_STRATEGY_PACK_HOST PlacementStrategy = 1
	// Place as few tasks of a job as possible on a single host.
	PlacementStrategy_PLACEMENT_STRATEGY_SPREAD_JOB PlacementStrategy = 2
)

var PlacementStrategy_name = map[int32]string{
	0: "PLACEMENT_STRATEGY_INVALID",
	1: "PLACEMENT_STRATEGY_PACK_HOST",
	2: "PLACEMENT_STRATEGY_SPREAD_JOB",
}

var PlacementStrategy_value = map[string]int32{
	"PLACEMENT_STRATEGY_INVALID":    0,
	"PLACEMENT_STRATEGY_PACK_HOST":  1,
	"PLACEMENT_STRATEGY_SPREAD_JOB": 2,
}

func (x PlacementStrategy) String() string {
	return proto.EnumName(PlacementStrategy_name, int32(x))
}

func (PlacementStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{1}
}

//*
//  Runtime states of a Job
type JobState int32

const (
	// Reserved for future compatibility of new states.
	JobState_UNKNOWN JobState = 0
	// The job has been initialized and persisted in DB.
	JobState_INITIALIZED JobState = 1
	// All tasks have been created and persisted in DB,
	// but no task is RUNNING yet.
	JobState_PENDING JobState = 2
	// Any of the tasks in the job is in RUNNING state.
	JobState_RUNNING JobState = 3
	// All tasks in the job are in SUCCEEDED state.
	JobState_SUCCEEDED JobState = 4
	// All tasks in the job are in terminated state and one or more
	// tasks is in FAILED state.
	JobState_FAILED JobState = 5
	// All tasks in the job are in terminated state and one or more
	// tasks in the job is killed by the user.
	JobState_KILLED JobState = 6
	// All tasks in the job have been requested to be killed by the user.
	JobState_KILLING JobState = 7
	// The job is partially created and is not ready to be scheduled
	JobState_UNINITIALIZED JobState = 8
	// The job has been deleted.
	JobState_DELETED JobState = 9
)

var JobState_name = map[int32]string{
	0: "UNKNOWN",
	1: "INITIALIZED",
	2: "PENDING",
	3: "RUNNING",
	4: "SUCCEEDED",
	5: "FAILED",
	6: "KILLED",
	7: "KILLING",
	8: "UNINITIALIZED",
	9: "DELETED",
}

var JobState_value = map[string]int32{
	"UNKNOWN":       0,
	"INITIALIZED":   1,
	"PENDING":       2,
	"RUNNING":       3,
	"SUCCEEDED":     4,
	"FAILED":        5,
	"KILLED":        6,
	"KILLING":       7,
	"UNINITIALIZED": 8,
	"DELETED":       9,
}

func (x JobState) String() string {
	return proto.EnumName(JobState_name, int32(x))
}

func (JobState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{2}
}

//*
//  SLA configuration for a job
type SlaConfig struct {
	//
	// Priority of a job. Higher value takes priority over lower value
	// when making scheduling decisions as well as preemption decisions
	//
	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	//
	// Whether the job instances are preemptible. If so, it might
	// be scheduled using revocable offers
	//
	Preemptible bool `protobuf:"varint,2,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
	//
	// Whether the job instances are revocable. If so, it might
	// be scheduled using revocable resources and subject to preemption
	// when other jobs reclaims those resources.
	//
	Revocable bool `protobuf:"varint,3,opt,name=revocable,proto3" json:"revocable,omitempty"`
	//
	// Maximum number of instances to admit and run at any point in time.
	// If specified, should be <= instanceCount and >= minimumRunningInstances;
	// default value is instanceCount.
	//
	MaximumRunningInstances uint32 `protobuf:"varint,4,opt,name=maximumRunningInstances,proto3" json:"maximumRunningInstances,omitempty"`
	//
	// Minimum number of instances to admit and run at any point in time.
	// If specified, should be <= maximumRunningInstances <= instanceCount;
	// default value is 1.  Admission requires the corresponding resource pool
	// has enough reserved resources for the full set of minimum number of instances.
	//
	MinimumRunningInstances uint32 `protobuf:"varint,5,opt,name=minimumRunningInstances,proto3" json:"minimumRunningInstances,omitempty"`
	//
	// maxRunningTime represents the max time which all tasks of this job
	// can run. This timer starts when the task enters into running state.
	// if the tasks of this job exceeds this run time then they will be killed
	MaxRunningTime uint32 `protobuf:"varint,6,opt,name=maxRunningTime,proto3" json:"maxRunningTime,omitempty"`
	//
	// Maximum number of job instances which can be unavailable at a given time.
	MaximumUnavailableInstances uint32   `protobuf:"varint,7,opt,name=maximumUnavailableInstances,proto3" json:"maximumUnavailableInstances,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *SlaConfig) Reset()         { *m = SlaConfig{} }
func (m *SlaConfig) String() string { return proto.CompactTextString(m) }
func (*SlaConfig) ProtoMessage()    {}
func (*SlaConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{0}
}

func (m *SlaConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlaConfig.Unmarshal(m, b)
}
func (m *SlaConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlaConfig.Marshal(b, m, deterministic)
}
func (m *SlaConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaConfig.Merge(m, src)
}
func (m *SlaConfig) XXX_Size() int {
	return xxx_messageInfo_SlaConfig.Size(m)
}
func (m *SlaConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SlaConfig proto.InternalMessageInfo

func (m *SlaConfig) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SlaConfig) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

func (m *SlaConfig) GetRevocable() bool {
	if m != nil {
		return m.Revocable
	}
	return false
}

func (m *SlaConfig) GetMaximumRunningInstances() uint32 {
	if m != nil {
		return m.MaximumRunningInstances
	}
	return 0
}

func (m *SlaConfig) GetMinimumRunningInstances() uint32 {
	if m != nil {
		return m.MinimumRunningInstances
	}
	return 0
}

func (m *SlaConfig) GetMaxRunningTime() uint32 {
	if m != nil {
		return m.MaxRunningTime
	}
	return 0
}

func (m *SlaConfig) GetMaximumUnavailableInstances() uint32 {
	if m != nil {
		return m.MaximumUnavailableInstances
	}
	return 0
}

//*
//  Job configuration
type JobConfig struct {
	// Change log entry of the job config
	ChangeLog *peloton.ChangeLog `protobuf:"bytes,1,opt,name=changeLog,proto3" json:"changeLog,omitempty"`
	// Name of the job
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the job
	Type JobType `protobuf:"varint,3,opt,name=type,proto3,enum=peloton.api.v0.job.JobType" json:"type,omitempty"`
	// Owning team of the job
	OwningTeam string `protobuf:"bytes,4,opt,name=owningTeam,proto3" json:"owningTeam,omitempty"`
	// LDAP groups of the job
	LdapGroups []string `protobuf:"bytes,5,rep,name=ldapGroups,proto3" json:"ldapGroups,omitempty"`
	// Description of the job
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// List of user-defined labels for the job
	Labels []*peloton.Label `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	// Number of instances of the job
	InstanceCount uint32 `protobuf:"varint,8,opt,name=instanceCount,proto3" json:"instanceCount,omitempty"`
	// SLA config of the job
	SLA *SlaConfig `protobuf:"bytes,9,opt,name=sla,proto3" json:"sla,omitempty"`
	// Default task configuration of the job
	DefaultConfig *task.TaskConfig `protobuf:"bytes,10,opt,name=defaultConfig,proto3" json:"defaultConfig,omitempty"`
	// Instance specific task config which overwrites the default one
	InstanceConfig map[uint32]*task.TaskConfig `protobuf:"bytes,11,rep,name=instanceConfig,proto3" json:"instanceConfig,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Resource Pool ID where this job belongs to
	RespoolID *peloton.ResourcePoolID `protobuf:"bytes,12,opt,name=respoolID,proto3" json:"respoolID,omitempty"`
	// Owner of the job
	Owner string `protobuf:"bytes,13,opt,name=owner,proto3" json:"owner,omitempty"`
	// Preference for placing tasks of the job on hosts.
	PlacementStrategy    PlacementStrategy `protobuf:"varint,14,opt,name=placementStrategy,proto3,enum=peloton.api.v0.job.PlacementStrategy" json:"placementStrategy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JobConfig) Reset()         { *m = JobConfig{} }
func (m *JobConfig) String() string { return proto.CompactTextString(m) }
func (*JobConfig) ProtoMessage()    {}
func (*JobConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{1}
}

func (m *JobConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobConfig.Unmarshal(m, b)
}
func (m *JobConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobConfig.Marshal(b, m, deterministic)
}
func (m *JobConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobConfig.Merge(m, src)
}
func (m *JobConfig) XXX_Size() int {
	return xxx_messageInfo_JobConfig.Size(m)
}
func (m *JobConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_JobConfig.DiscardUnknown(m)
}

var xxx_messageInfo_JobConfig proto.InternalMessageInfo

func (m *JobConfig) GetChangeLog() *peloton.ChangeLog {
	if m != nil {
		return m.ChangeLog
	}
	return nil
}

func (m *JobConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobConfig) GetType() JobType {
	if m != nil {
		return m.Type
	}
	return JobType_BATCH
}

func (m *JobConfig) GetOwningTeam() string {
	if m != nil {
		return m.OwningTeam
	}
	return ""
}

func (m *JobConfig) GetLdapGroups() []string {
	if m != nil {
		return m.LdapGroups
	}
	return nil
}

func (m *JobConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *JobConfig) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *JobConfig) GetInstanceCount() uint32 {
	if m != nil {
		return m.InstanceCount
	}
	return 0
}

func (m *JobConfig) GetSLA() *SlaConfig {
	if m != nil {
		return m.SLA
	}
	return nil
}

func (m *JobConfig) GetDefaultConfig() *task.TaskConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func (m *JobConfig) GetInstanceConfig() map[uint32]*task.TaskConfig {
	if m != nil {
		return m.InstanceConfig
	}
	return nil
}

func (m *JobConfig) GetRespoolID() *peloton.ResourcePoolID {
	if m != nil {
		return m.RespoolID
	}
	return nil
}

func (m *JobConfig) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *JobConfig) GetPlacementStrategy() PlacementStrategy {
	if m != nil {
		return m.PlacementStrategy
	}
	return PlacementStrategy_PLACEMENT_STRATEGY_INVALID
}

//*
//  Job RuntimeInfo provides the current runtime status of a Job
type RuntimeInfo struct {
	// State of the job
	State JobState `protobuf:"varint,1,opt,name=state,proto3,enum=peloton.api.v0.job.JobState" json:"state,omitempty"`
	// The time when the job was created. The time is represented in
	// RFC3339 form with UTC timezone.
	CreationTime string `protobuf:"bytes,2,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	// The time when the first task of the job starts to run. The time
	// is represented in RFC3339 form with UTC timezone.
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// The time when the last task of the job is completed. The time is
	// represented in RFC3339 form with UTC timezone.
	CompletionTime string `protobuf:"bytes,4,opt,name=completionTime,proto3" json:"completionTime,omitempty"`
	// The number of tasks grouped by each task state. The map key is
	// the task.TaskState in string format and the map value is the number
	// of tasks in the particular state.
	TaskStats map[string]uint32 `protobuf:"bytes,5,rep,name=taskStats,proto3" json:"taskStats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// This field is being deprecated and should not be used.
	ConfigVersion int64 `protobuf:"varint,6,opt,name=configVersion,proto3" json:"configVersion,omitempty"`
	// Goal state of the job.
	GoalState JobState `protobuf:"varint,7,opt,name=goalState,proto3,enum=peloton.api.v0.job.JobState" json:"goalState,omitempty"`
	// The version reflects the version of the JobConfig, that is currently
	// used by the job.
	ConfigurationVersion uint64 `protobuf:"varint,8,opt,name=configurationVersion,proto3" json:"configurationVersion,omitempty"`
	// Changelog entry to version the job runtime.
	Revision *peloton.ChangeLog `protobuf:"bytes,9,opt,name=revision,proto3" json:"revision,omitempty"`
	// The identifier of the current job update.
	// If the field is set to nil, it implies that the job
	// has no current running job update.
	UpdateID *peloton.UpdateID `protobuf:"bytes,10,opt,name=updateID,proto3" json:"updateID,omitempty"`
	// The resource usage for this job. The map key is each resource kind
	// in string format and the map value is the number of unit-seconds
	// of that resource used by the job. Example: if a job has one task that
	// uses 1 CPU and finishes in 10 seconds, this map will contain <"cpu":10>
	ResourceUsage map[string]float64 `protobuf:"bytes,11,rep,name=resourceUsage,proto3" json:"resourceUsage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// The version reflects the version of the workflow, it is an opaque value
	// which is used internally only
	WorkflowVersion uint64 `protobuf:"varint,12,opt,name=workflowVersion,proto3" json:"workflowVersion,omitempty"`
	// The state version currently used by the runtime.
	StateVersion uint64 `protobuf:"varint,13,opt,name=stateVersion,proto3" json:"stateVersion,omitempty"`
	// The desired state version that should be used by the runtime.
	DesiredStateVersion uint64 `protobuf:"varint,14,opt,name=desiredStateVersion,proto3" json:"desiredStateVersion,omitempty"`
	// DEPRECATED, will remove in the next release
	// The number of tasks grouped by which configuration version they are on.
	// The map key is the job configuration version and the map value is the
	// number of tasks using that particular job configuration version.
	TaskConfigVersionStats map[uint64]uint32 `protobuf:"bytes,15,rep,name=taskConfigVersionStats,proto3" json:"taskConfigVersionStats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The number of tasks grouped by which configuration version and the state
	// they are on.
	// The map key is the job configuration version and the map value is TaskStateStats.
	TaskStatsByConfigurationVersion map[uint64]*RuntimeInfo_TaskStateStats `protobuf:"bytes,16,rep,name=taskStatsByConfigurationVersion,proto3" json:"taskStatsByConfigurationVersion,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral            struct{}                               `json:"-"`
	XXX_unrecognized                []byte                                 `json:"-"`
	XXX_sizecache                   int32                                  `json:"-"`
}

func (m *RuntimeInfo) Reset()         { *m = RuntimeInfo{} }
func (m *RuntimeInfo) String() string { return proto.CompactTextString(m) }
func (*RuntimeInfo) ProtoMessage()    {}
func (*RuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{2}
}

func (m *RuntimeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuntimeInfo.Unmarshal(m, b)
}
func (m *RuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuntimeInfo.Marshal(b, m, deterministic)
}
func (m *RuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeInfo.Merge(m, src)
}
func (m *RuntimeInfo) XXX_Size() int {
	return xxx_messageInfo_RuntimeInfo.Size(m)
}
func (m *RuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeInfo proto.InternalMessageInfo

func (m *RuntimeInfo) GetState() JobState {
	if m != nil {
		return m.State
	}
	return JobState_UNKNOWN
}

func (m *RuntimeInfo) GetCreationTime() string {
	if m != nil {
		return m.CreationTime
	}
	return ""
}

func (m *RuntimeInfo) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RuntimeInfo) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *RuntimeInfo) GetTaskStats() map[string]uint32 {
	if m != nil {
		return m.TaskStats
	}
	return nil
}

func (m *RuntimeInfo) GetConfigVersion() int64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *RuntimeInfo) GetGoalState() JobState {
	if m != nil {
		return m.GoalState
	}
	return JobState_UNKNOWN
}

func (m *RuntimeInfo) GetConfigurationVersion() uint64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RuntimeInfo) GetRevision() *peloton.ChangeLog {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *RuntimeInfo) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

func (m *RuntimeInfo) GetResourceUsage() map[string]float64 {
	if m != nil {
		return m.ResourceUsage
	}
	return nil
}

func (m *RuntimeInfo) GetWorkflowVersion() uint64 {
	if m != nil {
		return m.WorkflowVersion
	}
	return 0
}

func (m *RuntimeInfo) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *RuntimeInfo) GetDesiredStateVersion() uint64 {
	if m != nil {
		return m.DesiredStateVersion
	}
	return 0
}

func (m *RuntimeInfo) GetTaskConfigVersionStats() map[uint64]uint32 {
	if m != nil {
		return m.TaskConfigVersionStats
	}
	return nil
}

func (m *RuntimeInfo) GetTaskStatsByConfigurationVersion() map[uint64]*RuntimeInfo_TaskStateStats {
	if m != nil {
		return m.TaskStatsByConfigurationVersion
	}
	return nil
}

//*
// TaskStateStats indicates the number of tasks of a particular state
// in a job
type RuntimeInfo_TaskStateStats struct {
	// The map key is task state, the value
	// is number of tasks running in that state.
	StateStats           map[string]uint32 `protobuf:"bytes,1,rep,name=stateStats,proto3" json:"stateStats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RuntimeInfo_TaskStateStats) Reset()         { *m = RuntimeInfo_TaskStateStats{} }
func (m *RuntimeInfo_TaskStateStats) String() string { return proto.CompactTextString(m) }
func (*RuntimeInfo_TaskStateStats) ProtoMessage()    {}
func (*RuntimeInfo_TaskStateStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{2, 0}
}

func (m *RuntimeInfo_TaskStateStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuntimeInfo_TaskStateStats.Unmarshal(m, b)
}
func (m *RuntimeInfo_TaskStateStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuntimeInfo_TaskStateStats.Marshal(b, m, deterministic)
}
func (m *RuntimeInfo_TaskStateStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeInfo_TaskStateStats.Merge(m, src)
}
func (m *RuntimeInfo_TaskStateStats) XXX_Size() int {
	return xxx_messageInfo_RuntimeInfo_TaskStateStats.Size(m)
}
func (m *RuntimeInfo_TaskStateStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeInfo_TaskStateStats.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeInfo_TaskStateStats proto.InternalMessageInfo

func (m *RuntimeInfo_TaskStateStats) GetStateStats() map[string]uint32 {
	if m != nil {
		return m.StateStats
	}
	return nil
}

//*
//  Information of a job, such as job config and runtime
type JobInfo struct {
	// Job ID
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Job configuration
	Config *JobConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Job runtime information
	Runtime              *RuntimeInfo `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *JobInfo) Reset()         { *m = JobInfo{} }
func (m *JobInfo) String() string { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()    {}
func (*JobInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{3}
}

func (m *JobInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobInfo.Unmarshal(m, b)
}
func (m *JobInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobInfo.Marshal(b, m, deterministic)
}
func (m *JobInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfo.Merge(m, src)
}
func (m *JobInfo) XXX_Size() int {
	return xxx_messageInfo_JobInfo.Size(m)
}
func (m *JobInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfo proto.InternalMessageInfo

func (m *JobInfo) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *JobInfo) GetConfig() *JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *JobInfo) GetRuntime() *RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

//*
//  Summary of a job configuration and runtime.
//  Will be returned as part of Job Query API response.
type JobSummary struct {
	// Job ID
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the job
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the job
	Type JobType `protobuf:"varint,3,opt,name=type,proto3,enum=peloton.api.v0.job.JobType" json:"type,omitempty"`
	// Owner of the job
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// Owning team of the job
	OwningTeam string `protobuf:"bytes,5,opt,name=owningTeam,proto3" json:"owningTeam,omitempty"`
	// List of user-defined labels for the job
	Labels []*peloton.Label `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// Number of instances of the job
	InstanceCount uint32 `protobuf:"varint,7,opt,name=instanceCount,proto3" json:"instanceCount,omitempty"`
	// Resource Pool ID where this job belongs to
	RespoolID *peloton.ResourcePoolID `protobuf:"bytes,8,opt,name=respoolID,proto3" json:"respoolID,omitempty"`
	// Job runtime information
	Runtime *RuntimeInfo `protobuf:"bytes,9,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Job sla information
	SLA                  *SlaConfig `protobuf:"bytes,10,opt,name=sla,proto3" json:"sla,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *JobSummary) Reset()         { *m = JobSummary{} }
func (m *JobSummary) String() string { return proto.CompactTextString(m) }
func (*JobSummary) ProtoMessage()    {}
func (*JobSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{4}
}

func (m *JobSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobSummary.Unmarshal(m, b)
}
func (m *JobSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobSummary.Marshal(b, m, deterministic)
}
func (m *JobSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSummary.Merge(m, src)
}
func (m *JobSummary) XXX_Size() int {
	return xxx_messageInfo_JobSummary.Size(m)
}
func (m *JobSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSummary.DiscardUnknown(m)
}

var xxx_messageInfo_JobSummary proto.InternalMessageInfo

func (m *JobSummary) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *JobSummary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobSummary) GetType() JobType {
	if m != nil {
		return m.Type
	}
	return JobType_BATCH
}

func (m *JobSummary) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *JobSummary) GetOwningTeam() string {
	if m != nil {
		return m.OwningTeam
	}
	return ""
}

func (m *JobSummary) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *JobSummary) GetInstanceCount() uint32 {
	if m != nil {
		return m.InstanceCount
	}
	return 0
}

func (m *JobSummary) GetRespoolID() *peloton.ResourcePoolID {
	if m != nil {
		return m.RespoolID
	}
	return nil
}

func (m *JobSummary) GetRuntime() *RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *JobSummary) GetSLA() *SlaConfig {
	if m != nil {
		return m.SLA
	}
	return nil
}

//*
//  QuerySpec specifies the list of query criteria for jobs. All
//  indexed fields should be part of this message. And all fields
//  in this message have to be indexed too.
type QuerySpec struct {
	// DEPRECATED: use QueryJobRequest.pagination instead.
	// The spec of how to do pagination for the query results.
	Pagination *query.PaginationSpec `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// List of labels to query the jobs. Will match all jobs if the
	// list is empty.
	Labels []*peloton.Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// List of keywords to query the jobs. Will match all jobs if
	// the list is empty. When set, will do a wildcard match on
	// owner, name, labels, description.
	Keywords []string `protobuf:"bytes,3,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// List of job states to query the jobs. Will match all jobs if
	// the list is empty.
	JobStates []JobState `protobuf:"varint,4,rep,packed,name=jobStates,proto3,enum=peloton.api.v0.job.JobState" json:"jobStates,omitempty"`
	// DEPRECATED: this field is not used in the query and will be removed
	// The resource pool to query the jobs. Will match jobs from all
	// resource pools if unset.
	Respool *respool.ResourcePoolPath `protobuf:"bytes,5,opt,name=respool,proto3" json:"respool,omitempty"`
	// Query jobs by owner. This is case sensitive and will
	// look for jobs with owner matching the exact owner string.
	// Will match all jobs if owner is unset.
	Owner string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	// Query jobs by name. This is case sensitive and will
	// look for jobs with name matching the name string. Will
	// support partial name match. Will match all jobs if
	// name is unset.
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// Query jobs by creation time range. This will look for all jobs
	// that were created within a specified time range. This
	// search will operate based on job creation time.
	CreationTimeRange *peloton.TimeRange `protobuf:"bytes,8,opt,name=creationTimeRange,proto3" json:"creationTimeRange,omitempty"`
	// Query jobs by completion time range. This will look for all jobs
	// that were completed within a specified time range. This
	// search will operate based on job completion time.
	CompletionTimeRange  *peloton.TimeRange `protobuf:"bytes,9,opt,name=completionTimeRange,proto3" json:"completionTimeRange,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *QuerySpec) Reset()         { *m = QuerySpec{} }
func (m *QuerySpec) String() string { return proto.CompactTextString(m) }
func (*QuerySpec) ProtoMessage()    {}
func (*QuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{5}
}

func (m *QuerySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec.Unmarshal(m, b)
}
func (m *QuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec.Marshal(b, m, deterministic)
}
func (m *QuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec.Merge(m, src)
}
func (m *QuerySpec) XXX_Size() int {
	return xxx_messageInfo_QuerySpec.Size(m)
}
func (m *QuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec proto.InternalMessageInfo

func (m *QuerySpec) GetPagination() *query.PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QuerySpec) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *QuerySpec) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *QuerySpec) GetJobStates() []JobState {
	if m != nil {
		return m.JobStates
	}
	return nil
}

func (m *QuerySpec) GetRespool() *respool.ResourcePoolPath {
	if m != nil {
		return m.Respool
	}
	return nil
}

func (m *QuerySpec) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QuerySpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QuerySpec) GetCreationTimeRange() *peloton.TimeRange {
	if m != nil {
		return m.CreationTimeRange
	}
	return nil
}

func (m *QuerySpec) GetCompletionTimeRange() *peloton.TimeRange {
	if m != nil {
		return m.CompletionTimeRange
	}
	return nil
}

// DEPRECATED by google.rpc.ALREADY_EXISTS error
type JobAlreadyExists struct {
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *JobAlreadyExists) Reset()         { *m = JobAlreadyExists{} }
func (m *JobAlreadyExists) String() string { return proto.CompactTextString(m) }
func (*JobAlreadyExists) ProtoMessage()    {}
func (*JobAlreadyExists) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{6}
}

func (m *JobAlreadyExists) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobAlreadyExists.Unmarshal(m, b)
}
func (m *JobAlreadyExists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobAlreadyExists.Marshal(b, m, deterministic)
}
func (m *JobAlreadyExists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobAlreadyExists.Merge(m, src)
}
func (m *JobAlreadyExists) XXX_Size() int {
	return xxx_messageInfo_JobAlreadyExists.Size(m)
}
func (m *JobAlreadyExists) XXX_DiscardUnknown() {
	xxx_messageInfo_JobAlreadyExists.DiscardUnknown(m)
}

var xxx_messageInfo_JobAlreadyExists proto.InternalMessageInfo

func (m *JobAlreadyExists) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *JobAlreadyExists) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by google.rpc.NOT_FOUND error
type JobNotFound struct {
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *JobNotFound) Reset()         { *m = JobNotFound{} }
func (m *JobNotFound) String() string { return proto.CompactTextString(m) }
func (*JobNotFound) ProtoMessage()    {}
func (*JobNotFound) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{7}
}

func (m *JobNotFound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobNotFound.Unmarshal(m, b)
}
func (m *JobNotFound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobNotFound.Marshal(b, m, deterministic)
}
func (m *JobNotFound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobNotFound.Merge(m, src)
}
func (m *JobNotFound) XXX_Size() int {
	return xxx_messageInfo_JobNotFound.Size(m)
}
func (m *JobNotFound) XXX_DiscardUnknown() {
	xxx_messageInfo_JobNotFound.DiscardUnknown(m)
}

var xxx_messageInfo_JobNotFound proto.InternalMessageInfo

func (m *JobNotFound) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *JobNotFound) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by google.rpc.INVALID_ARGUMENT error
type InvalidJobId struct {
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InvalidJobId) Reset()         { *m = InvalidJobId{} }
func (m *InvalidJobId) String() string { return proto.CompactTextString(m) }
func (*InvalidJobId) ProtoMessage()    {}
func (*InvalidJobId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{8}
}

func (m *InvalidJobId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvalidJobId.Unmarshal(m, b)
}
func (m *InvalidJobId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvalidJobId.Marshal(b, m, deterministic)
}
func (m *InvalidJobId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidJobId.Merge(m, src)
}
func (m *InvalidJobId) XXX_Size() int {
	return xxx_messageInfo_InvalidJobId.Size(m)
}
func (m *InvalidJobId) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidJobId.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidJobId proto.InternalMessageInfo

func (m *InvalidJobId) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InvalidJobId) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by google.rpc.INVALID_ARGUMENT error
type InvalidJobConfig struct {
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InvalidJobConfig) Reset()         { *m = InvalidJobConfig{} }
func (m *InvalidJobConfig) String() string { return proto.CompactTextString(m) }
func (*InvalidJobConfig) ProtoMessage()    {}
func (*InvalidJobConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{9}
}

func (m *InvalidJobConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvalidJobConfig.Unmarshal(m, b)
}
func (m *InvalidJobConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvalidJobConfig.Marshal(b, m, deterministic)
}
func (m *InvalidJobConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidJobConfig.Merge(m, src)
}
func (m *InvalidJobConfig) XXX_Size() int {
	return xxx_messageInfo_InvalidJobConfig.Size(m)
}
func (m *InvalidJobConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidJobConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidJobConfig proto.InternalMessageInfo

func (m *InvalidJobConfig) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *InvalidJobConfig) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DEPRECATED by peloton.api.v0.job.svc.CreateJobRequest
type CreateRequest struct {
	Id     *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config *JobConfig     `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// The list of secrets for this job
	Secrets              []*peloton.Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{10}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CreateRequest) GetConfig() *JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CreateRequest) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.CreateJobResponse
type CreateResponse struct {
	Error                *CreateResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	JobId                *peloton.JobID        `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{11}
}

func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetError() *CreateResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CreateResponse) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

type CreateResponse_Error struct {
	AlreadyExists        *JobAlreadyExists `protobuf:"bytes,1,opt,name=alreadyExists,proto3" json:"alreadyExists,omitempty"`
	InvalidConfig        *InvalidJobConfig `protobuf:"bytes,2,opt,name=invalidConfig,proto3" json:"invalidConfig,omitempty"`
	InvalidJobId         *InvalidJobId     `protobuf:"bytes,3,opt,name=invalidJobId,proto3" json:"invalidJobId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateResponse_Error) Reset()         { *m = CreateResponse_Error{} }
func (m *CreateResponse_Error) String() string { return proto.CompactTextString(m) }
func (*CreateResponse_Error) ProtoMessage()    {}
func (*CreateResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{11, 0}
}

func (m *CreateResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse_Error.Unmarshal(m, b)
}
func (m *CreateResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse_Error.Marshal(b, m, deterministic)
}
func (m *CreateResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse_Error.Merge(m, src)
}
func (m *CreateResponse_Error) XXX_Size() int {
	return xxx_messageInfo_CreateResponse_Error.Size(m)
}
func (m *CreateResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse_Error proto.InternalMessageInfo

func (m *CreateResponse_Error) GetAlreadyExists() *JobAlreadyExists {
	if m != nil {
		return m.AlreadyExists
	}
	return nil
}

func (m *CreateResponse_Error) GetInvalidConfig() *InvalidJobConfig {
	if m != nil {
		return m.InvalidConfig
	}
	return nil
}

func (m *CreateResponse_Error) GetInvalidJobId() *InvalidJobId {
	if m != nil {
		return m.InvalidJobId
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.UpdateJobRequest
type UpdateRequest struct {
	Id     *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config *JobConfig     `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// The list of secrets for this job. This list should contain existing secret
	// IDs/paths with same or new data. It may also contain additional secrets.
	Secrets              []*peloton.Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{12}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UpdateRequest) GetConfig() *JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateRequest) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.UpdateJobResponse
type UpdateResponse struct {
	Error                *UpdateResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Id                   *peloton.JobID        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Message              string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{13}
}

func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetError() *UpdateResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *UpdateResponse) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateResponse_Error struct {
	JobNotFound          *JobNotFound      `protobuf:"bytes,1,opt,name=jobNotFound,proto3" json:"jobNotFound,omitempty"`
	InvalidConfig        *InvalidJobConfig `protobuf:"bytes,2,opt,name=invalidConfig,proto3" json:"invalidConfig,omitempty"`
	InvalidJobId         *InvalidJobId     `protobuf:"bytes,3,opt,name=invalidJobId,proto3" json:"invalidJobId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateResponse_Error) Reset()         { *m = UpdateResponse_Error{} }
func (m *UpdateResponse_Error) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse_Error) ProtoMessage()    {}
func (*UpdateResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{13, 0}
}

func (m *UpdateResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse_Error.Unmarshal(m, b)
}
func (m *UpdateResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse_Error.Marshal(b, m, deterministic)
}
func (m *UpdateResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse_Error.Merge(m, src)
}
func (m *UpdateResponse_Error) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse_Error.Size(m)
}
func (m *UpdateResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse_Error proto.InternalMessageInfo

func (m *UpdateResponse_Error) GetJobNotFound() *JobNotFound {
	if m != nil {
		return m.JobNotFound
	}
	return nil
}

func (m *UpdateResponse_Error) GetInvalidConfig() *InvalidJobConfig {
	if m != nil {
		return m.InvalidConfig
	}
	return nil
}

func (m *UpdateResponse_Error) GetInvalidJobId() *InvalidJobId {
	if m != nil {
		return m.InvalidJobId
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.GetJobRequest
type GetRequest struct {
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{14}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.GetJobResponse
type GetResponse struct {
	Error   *GetResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	JobInfo *JobInfo           `protobuf:"bytes,2,opt,name=jobInfo,proto3" json:"jobInfo,omitempty"`
	//
	//The list of secrets for this job, secret.Value will be empty.
	//SecretID and path will be populated, so that caller
	//can identify which secret is associated with this job.
	Secrets              []*peloton.Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{15}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetError() *GetResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetResponse) GetJobInfo() *JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

func (m *GetResponse) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type GetResponse_Error struct {
	NotFound             *errors.JobNotFound       `protobuf:"bytes,1,opt,name=notFound,proto3" json:"notFound,omitempty"`
	GetRuntimeFail       *errors.JobGetRuntimeFail `protobuf:"bytes,2,opt,name=getRuntimeFail,proto3" json:"getRuntimeFail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetResponse_Error) Reset()         { *m = GetResponse_Error{} }
func (m *GetResponse_Error) String() string { return proto.CompactTextString(m) }
func (*GetResponse_Error) ProtoMessage()    {}
func (*GetResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{15, 0}
}

func (m *GetResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse_Error.Unmarshal(m, b)
}
func (m *GetResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse_Error.Marshal(b, m, deterministic)
}
func (m *GetResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse_Error.Merge(m, src)
}
func (m *GetResponse_Error) XXX_Size() int {
	return xxx_messageInfo_GetResponse_Error.Size(m)
}
func (m *GetResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse_Error proto.InternalMessageInfo

func (m *GetResponse_Error) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

func (m *GetResponse_Error) GetGetRuntimeFail() *errors.JobGetRuntimeFail {
	if m != nil {
		return m.GetRuntimeFail
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.QueryJobsRequest
type QueryRequest struct {
	RespoolID *peloton.ResourcePoolID `protobuf:"bytes,1,opt,name=respoolID,proto3" json:"respoolID,omitempty"`
	// Per instance configuration in the job configuration cannot be  queried.
	Spec *QuerySpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Only return the job summary in the query response
	// If set, JobInfo in QueryResponse would be set to nil
	// and only JobSummary in QueryResponse would be populated.
	SummaryOnly          bool     `protobuf:"varint,3,opt,name=summaryOnly,proto3" json:"summaryOnly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{16}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetRespoolID() *peloton.ResourcePoolID {
	if m != nil {
		return m.RespoolID
	}
	return nil
}

func (m *QueryRequest) GetSpec() *QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QueryRequest) GetSummaryOnly() bool {
	if m != nil {
		return m.SummaryOnly
	}
	return false
}

// DEPRECATED by peloton.api.v0.job.svc.QueryJobsResponse
type QueryResponse struct {
	Error *QueryResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// DEPRECATED by peloton.api.v0.job.JobSummary
	// JobInfo is huge and there is no need to return it in QueryResponse.
	// NOTE: instanceConfig is not returned as part of jobConfig inside jobInfo
	// as it can be so huge that exceeds grpc limit size. Use Job.Get() API to get
	// instanceConfig for job.
	Records    []*JobInfo        `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	Pagination *query.Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The query spec from the request
	Spec *QuerySpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Job summary
	Results              []*JobSummary `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{17}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetError() *QueryResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryResponse) GetRecords() []*JobInfo {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryResponse) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryResponse) GetSpec() *QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QueryResponse) GetResults() []*JobSummary {
	if m != nil {
		return m.Results
	}
	return nil
}

type QueryResponse_Error struct {
	Err                  *errors.UnknownError   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	InvalidRespool       *errors.InvalidRespool `protobuf:"bytes,2,opt,name=invalidRespool,proto3" json:"invalidRespool,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *QueryResponse_Error) Reset()         { *m = QueryResponse_Error{} }
func (m *QueryResponse_Error) String() string { return proto.CompactTextString(m) }
func (*QueryResponse_Error) ProtoMessage()    {}
func (*QueryResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{17, 0}
}

func (m *QueryResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse_Error.Unmarshal(m, b)
}
func (m *QueryResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse_Error.Marshal(b, m, deterministic)
}
func (m *QueryResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse_Error.Merge(m, src)
}
func (m *QueryResponse_Error) XXX_Size() int {
	return xxx_messageInfo_QueryResponse_Error.Size(m)
}
func (m *QueryResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse_Error proto.InternalMessageInfo

func (m *QueryResponse_Error) GetErr() *errors.UnknownError {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *QueryResponse_Error) GetInvalidRespool() *errors.InvalidRespool {
	if m != nil {
		return m.InvalidRespool
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.DeleteRequest
type DeleteRequest struct {
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{18}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.DeleteResponse
type DeleteResponse struct {
	Error                *DeleteResponse_Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{19}
}

func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResponse.Unmarshal(m, b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteResponse.Size(m)
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetError() *DeleteResponse_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DeleteResponse_Error struct {
	NotFound             *errors.JobNotFound `protobuf:"bytes,1,opt,name=notFound,proto3" json:"notFound,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DeleteResponse_Error) Reset()         { *m = DeleteResponse_Error{} }
func (m *DeleteResponse_Error) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse_Error) ProtoMessage()    {}
func (*DeleteResponse_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{19, 0}
}

func (m *DeleteResponse_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResponse_Error.Unmarshal(m, b)
}
func (m *DeleteResponse_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResponse_Error.Marshal(b, m, deterministic)
}
func (m *DeleteResponse_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse_Error.Merge(m, src)
}
func (m *DeleteResponse_Error) XXX_Size() int {
	return xxx_messageInfo_DeleteResponse_Error.Size(m)
}
func (m *DeleteResponse_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse_Error.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse_Error proto.InternalMessageInfo

func (m *DeleteResponse_Error) GetNotFound() *errors.JobNotFound {
	if m != nil {
		return m.NotFound
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.RefreshJobRequest
type RefreshRequest struct {
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RefreshRequest) Reset()         { *m = RefreshRequest{} }
func (m *RefreshRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshRequest) ProtoMessage()    {}
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{20}
}

func (m *RefreshRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshRequest.Unmarshal(m, b)
}
func (m *RefreshRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshRequest.Marshal(b, m, deterministic)
}
func (m *RefreshRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshRequest.Merge(m, src)
}
func (m *RefreshRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshRequest.Size(m)
}
func (m *RefreshRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshRequest proto.InternalMessageInfo

func (m *RefreshRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

// DEPRECATED by peloton.api.v0.job.svc.RefreshJobResponse
type RefreshResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshResponse) Reset()         { *m = RefreshResponse{} }
func (m *RefreshResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshResponse) ProtoMessage()    {}
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{21}
}

func (m *RefreshResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshResponse.Unmarshal(m, b)
}
func (m *RefreshResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshResponse.Marshal(b, m, deterministic)
}
func (m *RefreshResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshResponse.Merge(m, src)
}
func (m *RefreshResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshResponse.Size(m)
}
func (m *RefreshResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshResponse proto.InternalMessageInfo

// DEPRECATED by peloton.api.job.svc.GetJobCacheRequest
type GetCacheRequest struct {
	// The job ID to look up the job.
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetCacheRequest) Reset()         { *m = GetCacheRequest{} }
func (m *GetCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetCacheRequest) ProtoMessage()    {}
func (*GetCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{22}
}

func (m *GetCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCacheRequest.Unmarshal(m, b)
}
func (m *GetCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheRequest.Merge(m, src)
}
func (m *GetCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetCacheRequest.Size(m)
}
func (m *GetCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheRequest proto.InternalMessageInfo

func (m *GetCacheRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.GetJobCacheResponse
type GetCacheResponse struct {
	// The job configuration in cache of the matching job.
	Config *JobConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The job runtime in cache of the matching job.
	Runtime              *RuntimeInfo `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetCacheResponse) Reset()         { *m = GetCacheResponse{} }
func (m *GetCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetCacheResponse) ProtoMessage()    {}
func (*GetCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{23}
}

func (m *GetCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCacheResponse.Unmarshal(m, b)
}
func (m *GetCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheResponse.Merge(m, src)
}
func (m *GetCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetCacheResponse.Size(m)
}
func (m *GetCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheResponse proto.InternalMessageInfo

func (m *GetCacheResponse) GetConfig() *JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GetCacheResponse) GetRuntime() *RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.GetActiveJobsRequest
type GetActiveJobsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetActiveJobsRequest) Reset()         { *m = GetActiveJobsRequest{} }
func (m *GetActiveJobsRequest) String() string { return proto.CompactTextString(m) }
func (*GetActiveJobsRequest) ProtoMessage()    {}
func (*GetActiveJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{24}
}

func (m *GetActiveJobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetActiveJobsRequest.Unmarshal(m, b)
}
func (m *GetActiveJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetActiveJobsRequest.Marshal(b, m, deterministic)
}
func (m *GetActiveJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveJobsRequest.Merge(m, src)
}
func (m *GetActiveJobsRequest) XXX_Size() int {
	return xxx_messageInfo_GetActiveJobsRequest.Size(m)
}
func (m *GetActiveJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveJobsRequest proto.InternalMessageInfo

// DEPRECATED by peloton.api.job.svc.GetActiveJobsResponse
type GetActiveJobsResponse struct {
	// List of Active Job IDs
	Ids                  []*peloton.JobID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetActiveJobsResponse) Reset()         { *m = GetActiveJobsResponse{} }
func (m *GetActiveJobsResponse) String() string { return proto.CompactTextString(m) }
func (*GetActiveJobsResponse) ProtoMessage()    {}
func (*GetActiveJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{25}
}

func (m *GetActiveJobsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetActiveJobsResponse.Unmarshal(m, b)
}
func (m *GetActiveJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetActiveJobsResponse.Marshal(b, m, deterministic)
}
func (m *GetActiveJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveJobsResponse.Merge(m, src)
}
func (m *GetActiveJobsResponse) XXX_Size() int {
	return xxx_messageInfo_GetActiveJobsResponse.Size(m)
}
func (m *GetActiveJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveJobsResponse proto.InternalMessageInfo

func (m *GetActiveJobsResponse) GetIds() []*peloton.JobID {
	if m != nil {
		return m.Ids
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.RestartConfig
// Experimental only
type RestartConfig struct {
	// batch size of rolling restart, if unset all tasks specified
	// will be restarted at the same time.
	BatchSize            uint32   `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartConfig) Reset()         { *m = RestartConfig{} }
func (m *RestartConfig) String() string { return proto.CompactTextString(m) }
func (*RestartConfig) ProtoMessage()    {}
func (*RestartConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{26}
}

func (m *RestartConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartConfig.Unmarshal(m, b)
}
func (m *RestartConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartConfig.Marshal(b, m, deterministic)
}
func (m *RestartConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartConfig.Merge(m, src)
}
func (m *RestartConfig) XXX_Size() int {
	return xxx_messageInfo_RestartConfig.Size(m)
}
func (m *RestartConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RestartConfig proto.InternalMessageInfo

func (m *RestartConfig) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

// DEPRECATED by peloton.api.job.svc.RestartJobRequest
// Experimental only
type RestartRequest struct {
	// The job to restart
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instances to restart, default to all
	Ranges []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// The resourceVersion received from last job operation
	// call for concurrency control
	ResourceVersion uint64 `protobuf:"varint,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The config for restarting a job
	RestartConfig        *RestartConfig `protobuf:"bytes,4,opt,name=restartConfig,proto3" json:"restartConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RestartRequest) Reset()         { *m = RestartRequest{} }
func (m *RestartRequest) String() string { return proto.CompactTextString(m) }
func (*RestartRequest) ProtoMessage()    {}
func (*RestartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{27}
}

func (m *RestartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartRequest.Unmarshal(m, b)
}
func (m *RestartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartRequest.Marshal(b, m, deterministic)
}
func (m *RestartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartRequest.Merge(m, src)
}
func (m *RestartRequest) XXX_Size() int {
	return xxx_messageInfo_RestartRequest.Size(m)
}
func (m *RestartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartRequest proto.InternalMessageInfo

func (m *RestartRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RestartRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *RestartRequest) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *RestartRequest) GetRestartConfig() *RestartConfig {
	if m != nil {
		return m.RestartConfig
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.RestartJobResponse
// Experimental only
type RestartResponse struct {
	// The new resourceVersion after the operation
	ResourceVersion uint64 `protobuf:"varint,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// updateID associated with the restart
	UpdateID             *peloton.UpdateID `protobuf:"bytes,2,opt,name=updateID,proto3" json:"updateID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RestartResponse) Reset()         { *m = RestartResponse{} }
func (m *RestartResponse) String() string { return proto.CompactTextString(m) }
func (*RestartResponse) ProtoMessage()    {}
func (*RestartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{28}
}

func (m *RestartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartResponse.Unmarshal(m, b)
}
func (m *RestartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartResponse.Marshal(b, m, deterministic)
}
func (m *RestartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartResponse.Merge(m, src)
}
func (m *RestartResponse) XXX_Size() int {
	return xxx_messageInfo_RestartResponse.Size(m)
}
func (m *RestartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestartResponse proto.InternalMessageInfo

func (m *RestartResponse) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *RestartResponse) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.StartConfig
// Experimental only
type StartConfig struct {
	// batch size of rolling start, if unset all tasks specified
	// will be started at the same time.
	BatchSize            uint32   `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartConfig) Reset()         { *m = StartConfig{} }
func (m *StartConfig) String() string { return proto.CompactTextString(m) }
func (*StartConfig) ProtoMessage()    {}
func (*StartConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{29}
}

func (m *StartConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartConfig.Unmarshal(m, b)
}
func (m *StartConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartConfig.Marshal(b, m, deterministic)
}
func (m *StartConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartConfig.Merge(m, src)
}
func (m *StartConfig) XXX_Size() int {
	return xxx_messageInfo_StartConfig.Size(m)
}
func (m *StartConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StartConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StartConfig proto.InternalMessageInfo

func (m *StartConfig) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

// DEPRECATED by peloton.api.job.svc.StartJobRequest
// Experimental only
type StartRequest struct {
	// The job to start
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instances to start, default to all
	Ranges []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// The resourceVersion received from last job operation
	// call for concurrency control
	ResourceVersion uint64 `protobuf:"varint,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The config for starting a job
	StartConfig          *StartConfig `protobuf:"bytes,4,opt,name=startConfig,proto3" json:"startConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StartRequest) Reset()         { *m = StartRequest{} }
func (m *StartRequest) String() string { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()    {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{30}
}

func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRequest.Unmarshal(m, b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return xxx_messageInfo_StartRequest.Size(m)
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

func (m *StartRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StartRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *StartRequest) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StartRequest) GetStartConfig() *StartConfig {
	if m != nil {
		return m.StartConfig
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.StartJobResponse
// Experimental only
type StartResponse struct {
	// The new resourceVersion after the operation
	ResourceVersion uint64 `protobuf:"varint,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// updateID associated with the start
	UpdateID             *peloton.UpdateID `protobuf:"bytes,2,opt,name=updateID,proto3" json:"updateID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{31}
}

func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse.Unmarshal(m, b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return xxx_messageInfo_StartResponse.Size(m)
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

func (m *StartResponse) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StartResponse) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.StopConfig
// Experimental only
type StopConfig struct {
	// batch size of rolling stop, if unset all tasks specified
	// will be restarted at the same time.
	BatchSize            uint32   `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopConfig) Reset()         { *m = StopConfig{} }
func (m *StopConfig) String() string { return proto.CompactTextString(m) }
func (*StopConfig) ProtoMessage()    {}
func (*StopConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{32}
}

func (m *StopConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopConfig.Unmarshal(m, b)
}
func (m *StopConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopConfig.Marshal(b, m, deterministic)
}
func (m *StopConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopConfig.Merge(m, src)
}
func (m *StopConfig) XXX_Size() int {
	return xxx_messageInfo_StopConfig.Size(m)
}
func (m *StopConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StopConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StopConfig proto.InternalMessageInfo

func (m *StopConfig) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

// DEPRECATED by peloton.api.job.svc.StopJobRequest
// Experimental only
type StopRequest struct {
	// The job to restart
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instances to restart, default to all
	Ranges []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// The resourceVersion received from last job operation
	// call for concurrency control
	ResourceVersion uint64 `protobuf:"varint,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The config for stopping a job
	StopConfig           *StopConfig `protobuf:"bytes,4,opt,name=stopConfig,proto3" json:"stopConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StopRequest) Reset()         { *m = StopRequest{} }
func (m *StopRequest) String() string { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()    {}
func (*StopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{33}
}

func (m *StopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRequest.Unmarshal(m, b)
}
func (m *StopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRequest.Marshal(b, m, deterministic)
}
func (m *StopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRequest.Merge(m, src)
}
func (m *StopRequest) XXX_Size() int {
	return xxx_messageInfo_StopRequest.Size(m)
}
func (m *StopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRequest proto.InternalMessageInfo

func (m *StopRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StopRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *StopRequest) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StopRequest) GetStopConfig() *StopConfig {
	if m != nil {
		return m.StopConfig
	}
	return nil
}

// DEPRECATED by peloton.api.job.svc.StopJobResponse
// Experimental only
type StopResponse struct {
	// The new resourceVersion after the operation
	ResourceVersion uint64 `protobuf:"varint,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// updateID associated with the stop
	UpdateID             *peloton.UpdateID `protobuf:"bytes,2,opt,name=updateID,proto3" json:"updateID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StopResponse) Reset()         { *m = StopResponse{} }
func (m *StopResponse) String() string { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()    {}
func (*StopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b745a1c4877f5d97, []int{34}
}

func (m *StopResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopResponse.Unmarshal(m, b)
}
func (m *StopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopResponse.Marshal(b, m, deterministic)
}
func (m *StopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopResponse.Merge(m, src)
}
func (m *StopResponse) XXX_Size() int {
	return xxx_messageInfo_StopResponse.Size(m)
}
func (m *StopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopResponse proto.InternalMessageInfo

func (m *StopResponse) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StopResponse) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

func init() {
	proto.RegisterEnum("peloton.api.v0.job.JobType", JobType_name, JobType_value)
	proto.RegisterEnum("peloton.api.v0.job.PlacementStrategy", PlacementStrategy_name, PlacementStrategy_value)
	proto.RegisterEnum("peloton.api.v0.job.JobState", JobState_name, JobState_value)
	proto.RegisterType((*SlaConfig)(nil), "peloton.api.v0.job.SlaConfig")
	proto.RegisterType((*JobConfig)(nil), "peloton.api.v0.job.JobConfig")
	proto.RegisterMapType((map[uint32]*task.TaskConfig)(nil), "peloton.api.v0.job.JobConfig.InstanceConfigEntry")
	proto.RegisterType((*RuntimeInfo)(nil), "peloton.api.v0.job.RuntimeInfo")
	proto.RegisterMapType((map[string]float64)(nil), "peloton.api.v0.job.RuntimeInfo.ResourceUsageEntry")
	proto.RegisterMapType((map[uint64]uint32)(nil), "peloton.api.v0.job.RuntimeInfo.TaskConfigVersionStatsEntry")
	proto.RegisterMapType((map[uint64]*RuntimeInfo_TaskStateStats)(nil), "peloton.api.v0.job.RuntimeInfo.TaskStatsByConfigurationVersionEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "peloton.api.v0.job.RuntimeInfo.TaskStatsEntry")
	proto.RegisterType((*RuntimeInfo_TaskStateStats)(nil), "peloton.api.v0.job.RuntimeInfo.TaskStateStats")
	proto.RegisterMapType((map[string]uint32)(nil), "peloton.api.v0.job.RuntimeInfo.TaskStateStats.StateStatsEntry")
	proto.RegisterType((*JobInfo)(nil), "peloton.api.v0.job.JobInfo")
	proto.RegisterType((*JobSummary)(nil), "peloton.api.v0.job.JobSummary")
	proto.RegisterType((*QuerySpec)(nil), "peloton.api.v0.job.QuerySpec")
	proto.RegisterType((*JobAlreadyExists)(nil), "peloton.api.v0.job.JobAlreadyExists")
	proto.RegisterType((*JobNotFound)(nil), "peloton.api.v0.job.JobNotFound")
	proto.RegisterType((*InvalidJobId)(nil), "peloton.api.v0.job.InvalidJobId")
	proto.RegisterType((*InvalidJobConfig)(nil), "peloton.api.v0.job.InvalidJobConfig")
	proto.RegisterType((*CreateRequest)(nil), "peloton.api.v0.job.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "peloton.api.v0.job.CreateResponse")
	proto.RegisterType((*CreateResponse_Error)(nil), "peloton.api.v0.job.CreateResponse.Error")
	proto.RegisterType((*UpdateRequest)(nil), "peloton.api.v0.job.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "peloton.api.v0.job.UpdateResponse")
	proto.RegisterType((*UpdateResponse_Error)(nil), "peloton.api.v0.job.UpdateResponse.Error")
	proto.RegisterType((*GetRequest)(nil), "peloton.api.v0.job.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "peloton.api.v0.job.GetResponse")
	proto.RegisterType((*GetResponse_Error)(nil), "peloton.api.v0.job.GetResponse.Error")
	proto.RegisterType((*QueryRequest)(nil), "peloton.api.v0.job.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "peloton.api.v0.job.QueryResponse")
	proto.RegisterType((*QueryResponse_Error)(nil), "peloton.api.v0.job.QueryResponse.Error")
	proto.RegisterType((*DeleteRequest)(nil), "peloton.api.v0.job.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "peloton.api.v0.job.DeleteResponse")
	proto.RegisterType((*DeleteResponse_Error)(nil), "peloton.api.v0.job.DeleteResponse.Error")
	proto.RegisterType((*RefreshRequest)(nil), "peloton.api.v0.job.RefreshRequest")
	proto.RegisterType((*RefreshResponse)(nil), "peloton.api.v0.job.RefreshResponse")
	proto.RegisterType((*GetCacheRequest)(nil), "peloton.api.v0.job.GetCacheRequest")
	proto.RegisterType((*GetCacheResponse)(nil), "peloton.api.v0.job.GetCacheResponse")
	proto.RegisterType((*GetActiveJobsRequest)(nil), "peloton.api.v0.job.GetActiveJobsRequest")
	proto.RegisterType((*GetActiveJobsResponse)(nil), "peloton.api.v0.job.GetActiveJobsResponse")
	proto.RegisterType((*RestartConfig)(nil), "peloton.api.v0.job.RestartConfig")
	proto.RegisterType((*RestartRequest)(nil), "peloton.api.v0.job.RestartRequest")
	proto.RegisterType((*RestartResponse)(nil), "peloton.api.v0.job.RestartResponse")
	proto.RegisterType((*StartConfig)(nil), "peloton.api.v0.job.StartConfig")
	proto.RegisterType((*StartRequest)(nil), "peloton.api.v0.job.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "peloton.api.v0.job.StartResponse")
	proto.RegisterType((*StopConfig)(nil), "peloton.api.v0.job.StopConfig")
	proto.RegisterType((*StopRequest)(nil), "peloton.api.v0.job.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "peloton.api.v0.job.StopResponse")
}

func init() { proto.RegisterFile("peloton/api/v0/job/job.proto", fileDescriptor_b745a1c4877f5d97) }

var fileDescriptor_b745a1c4877f5d97 = []byte{
	// 2449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x4d, 0x6f, 0xdb, 0xc8,
	0xf9, 0x0f, 0x25, 0xeb, 0xed, 0x91, 0x25, 0x2b, 0x93, 0xfc, 0xf7, 0x2f, 0x28, 0x89, 0xe3, 0x30,
	0xe9, 0xd6, 0x4d, 0x11, 0x39, 0xab, 0x45, 0x80, 0x34, 0xd9, 0x64, 0xa3, 0x48, 0x8a, 0x23, 0xc7,
	0x91, 0xdd, 0x91, 0x9c, 0xed, 0xee, 0x02, 0x0d, 0x28, 0x69, 0xe2, 0xd0, 0xa6, 0x48, 0x2e, 0x49,
	0xd9, 0x51, 0x8f, 0x45, 0xaf, 0xed, 0xa5, 0x40, 0x81, 0xfd, 0x08, 0xed, 0x65, 0xaf, 0xfd, 0x00,
	0xdd, 0xcf, 0xd0, 0x4b, 0x4f, 0x05, 0xda, 0x5b, 0xf7, 0xd4, 0x43, 0x8f, 0xc5, 0xbc, 0x90, 0x22,
	0x69, 0x52, 0x96, 0x55, 0x63, 0x9b, 0x1e, 0x62, 0x93, 0x33, 0xbf, 0xe7, 0xe1, 0xf3, 0x3a, 0xf3,
	0x9b, 0x89, 0xe1, 0xaa, 0x49, 0x34, 0xc3, 0x31, 0xf4, 0x0d, 0xc5, 0x54, 0x37, 0x8e, 0xee, 0x6e,
	0x1c, 0x18, 0x7d, 0xfa, 0xaf, 0x6a, 0x5a, 0x86, 0x63, 0x20, 0x24, 0x66, 0xab, 0x8a, 0xa9, 0x56,
	0x8f, 0xee, 0x56, 0x0f, 0x8c, 0x7e, 0x25, 0x2c, 0xe1, 0x42, 0x98, 0x44, 0x45, 0x0e, 0xcd, 0x12,
	0xcb, 0x32, 0x2c, 0x5b, 0xfc, 0x12, 0x98, 0xd5, 0x10, 0xc6, 0x51, 0xec, 0x43, 0xf6, 0x43, 0xcc,
	0xaf, 0x85, 0xe6, 0xbf, 0x1a, 0x13, 0x6b, 0xc2, 0x7f, 0x0a, 0xc4, 0xad, 0x10, 0xc2, 0x22, 0xb6,
	0x69, 0x18, 0x9a, 0xfb, 0x9b, 0xa3, 0xe4, 0x6f, 0x13, 0x90, 0xeb, 0x6a, 0x4a, 0xc3, 0xd0, 0xdf,
	0xa8, 0xfb, 0xa8, 0x02, 0x59, 0xd3, 0x52, 0x0d, 0x4b, 0x75, 0x26, 0x65, 0x69, 0x4d, 0x5a, 0x2f,
	0x60, 0xef, 0x1d, 0xad, 0x41, 0xde, 0xb4, 0x08, 0x19, 0x99, 0x8e, 0xda, 0xd7, 0x48, 0x39, 0xb1,
	0x26, 0xad, 0x67, 0xb1, 0x7f, 0x08, 0x5d, 0x85, 0x9c, 0x45, 0x8e, 0x8c, 0x81, 0x42, 0xe7, 0x93,
	0x6c, 0x7e, 0x3a, 0x80, 0xee, 0xc3, 0xff, 0x8f, 0x94, 0x77, 0xea, 0x68, 0x3c, 0xc2, 0x63, 0x5d,
	0x57, 0xf5, 0xfd, 0xb6, 0x6e, 0x3b, 0x8a, 0x3e, 0x20, 0x76, 0x79, 0x89, 0x7d, 0x2a, 0x6e, 0x9a,
	0x49, 0xaa, 0x7a, 0xa4, 0x64, 0x4a, 0x48, 0x46, 0x4f, 0xa3, 0x0f, 0xa1, 0x38, 0x52, 0xde, 0x89,
	0xe1, 0x9e, 0x3a, 0x22, 0xe5, 0x34, 0x13, 0x08, 0x8d, 0xa2, 0x27, 0x70, 0x45, 0x7c, 0x7c, 0x4f,
	0x57, 0x8e, 0x14, 0x55, 0xa3, 0x16, 0x4f, 0xbf, 0x92, 0x61, 0x42, 0xb3, 0x20, 0xf2, 0x1f, 0xd3,
	0x90, 0xdb, 0x32, 0xfa, 0x22, 0x8e, 0x9f, 0x42, 0x6e, 0xf0, 0x56, 0xd1, 0xf7, 0xc9, 0xb6, 0xb1,
	0xcf, 0x02, 0x99, 0xaf, 0xdd, 0xa8, 0x86, 0xea, 0xc4, 0x7d, 0x6d, 0xb8, 0x40, 0x3c, 0x95, 0x41,
	0x08, 0x96, 0x74, 0x65, 0xc4, 0xa3, 0x9c, 0xc3, 0xec, 0x19, 0x6d, 0xc0, 0x92, 0x33, 0x31, 0x79,
	0x64, 0x8b, 0xb5, 0x2b, 0xd5, 0x93, 0x75, 0x57, 0xdd, 0x32, 0xfa, 0xbd, 0x89, 0x49, 0x30, 0x03,
	0xa2, 0x55, 0x00, 0xe3, 0x98, 0xf9, 0x48, 0x94, 0x11, 0x0b, 0x72, 0x0e, 0xfb, 0x46, 0xe8, 0xbc,
	0x36, 0x54, 0xcc, 0x4d, 0xcb, 0x18, 0x9b, 0x34, 0x94, 0x49, 0x3a, 0x3f, 0x1d, 0xa1, 0x19, 0x1f,
	0x12, 0x7b, 0x60, 0xa9, 0xa6, 0xa3, 0x1a, 0x3a, 0x0b, 0x5d, 0x0e, 0xfb, 0x87, 0xd0, 0x3d, 0x48,
	0x6b, 0x4a, 0x9f, 0x68, 0x34, 0x44, 0xc9, 0xf5, 0x7c, 0xed, 0x5a, 0x9c, 0x93, 0xdb, 0x14, 0x85,
	0x05, 0x18, 0xdd, 0x82, 0x82, 0x2a, 0x22, 0xd7, 0x30, 0xc6, 0xba, 0x53, 0xce, 0xb2, 0x00, 0x07,
	0x07, 0xd1, 0x06, 0x24, 0x6d, 0x4d, 0x29, 0xe7, 0x58, 0xf8, 0xae, 0x45, 0xb9, 0xeb, 0x15, 0x2e,
	0xa6, 0x48, 0xd4, 0x82, 0xc2, 0x90, 0xbc, 0x51, 0xc6, 0x9a, 0xc3, 0x47, 0xcb, 0xc0, 0x44, 0xaf,
	0x87, 0x45, 0x59, 0x1b, 0xf5, 0x14, 0xfb, 0x50, 0x08, 0x07, 0xa5, 0xd0, 0xe7, 0x50, 0x9c, 0x1a,
	0xc2, 0xf4, 0xe4, 0x99, 0x73, 0x1f, 0xc5, 0x44, 0x9c, 0x83, 0xaa, 0xed, 0x80, 0x4c, 0x4b, 0x77,
	0xac, 0x09, 0x0e, 0x29, 0x42, 0x4d, 0xda, 0x21, 0xac, 0xfd, 0xda, 0xcd, 0xf2, 0x32, 0xb3, 0xee,
	0xc3, 0xb8, 0x90, 0x61, 0x62, 0x1b, 0x63, 0x6b, 0x40, 0x76, 0x19, 0x1a, 0x4f, 0x05, 0xd1, 0x65,
	0x48, 0x19, 0xc7, 0x3a, 0xb1, 0xca, 0x05, 0x96, 0x11, 0xfe, 0x82, 0xba, 0x70, 0xd1, 0xd4, 0x94,
	0x01, 0x19, 0x11, 0xdd, 0xe9, 0x3a, 0x96, 0xe2, 0x90, 0xfd, 0x49, 0xb9, 0xc8, 0x6a, 0xe5, 0x07,
	0x51, 0x96, 0xef, 0x86, 0xc1, 0xf8, 0xa4, 0x7c, 0xa5, 0x0f, 0x97, 0x22, 0xfc, 0x42, 0x25, 0x48,
	0x1e, 0x12, 0x77, 0x89, 0xa0, 0x8f, 0xe8, 0x1e, 0xa4, 0x8e, 0x14, 0x6d, 0xcc, 0x2b, 0x76, 0x8e,
	0x98, 0x73, 0xf4, 0x83, 0xc4, 0x7d, 0x49, 0xfe, 0x2e, 0x0f, 0x79, 0x3c, 0xd6, 0x1d, 0x75, 0x44,
	0xda, 0xfa, 0x1b, 0x03, 0xd5, 0x20, 0x65, 0x3b, 0x8a, 0x43, 0x98, 0xfa, 0x62, 0xed, 0x6a, 0x4c,
	0xd8, 0xbb, 0x14, 0x83, 0x39, 0x14, 0xc9, 0xb0, 0x3c, 0xb0, 0x88, 0x42, 0x8b, 0x92, 0xb5, 0x39,
	0xef, 0x9b, 0xc0, 0x18, 0x5d, 0x9e, 0x6c, 0x47, 0xb1, 0x1c, 0x06, 0x48, 0x32, 0xc0, 0x74, 0x80,
	0x2e, 0x15, 0x03, 0x63, 0x64, 0x6a, 0xc4, 0xd3, 0xc1, 0x1b, 0x26, 0x34, 0x8a, 0xb6, 0x21, 0x47,
	0x7d, 0xa1, 0x5f, 0xe7, 0x3d, 0x93, 0xaf, 0x55, 0xa3, 0x2c, 0xf4, 0x79, 0xc4, 0xfc, 0x66, 0x02,
	0xbc, 0x2a, 0xa6, 0x0a, 0x68, 0x27, 0x0c, 0x58, 0x40, 0x5e, 0x11, 0xcb, 0x76, 0x9b, 0x2c, 0x89,
	0x83, 0x83, 0xe8, 0x01, 0xe4, 0xf6, 0x0d, 0x45, 0x63, 0x1e, 0xb3, 0xc5, 0xe8, 0xb4, 0xa8, 0x4c,
	0xe1, 0xa8, 0x06, 0x97, 0xb9, 0xb2, 0xb1, 0xc5, 0x42, 0xe1, 0x7e, 0x88, 0xb6, 0xdc, 0x12, 0x8e,
	0x9c, 0x43, 0x8f, 0x20, 0x6b, 0x91, 0x23, 0x95, 0xe1, 0x72, 0xf3, 0xae, 0x5e, 0x9e, 0x08, 0xfa,
	0x04, 0xb2, 0x63, 0x73, 0xa8, 0x38, 0xa4, 0xdd, 0x14, 0x2d, 0xb8, 0x16, 0x27, 0xbe, 0x27, 0x70,
	0xd8, 0x93, 0x40, 0x3f, 0x83, 0x82, 0x25, 0x4a, 0x7f, 0xcf, 0x56, 0xf6, 0x89, 0xe8, 0xbe, 0xda,
	0x69, 0x41, 0xc6, 0x7e, 0x21, 0x1e, 0xe8, 0xa0, 0x22, 0xb4, 0x0e, 0x2b, 0xc7, 0x86, 0x75, 0xf8,
	0x46, 0x33, 0x8e, 0xdd, 0x28, 0x2c, 0xb3, 0x28, 0x84, 0x87, 0x69, 0x39, 0xb1, 0xba, 0x72, 0x61,
	0x05, 0x06, 0x0b, 0x8c, 0xa1, 0xbb, 0x70, 0x69, 0x48, 0x6c, 0xd5, 0x22, 0xc3, 0xae, 0x1f, 0x5a,
	0x64, 0xd0, 0xa8, 0x29, 0x64, 0xc3, 0x07, 0x8e, 0xd7, 0x01, 0x62, 0x90, 0xd7, 0xd1, 0x0a, 0x73,
	0xf1, 0xe1, 0x3c, 0x75, 0x74, 0x52, 0x9a, 0xfb, 0x1a, 0xa3, 0x1a, 0xfd, 0x46, 0x82, 0xeb, 0x5e,
	0xbd, 0x3d, 0x9d, 0x34, 0xa2, 0x6a, 0xa1, 0xc4, 0x3e, 0xdf, 0x9c, 0xbb, 0x8c, 0xa3, 0xd5, 0x70,
	0x3b, 0x4e, 0xfb, 0x58, 0xe5, 0x1b, 0x09, 0x8a, 0xae, 0x26, 0xc2, 0x6d, 0xfc, 0x39, 0x80, 0xed,
	0xbd, 0x95, 0x25, 0x66, 0xcd, 0xe3, 0x79, 0xad, 0xe1, 0x52, 0xd5, 0xe9, 0x23, 0xb7, 0xc3, 0xa7,
	0xb1, 0xf2, 0x08, 0x56, 0x42, 0xd3, 0xfe, 0x15, 0x2c, 0xc7, 0x57, 0xb0, 0xcb, 0xfe, 0x15, 0xac,
	0xe0, 0x5b, 0xa0, 0x2a, 0x9f, 0x4c, 0x0d, 0x5e, 0x40, 0xfa, 0x09, 0xa0, 0x93, 0xa5, 0x79, 0x9a,
	0x06, 0xc9, 0xaf, 0xa1, 0x0d, 0x57, 0x66, 0x64, 0xde, 0xaf, 0x6a, 0xe9, 0x34, 0x63, 0x7e, 0x29,
	0xc1, 0xad, 0x79, 0xd2, 0x18, 0xa1, 0xb4, 0x19, 0x5c, 0xe1, 0xab, 0x67, 0xcb, 0x8f, 0x7f, 0xc1,
	0xff, 0x83, 0x04, 0x99, 0x2d, 0xa3, 0xcf, 0x16, 0xfb, 0x3b, 0x90, 0x50, 0x87, 0x82, 0x22, 0xc5,
	0xb2, 0x07, 0x0a, 0x6e, 0xe2, 0x84, 0x3a, 0xa4, 0x84, 0x83, 0xaf, 0x58, 0xc2, 0x8a, 0x6b, 0x33,
	0xf7, 0x64, 0x2c, 0xc0, 0xe8, 0x27, 0x90, 0xb1, 0xb8, 0x69, 0x6c, 0xe1, 0x8f, 0xd8, 0x9f, 0x42,
	0xd6, 0x63, 0x17, 0x2f, 0x7f, 0x9b, 0x04, 0xa0, 0xeb, 0xea, 0x78, 0x34, 0x52, 0xac, 0xc9, 0x59,
	0xed, 0x3d, 0x17, 0x1e, 0xe7, 0xed, 0xf7, 0x4b, 0xfe, 0xfd, 0x3e, 0xc8, 0xee, 0x52, 0x27, 0xd8,
	0xdd, 0x94, 0x9b, 0xa5, 0xff, 0x23, 0x6e, 0x96, 0x89, 0xe2, 0x66, 0x01, 0x22, 0x93, 0x5d, 0x94,
	0xc8, 0xf8, 0xd2, 0x92, 0x3b, 0x5b, 0x5a, 0x5c, 0x72, 0x08, 0xf3, 0x92, 0x43, 0xf9, 0x9f, 0x49,
	0xc8, 0xfd, 0x94, 0x1e, 0x8f, 0xba, 0x26, 0x19, 0xa0, 0x26, 0x80, 0xa9, 0xec, 0xab, 0x3a, 0x2b,
	0x7c, 0x91, 0xce, 0x5b, 0x61, 0x2d, 0xfc, 0x34, 0xb5, 0xeb, 0xe1, 0xa8, 0x24, 0xf6, 0xc9, 0xf9,
	0x42, 0x9c, 0x38, 0x4b, 0x88, 0x2b, 0x90, 0x3d, 0x24, 0x93, 0x63, 0xc3, 0x1a, 0xda, 0xe5, 0x24,
	0x63, 0xdd, 0xde, 0x3b, 0xdd, 0xea, 0x0f, 0xc4, 0x2e, 0x4e, 0xcf, 0x45, 0xc9, 0xd3, 0xb7, 0x7a,
	0x0f, 0x8e, 0x9e, 0x42, 0x46, 0xc4, 0x96, 0x95, 0x43, 0xbe, 0xb6, 0x1e, 0x96, 0x74, 0xcf, 0x7e,
	0xfe, 0x94, 0xec, 0x2a, 0xce, 0x5b, 0xec, 0x0a, 0x4e, 0x6b, 0x2d, 0xed, 0xaf, 0x35, 0xb7, 0x8c,
	0x33, 0xbe, 0x32, 0xde, 0x81, 0x8b, 0x7e, 0x7a, 0x85, 0x29, 0x0f, 0x10, 0xa5, 0x10, 0xcb, 0x16,
	0x3c, 0x20, 0x3e, 0x29, 0x8b, 0xba, 0x70, 0x29, 0xc8, 0xb5, 0xb8, 0xca, 0xdc, 0xbc, 0x2a, 0xa3,
	0xa4, 0xe5, 0x2f, 0xa1, 0xb4, 0x65, 0xf4, 0xeb, 0x9a, 0x45, 0x94, 0xe1, 0xa4, 0xf5, 0x4e, 0xb5,
	0x1d, 0xfb, 0xac, 0x3d, 0x5c, 0x86, 0xcc, 0x88, 0xd8, 0x8c, 0x8a, 0xf0, 0x36, 0x76, 0x5f, 0xe5,
	0x57, 0x90, 0xdf, 0x32, 0xfa, 0x1d, 0xc3, 0x79, 0x66, 0x8c, 0xf5, 0xe1, 0xf9, 0xe9, 0xfd, 0x0c,
	0x96, 0xdb, 0xfa, 0x91, 0xa2, 0xa9, 0x43, 0x8a, 0x3e, 0x47, 0xc5, 0x5f, 0x42, 0x69, 0xaa, 0x58,
	0x9c, 0x49, 0xce, 0x4d, 0xf9, 0x37, 0x12, 0x14, 0x1a, 0x34, 0xab, 0x04, 0x93, 0xaf, 0xc6, 0xc4,
	0x76, 0xbe, 0xa7, 0xc5, 0xfd, 0x3e, 0x64, 0x6c, 0x32, 0xb0, 0x88, 0xc3, 0xbb, 0x29, 0x5f, 0x5b,
	0x8d, 0xfb, 0x54, 0x97, 0xc1, 0xb0, 0x0b, 0x97, 0xff, 0x91, 0x80, 0xa2, 0x6b, 0xb1, 0x6d, 0x1a,
	0xba, 0x4d, 0xd0, 0x63, 0x48, 0xb1, 0x7b, 0x18, 0x61, 0xf5, 0x7a, 0x94, 0x09, 0x41, 0x91, 0x6a,
	0x8b, 0xe2, 0x31, 0x17, 0x43, 0x1f, 0x43, 0xea, 0x80, 0xe6, 0x2c, 0xce, 0x85, 0xa0, 0xd7, 0x1c,
	0x5b, 0xf9, 0x9b, 0x04, 0x29, 0xa6, 0x05, 0x6d, 0x41, 0x41, 0xf1, 0xd7, 0x6a, 0xdc, 0xd2, 0x24,
	0x22, 0x11, 0xa8, 0x6b, 0x1c, 0x14, 0xa5, 0xba, 0x54, 0x9e, 0xec, 0x86, 0x3f, 0xaa, 0x91, 0xba,
	0xc2, 0x55, 0x81, 0x83, 0xa2, 0xa8, 0x09, 0xcb, 0xaa, 0xaf, 0x22, 0xc5, 0x2e, 0xba, 0x36, 0x5b,
	0x55, 0x7b, 0x88, 0x03, 0x52, 0xac, 0x42, 0x38, 0xe3, 0xff, 0x5f, 0xa9, 0x90, 0x7f, 0x25, 0xa0,
	0xe8, 0x5a, 0x7c, 0x86, 0x0a, 0x09, 0x8a, 0x04, 0x2b, 0x84, 0xbb, 0x9c, 0x58, 0xa0, 0xdf, 0x92,
	0x81, 0x7e, 0xab, 0xfc, 0xc5, 0xab, 0x9a, 0x3a, 0xe4, 0x0f, 0xa6, 0xeb, 0x90, 0x30, 0xec, 0x7a,
	0x4c, 0x6c, 0x5c, 0x18, 0xf6, 0xcb, 0xbc, 0x87, 0xc5, 0xf2, 0x10, 0x60, 0x93, 0x38, 0x8b, 0x15,
	0x8a, 0xfc, 0xe7, 0x04, 0xe4, 0x99, 0xb4, 0x48, 0xda, 0xc3, 0x60, 0xd2, 0x22, 0x2f, 0x44, 0x7c,
	0xf8, 0x60, 0xc6, 0xee, 0x41, 0xe6, 0x80, 0xd3, 0x55, 0x11, 0x95, 0x38, 0xce, 0xc6, 0x29, 0x8a,
	0xc0, 0x2e, 0x5e, 0x75, 0x95, 0xaf, 0xbd, 0xcc, 0x3e, 0x86, 0xac, 0x1e, 0x4c, 0xab, 0x1c, 0x56,
	0x22, 0xae, 0x8d, 0xfd, 0x99, 0xf5, 0x64, 0xd0, 0x2e, 0x14, 0xf7, 0x89, 0x23, 0x18, 0xd4, 0x33,
	0x45, 0xd5, 0x84, 0x07, 0xeb, 0xf1, 0x5a, 0x36, 0x03, 0x78, 0x1c, 0x92, 0x97, 0x7f, 0x2f, 0xc1,
	0x32, 0xe3, 0x51, 0x6e, 0x66, 0x02, 0x54, 0x50, 0x5a, 0x94, 0x0a, 0x7e, 0x04, 0x4b, 0xb6, 0x49,
	0x06, 0xb3, 0xfa, 0xda, 0x63, 0x6f, 0x98, 0x41, 0xd1, 0x1a, 0xe4, 0x6d, 0xce, 0xca, 0x77, 0x74,
	0x6d, 0x22, 0x2e, 0x9c, 0xfd, 0x43, 0xf2, 0x9f, 0x92, 0x50, 0x10, 0xb6, 0x8a, 0x3a, 0x78, 0x14,
	0xac, 0x83, 0x1f, 0xc6, 0x7e, 0x27, 0xb6, 0x12, 0x2c, 0x32, 0x60, 0xc4, 0x8d, 0x33, 0xbe, 0xd9,
	0x95, 0x20, 0xb0, 0xe8, 0x49, 0x80, 0x6d, 0xc6, 0xb4, 0x43, 0x98, 0x6d, 0x06, 0x98, 0xa6, 0x1b,
	0x9e, 0xa5, 0xf9, 0xc3, 0x73, 0x9f, 0xb1, 0xc1, 0xb1, 0xe6, 0x5d, 0x53, 0xad, 0xc6, 0xf1, 0x48,
	0x1e, 0x31, 0xec, 0xc2, 0x2b, 0xbf, 0xf6, 0xca, 0xef, 0x1e, 0x24, 0x89, 0xe5, 0x06, 0xeb, 0x66,
	0x4c, 0xcd, 0xec, 0xe9, 0x87, 0xba, 0x71, 0xac, 0xf3, 0x40, 0x51, 0x3c, 0x7a, 0x09, 0x45, 0xd1,
	0xca, 0x58, 0xf0, 0xd1, 0x44, 0x74, 0xdb, 0x09, 0x0d, 0xed, 0x00, 0x18, 0x87, 0x84, 0xe5, 0xc7,
	0x50, 0x68, 0x12, 0x8d, 0x2c, 0xba, 0x6b, 0xc8, 0x5f, 0x4b, 0x50, 0x74, 0x15, 0x9c, 0x61, 0x11,
	0x0f, 0x8a, 0x04, 0x0a, 0xa1, 0xb2, 0x79, 0x4e, 0x0d, 0x2a, 0x7f, 0x0a, 0x45, 0x4c, 0xde, 0x58,
	0xc4, 0x7e, 0xbb, 0xa0, 0x73, 0x17, 0x61, 0xc5, 0x53, 0xc0, 0x2d, 0x95, 0x9f, 0xc0, 0xca, 0x26,
	0x71, 0x1a, 0xca, 0xe0, 0xed, 0xa2, 0x11, 0xfb, 0x95, 0x04, 0xa5, 0xa9, 0x0a, 0x11, 0xb3, 0xe9,
	0xe6, 0x2b, 0x2d, 0x78, 0xf6, 0x4e, 0x9c, 0xf1, 0xec, 0xfd, 0x01, 0x5c, 0xde, 0x24, 0x4e, 0x7d,
	0xe0, 0xa8, 0x47, 0x64, 0xcb, 0xe8, 0xdb, 0xc2, 0x1b, 0xf9, 0x39, 0xfc, 0x5f, 0x68, 0x5c, 0x98,
	0xb8, 0x01, 0x49, 0x75, 0xe8, 0xde, 0x20, 0x9d, 0xe2, 0x27, 0x45, 0xca, 0x77, 0xa0, 0x80, 0x09,
	0xbb, 0x04, 0x16, 0x7b, 0xd7, 0x55, 0xc8, 0xf5, 0x15, 0x67, 0xf0, 0xb6, 0xab, 0xfe, 0x82, 0x88,
	0xfb, 0xed, 0xe9, 0x80, 0xfc, 0x9d, 0x44, 0xd3, 0xc5, 0xf0, 0x0b, 0x32, 0x98, 0x07, 0x90, 0xb6,
	0xe8, 0xc1, 0xc4, 0x5d, 0x40, 0xe4, 0xc8, 0x8b, 0x72, 0xf7, 0xce, 0x9d, 0x1f, 0x6c, 0x84, 0x04,
	0x5a, 0x87, 0x15, 0xf7, 0x42, 0xd3, 0xbd, 0xb9, 0x4b, 0xf2, 0xfb, 0xcb, 0xd0, 0x30, 0xda, 0x64,
	0x77, 0xa8, 0x53, 0xb7, 0xc4, 0xba, 0x71, 0x23, 0x32, 0xf2, 0x7e, 0x20, 0x0e, 0xca, 0xc9, 0x13,
	0x5a, 0x5d, 0xc2, 0x5f, 0x11, 0xe3, 0x08, 0x2b, 0xa4, 0x68, 0x2b, 0xfc, 0xf7, 0xc0, 0x89, 0xb3,
	0xde, 0x03, 0xcb, 0x3f, 0x86, 0x7c, 0x77, 0xee, 0xc4, 0xfc, 0x5d, 0x82, 0xe5, 0xee, 0x7b, 0x9f,
	0x96, 0x3a, 0xe4, 0x4f, 0x26, 0x25, 0xb2, 0x1d, 0x7c, 0x9e, 0x63, 0xbf, 0x8c, 0x7c, 0x0c, 0x85,
	0xee, 0x7f, 0x25, 0x1d, 0xb7, 0x01, 0xba, 0x8e, 0x61, 0xce, 0x95, 0x8d, 0xbf, 0x4a, 0x34, 0x77,
	0x86, 0xf9, 0x5e, 0x27, 0xe3, 0x31, 0x80, 0xed, 0x39, 0x24, 0x72, 0xb1, 0x1a, 0x9d, 0x0b, 0x17,
	0x85, 0x7d, 0x12, 0xf2, 0x11, 0xad, 0x38, 0xea, 0xe3, 0xf7, 0x9b, 0x88, 0xdb, 0x77, 0xd8, 0xe5,
	0x69, 0x6f, 0x62, 0x12, 0x94, 0x83, 0xd4, 0xd3, 0x7a, 0xaf, 0xf1, 0xbc, 0x74, 0x01, 0xe5, 0x21,
	0xd3, 0x6d, 0xe1, 0x57, 0xed, 0x46, 0xab, 0x24, 0x21, 0x80, 0x74, 0xb3, 0xde, 0x7a, 0xb9, 0xd3,
	0x29, 0x25, 0x6e, 0xbf, 0x83, 0x8b, 0x27, 0xfe, 0xa7, 0x0f, 0xad, 0x42, 0x65, 0x77, 0xbb, 0xde,
	0x68, 0xbd, 0x6c, 0x75, 0x7a, 0xaf, 0xbb, 0x3d, 0x5c, 0xef, 0xb5, 0x36, 0x3f, 0x7f, 0xdd, 0xee,
	0xbc, 0xaa, 0x6f, 0xb7, 0x9b, 0xa5, 0x0b, 0x68, 0x0d, 0xae, 0x46, 0xcc, 0xef, 0xd6, 0x1b, 0x2f,
	0x5e, 0x3f, 0xdf, 0xe9, 0xf6, 0x4a, 0x12, 0xba, 0x01, 0xd7, 0x22, 0x10, 0xdd, 0x5d, 0xdc, 0xaa,
	0x37, 0x5f, 0x6f, 0xed, 0x3c, 0x2d, 0x25, 0x6e, 0xff, 0x4e, 0x82, 0xac, 0x7b, 0x4d, 0x45, 0xed,
	0xdb, 0xeb, 0xbc, 0xe8, 0xec, 0x7c, 0xd6, 0x29, 0x5d, 0x40, 0x2b, 0x90, 0x6f, 0x77, 0xda, 0xbd,
	0x76, 0x7d, 0xbb, 0xfd, 0x45, 0xab, 0x59, 0x92, 0xe8, 0xec, 0x6e, 0xab, 0xd3, 0x6c, 0x77, 0x36,
	0x4b, 0x09, 0xfa, 0x82, 0xf7, 0x3a, 0x1d, 0xfa, 0x92, 0x44, 0x05, 0xc8, 0x75, 0xf7, 0x1a, 0x8d,
	0x56, 0xab, 0xd9, 0x6a, 0x96, 0x96, 0xa8, 0x67, 0xcf, 0xea, 0xed, 0xed, 0x56, 0xb3, 0x94, 0xa2,
	0xcf, 0x2f, 0xda, 0xdb, 0xf4, 0x39, 0x4d, 0x65, 0xe8, 0x33, 0x95, 0xc9, 0xa0, 0x8b, 0x50, 0xd8,
	0xeb, 0xf8, 0x3f, 0x90, 0xa5, 0xf3, 0xcd, 0xd6, 0x76, 0xab, 0xd7, 0x6a, 0x96, 0x72, 0xb5, 0xdf,
	0x66, 0xd8, 0x95, 0xee, 0x4b, 0x45, 0x57, 0xf6, 0x89, 0x85, 0x76, 0x20, 0xcd, 0x4f, 0xf4, 0xe8,
	0xc6, 0xac, 0xd3, 0x3e, 0x2b, 0xe5, 0x8a, 0x7c, 0xfa, 0x85, 0x00, 0x7a, 0x06, 0xc9, 0x4d, 0xe2,
	0xa0, 0xd5, 0xd8, 0x43, 0x06, 0x57, 0x75, 0xfd, 0x94, 0x43, 0x08, 0xda, 0x86, 0x14, 0x23, 0x75,
	0x68, 0x6d, 0x06, 0x4d, 0xe5, 0xba, 0x6e, 0x9c, 0x4a, 0x64, 0xa9, 0x9b, 0x9c, 0xd1, 0x44, 0xbb,
	0x19, 0x60, 0x58, 0xd1, 0x6e, 0x86, 0x38, 0xd4, 0x0e, 0xa4, 0x79, 0x79, 0x46, 0x2b, 0x0c, 0x1c,
	0xf4, 0xa3, 0x15, 0x86, 0x4e, 0xd6, 0x18, 0x32, 0x62, 0xb3, 0x41, 0xf2, 0x8c, 0x9d, 0xca, 0x55,
	0x79, 0x73, 0x26, 0x66, 0x1a, 0x43, 0xb6, 0x5e, 0x46, 0xc7, 0xd0, 0xbf, 0x65, 0x44, 0xc7, 0x30,
	0xb8, 0xd8, 0xb6, 0x61, 0x89, 0xf6, 0x3c, 0xba, 0x1e, 0xb7, 0x4e, 0xb8, 0xba, 0xd6, 0xe2, 0x01,
	0x7e, 0x67, 0x19, 0x6f, 0x8b, 0x73, 0xd6, 0xcf, 0x0a, 0xe3, 0x9c, 0x0d, 0x10, 0x3f, 0xb4, 0x07,
	0x59, 0x97, 0xb5, 0xa1, 0x9b, 0x31, 0xd5, 0xe5, 0xa7, 0x85, 0x95, 0x5b, 0xb3, 0x41, 0x42, 0xed,
	0x10, 0x0a, 0x01, 0xba, 0x85, 0xd6, 0x63, 0xc4, 0x4e, 0x30, 0xb5, 0xca, 0x8f, 0xe6, 0x40, 0xf2,
	0xaf, 0x3c, 0x5d, 0x87, 0x88, 0xbf, 0xa4, 0xfa, 0x02, 0x9d, 0xfc, 0xdb, 0xab, 0x7e, 0x9a, 0xfd,
	0xe9, 0xd2, 0xc7, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x70, 0xe5, 0x49, 0x98, 0x25, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobManagerClient is the client API for JobManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobManagerClient interface {
	// Create a Job entity for a given config
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get the config of a job entity
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Query the jobs that match a list of labels.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Delete a job entity and stop all related tasks
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Update a Job entity with a new config
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Restart the tasks specified in restart request
	// Experimental only
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error)
	// Start the tasks specified in restart request
	// Experimental only
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stop the tasks specified in stop request
	// Experimental only
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Debug only method. Allows user to load job runtime state from DB
	// and re-execute the action associated with current state.
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Debug only method. Get the cache of a job stored in Peloton.
	GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error)
	// Debug only method. Get the list of active job IDs stored in Peloton.
	// This method is experimental and will be deprecated
	// It will be temporarily used for testing the consistency between
	// active_jobs table and mv_job_by_state materialzied view
	GetActiveJobs(ctx context.Context, in *GetActiveJobsRequest, opts ...grpc.CallOption) (*GetActiveJobsResponse, error)
}

type jobManagerClient struct {
	cc *grpc.ClientConn
}

func NewJobManagerClient(cc *grpc.ClientConn) JobManagerClient {
	return &jobManagerClient{cc}
}

func (c *jobManagerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error) {
	out := new(RestartResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error) {
	out := new(GetCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/GetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagerClient) GetActiveJobs(ctx context.Context, in *GetActiveJobsRequest, opts ...grpc.CallOption) (*GetActiveJobsResponse, error) {
	out := new(GetActiveJobsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.job.JobManager/GetActiveJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagerServer is the server API for JobManager service.
type JobManagerServer interface {
	// Create a Job entity for a given config
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get the config of a job entity
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Query the jobs that match a list of labels.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Delete a job entity and stop all related tasks
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Update a Job entity with a new config
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Restart the tasks specified in restart request
	// Experimental only
	Restart(context.Context, *RestartRequest) (*RestartResponse, error)
	// Start the tasks specified in restart request
	// Experimental only
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stop the tasks specified in stop request
	// Experimental only
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Debug only method. Allows user to load job runtime state from DB
	// and re-execute the action associated with current state.
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Debug only method. Get the cache of a job stored in Peloton.
	GetCache(context.Context, *GetCacheRequest) (*GetCacheResponse, error)
	// Debug only method. Get the list of active job IDs stored in Peloton.
	// This method is experimental and will be deprecated
	// It will be temporarily used for testing the consistency between
	// active_jobs table and mv_job_by_state materialzied view
	GetActiveJobs(context.Context, *GetActiveJobsRequest) (*GetActiveJobsResponse, error)
}

func RegisterJobManagerServer(s *grpc.Server, srv JobManagerServer) {
	s.RegisterService(&_JobManager_serviceDesc, srv)
}

func _JobManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/GetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).GetCache(ctx, req.(*GetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManager_GetActiveJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagerServer).GetActiveJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.job.JobManager/GetActiveJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagerServer).GetActiveJobs(ctx, req.(*GetActiveJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.job.JobManager",
	HandlerType: (*JobManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _JobManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _JobManager_Get_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _JobManager_Query_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JobManager_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _JobManager_Update_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _JobManager_Restart_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _JobManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobManager_Stop_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _JobManager_Refresh_Handler,
		},
		{
			MethodName: "GetCache",
			Handler:    _JobManager_GetCache_Handler,
		},
		{
			MethodName: "GetActiveJobs",
			Handler:    _JobManager_GetActiveJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/api/v0/job/job.proto",
}
