// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/job/svc/job_svc.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	job "github.com/uber/peloton/.gen/peloton/api/v0/job"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	query "github.com/uber/peloton/.gen/peloton/api/v0/query"
	respool "github.com/uber/peloton/.gen/peloton/api/v0/respool"
	task "github.com/uber/peloton/.gen/peloton/api/v0/task"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//  Request message for JobService.CreateJob method.
type CreateJobRequest struct {
	// The unique job UUID specified by the client. This can be used by
	// the client to re-create a failed job without the side-effect of
	// creating duplicated jobs. If unset, the server will create a new
	// UUID for the job for each invocation.
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The resource pool under which the job should be created. The
	// scheduling of all tasks in the job will be subject to the resource
	// availablity of the resource pool.
	Pool *respool.ResourcePoolPath `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	// The detailed configuration of the job to be created.
	Config *job.JobConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// The list of secrets for this job
	Secrets              []*peloton.Secret `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateJobRequest) Reset()         { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()    {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{0}
}

func (m *CreateJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateJobRequest.Unmarshal(m, b)
}
func (m *CreateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateJobRequest.Marshal(b, m, deterministic)
}
func (m *CreateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJobRequest.Merge(m, src)
}
func (m *CreateJobRequest) XXX_Size() int {
	return xxx_messageInfo_CreateJobRequest.Size(m)
}
func (m *CreateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJobRequest proto.InternalMessageInfo

func (m *CreateJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CreateJobRequest) GetPool() *respool.ResourcePoolPath {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *CreateJobRequest) GetConfig() *job.JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CreateJobRequest) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

//*
//  Response message for JobService.CreateJob method.
//
//  Return errors:
//    ALREADY_EXISTS:    if the job ID already exists.o
//    INVALID_ARGUMENT:  if the job ID or job config is invalid.
//    NOT_FOUND:         if the resource pool is not found.
type CreateJobResponse struct {
	// The job ID of the newly created job. Will be the same as the
	// one in CreateJobRequest if provided. Otherwise, a new job ID
	//  will be generated by the server.
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateJobResponse) Reset()         { *m = CreateJobResponse{} }
func (m *CreateJobResponse) String() string { return proto.CompactTextString(m) }
func (*CreateJobResponse) ProtoMessage()    {}
func (*CreateJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{1}
}

func (m *CreateJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateJobResponse.Unmarshal(m, b)
}
func (m *CreateJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateJobResponse.Marshal(b, m, deterministic)
}
func (m *CreateJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJobResponse.Merge(m, src)
}
func (m *CreateJobResponse) XXX_Size() int {
	return xxx_messageInfo_CreateJobResponse.Size(m)
}
func (m *CreateJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJobResponse proto.InternalMessageInfo

func (m *CreateJobResponse) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

//*
//  Request message for JobService.GetJob method.
type GetJobRequest struct {
	// The job ID to look up the job.
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{2}
}

func (m *GetJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobRequest.Unmarshal(m, b)
}
func (m *GetJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobRequest.Marshal(b, m, deterministic)
}
func (m *GetJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobRequest.Merge(m, src)
}
func (m *GetJobRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobRequest.Size(m)
}
func (m *GetJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobRequest proto.InternalMessageInfo

func (m *GetJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

//*
//  Response message for JobService.GetJob method.
//
//  Return errors:
//    NOT_FOUND:  if the job is not found in Peloton.
type GetJobResponse struct {
	// The job configuration of the matching job.
	Result *job.JobConfig `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	//
	//The list of secrets for this job, secret.Value will be empty.
	//SecretID and path will be populated, so that caller
	//can identify which secret is associated with this job.
	Secrets              []*peloton.Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetJobResponse) Reset()         { *m = GetJobResponse{} }
func (m *GetJobResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobResponse) ProtoMessage()    {}
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{3}
}

func (m *GetJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobResponse.Unmarshal(m, b)
}
func (m *GetJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobResponse.Marshal(b, m, deterministic)
}
func (m *GetJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobResponse.Merge(m, src)
}
func (m *GetJobResponse) XXX_Size() int {
	return xxx_messageInfo_GetJobResponse.Size(m)
}
func (m *GetJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobResponse proto.InternalMessageInfo

func (m *GetJobResponse) GetResult() *job.JobConfig {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetJobResponse) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

//*
//  Request message for JobService.QueryJobs method.
type QueryJobsRequest struct {
	// The spec of query criteria for the jobs.
	Spec *job.QuerySpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// The spec of how to do pagination for the query results.
	Pagination           *query.PaginationSpec `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *QueryJobsRequest) Reset()         { *m = QueryJobsRequest{} }
func (m *QueryJobsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryJobsRequest) ProtoMessage()    {}
func (*QueryJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{4}
}

func (m *QueryJobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobsRequest.Unmarshal(m, b)
}
func (m *QueryJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobsRequest.Marshal(b, m, deterministic)
}
func (m *QueryJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobsRequest.Merge(m, src)
}
func (m *QueryJobsRequest) XXX_Size() int {
	return xxx_messageInfo_QueryJobsRequest.Size(m)
}
func (m *QueryJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobsRequest proto.InternalMessageInfo

func (m *QueryJobsRequest) GetSpec() *job.QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QueryJobsRequest) GetPagination() *query.PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

//*
//  Response message for JobService.QueryJobs method.
//
//  Return errors:
//    INVALID_ARGUMENT:  if the resource pool path or job states are invalid.
type QueryJobsResponse struct {
	// List of jobs that match the job query criteria.
	Records []*job.JobInfo `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// Pagination result of the job query.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Return the spec of query criteria from the request.
	Spec                 *job.QuerySpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryJobsResponse) Reset()         { *m = QueryJobsResponse{} }
func (m *QueryJobsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryJobsResponse) ProtoMessage()    {}
func (*QueryJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{5}
}

func (m *QueryJobsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobsResponse.Unmarshal(m, b)
}
func (m *QueryJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobsResponse.Marshal(b, m, deterministic)
}
func (m *QueryJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobsResponse.Merge(m, src)
}
func (m *QueryJobsResponse) XXX_Size() int {
	return xxx_messageInfo_QueryJobsResponse.Size(m)
}
func (m *QueryJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobsResponse proto.InternalMessageInfo

func (m *QueryJobsResponse) GetRecords() []*job.JobInfo {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryJobsResponse) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryJobsResponse) GetSpec() *job.QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

//*
//  Request message for JobService.DeleteJob method.
type DeleteJobRequest struct {
	// The job ID to be deleted.
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeleteJobRequest) Reset()         { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()    {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{6}
}

func (m *DeleteJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteJobRequest.Unmarshal(m, b)
}
func (m *DeleteJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteJobRequest.Marshal(b, m, deterministic)
}
func (m *DeleteJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteJobRequest.Merge(m, src)
}
func (m *DeleteJobRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteJobRequest.Size(m)
}
func (m *DeleteJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteJobRequest proto.InternalMessageInfo

func (m *DeleteJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

//*
//  Response message for JobService.DeleteJob method.
//
//  Return errors:
//    NOT_FOUND:  if the job is not found in Peloton.
type DeleteJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteJobResponse) Reset()         { *m = DeleteJobResponse{} }
func (m *DeleteJobResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteJobResponse) ProtoMessage()    {}
func (*DeleteJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{7}
}

func (m *DeleteJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteJobResponse.Unmarshal(m, b)
}
func (m *DeleteJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteJobResponse.Marshal(b, m, deterministic)
}
func (m *DeleteJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteJobResponse.Merge(m, src)
}
func (m *DeleteJobResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteJobResponse.Size(m)
}
func (m *DeleteJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteJobResponse proto.InternalMessageInfo

//*
//  Request message for JobService.UpdateJob method.
type UpdateJobRequest struct {
	// The job ID to be updated.
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The new job config to be applied to the job.
	Config *job.JobConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// The list of secrets for this job
	Secrets              []*peloton.Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateJobRequest) Reset()         { *m = UpdateJobRequest{} }
func (m *UpdateJobRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateJobRequest) ProtoMessage()    {}
func (*UpdateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{8}
}

func (m *UpdateJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateJobRequest.Unmarshal(m, b)
}
func (m *UpdateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateJobRequest.Marshal(b, m, deterministic)
}
func (m *UpdateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobRequest.Merge(m, src)
}
func (m *UpdateJobRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateJobRequest.Size(m)
}
func (m *UpdateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobRequest proto.InternalMessageInfo

func (m *UpdateJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UpdateJobRequest) GetConfig() *job.JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateJobRequest) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

//*
//  Response message for JobService.UpdateJob method.
//
//  Return errors:
//    INVALID_ARGUMENT:  if the job ID or job config is invalid.
//    NOT_FOUND:         if the job ID is not found.
type UpdateJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateJobResponse) Reset()         { *m = UpdateJobResponse{} }
func (m *UpdateJobResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateJobResponse) ProtoMessage()    {}
func (*UpdateJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{9}
}

func (m *UpdateJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateJobResponse.Unmarshal(m, b)
}
func (m *UpdateJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateJobResponse.Marshal(b, m, deterministic)
}
func (m *UpdateJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateJobResponse.Merge(m, src)
}
func (m *UpdateJobResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateJobResponse.Size(m)
}
func (m *UpdateJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateJobResponse proto.InternalMessageInfo

//*
// RestartConfig is the optional config for RestartJobRequest
// Experimental only
type RestartConfig struct {
	// batch size of rolling restart, if unset or 0 all tasks specified
	// will be restarted at the same time.
	BatchSize            uint32   `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartConfig) Reset()         { *m = RestartConfig{} }
func (m *RestartConfig) String() string { return proto.CompactTextString(m) }
func (*RestartConfig) ProtoMessage()    {}
func (*RestartConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{10}
}

func (m *RestartConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartConfig.Unmarshal(m, b)
}
func (m *RestartConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartConfig.Marshal(b, m, deterministic)
}
func (m *RestartConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartConfig.Merge(m, src)
}
func (m *RestartConfig) XXX_Size() int {
	return xxx_messageInfo_RestartConfig.Size(m)
}
func (m *RestartConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RestartConfig proto.InternalMessageInfo

func (m *RestartConfig) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

//*
//  Request message for JobService.RestartJob method.
//  Experimental only
type RestartJobRequest struct {
	// The job to restart
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instances to restart, default to all
	Ranges []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// The resourceVersion received from last job operation
	// call for concurrency control
	ResourceVersion uint64 `protobuf:"varint,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The config for restart a job
	RestartConfig        *RestartConfig `protobuf:"bytes,4,opt,name=restartConfig,proto3" json:"restartConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RestartJobRequest) Reset()         { *m = RestartJobRequest{} }
func (m *RestartJobRequest) String() string { return proto.CompactTextString(m) }
func (*RestartJobRequest) ProtoMessage()    {}
func (*RestartJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{11}
}

func (m *RestartJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartJobRequest.Unmarshal(m, b)
}
func (m *RestartJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartJobRequest.Marshal(b, m, deterministic)
}
func (m *RestartJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartJobRequest.Merge(m, src)
}
func (m *RestartJobRequest) XXX_Size() int {
	return xxx_messageInfo_RestartJobRequest.Size(m)
}
func (m *RestartJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartJobRequest proto.InternalMessageInfo

func (m *RestartJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RestartJobRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *RestartJobRequest) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *RestartJobRequest) GetRestartConfig() *RestartConfig {
	if m != nil {
		return m.RestartConfig
	}
	return nil
}

//*
//  Response message for JobService.RestartJob method.
//
//  Return errors:
//    INVALID_ARGUMENT:  if the job ID or job resourceVersion is invalid.
//    NOT_FOUND:         if the job ID is not found.
//
//  Experimental only
type RestartJobResponse struct {
	// The new resourceVersion after the operation
	ResourceVersion uint64 `protobuf:"varint,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// updateID associated with the restart
	UpdateID             *peloton.UpdateID `protobuf:"bytes,2,opt,name=updateID,proto3" json:"updateID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RestartJobResponse) Reset()         { *m = RestartJobResponse{} }
func (m *RestartJobResponse) String() string { return proto.CompactTextString(m) }
func (*RestartJobResponse) ProtoMessage()    {}
func (*RestartJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{12}
}

func (m *RestartJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartJobResponse.Unmarshal(m, b)
}
func (m *RestartJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartJobResponse.Marshal(b, m, deterministic)
}
func (m *RestartJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartJobResponse.Merge(m, src)
}
func (m *RestartJobResponse) XXX_Size() int {
	return xxx_messageInfo_RestartJobResponse.Size(m)
}
func (m *RestartJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestartJobResponse proto.InternalMessageInfo

func (m *RestartJobResponse) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *RestartJobResponse) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

//*
//  Request message for JobService.RefreshJob method.
//  Experimental only
type RefreshJobRequest struct {
	// The job ID to look up the job.
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RefreshJobRequest) Reset()         { *m = RefreshJobRequest{} }
func (m *RefreshJobRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshJobRequest) ProtoMessage()    {}
func (*RefreshJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{13}
}

func (m *RefreshJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshJobRequest.Unmarshal(m, b)
}
func (m *RefreshJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshJobRequest.Marshal(b, m, deterministic)
}
func (m *RefreshJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshJobRequest.Merge(m, src)
}
func (m *RefreshJobRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshJobRequest.Size(m)
}
func (m *RefreshJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshJobRequest proto.InternalMessageInfo

func (m *RefreshJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

//*
//  Response message for JobService.RefreshJob method.
//
//  Return errors:
//    NOT_FOUND:  if the job is not found in Peloton.
type RefreshJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshJobResponse) Reset()         { *m = RefreshJobResponse{} }
func (m *RefreshJobResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshJobResponse) ProtoMessage()    {}
func (*RefreshJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{14}
}

func (m *RefreshJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshJobResponse.Unmarshal(m, b)
}
func (m *RefreshJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshJobResponse.Marshal(b, m, deterministic)
}
func (m *RefreshJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshJobResponse.Merge(m, src)
}
func (m *RefreshJobResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshJobResponse.Size(m)
}
func (m *RefreshJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshJobResponse proto.InternalMessageInfo

//*
//  Request message for JobService.GetJobCache method.
type GetJobCacheRequest struct {
	// The job ID to look up the job.
	Id                   *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetJobCacheRequest) Reset()         { *m = GetJobCacheRequest{} }
func (m *GetJobCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobCacheRequest) ProtoMessage()    {}
func (*GetJobCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{15}
}

func (m *GetJobCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobCacheRequest.Unmarshal(m, b)
}
func (m *GetJobCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetJobCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobCacheRequest.Merge(m, src)
}
func (m *GetJobCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobCacheRequest.Size(m)
}
func (m *GetJobCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobCacheRequest proto.InternalMessageInfo

func (m *GetJobCacheRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

//*
//  Response message for JobService.GetJobCache method.
//
//  Return errors:
//    NOT_FOUND:      if the job is not found in Peloton cache.
//    INTERNAL_ERROR: if fail to read cache due to internal error.
type GetJobCacheResponse struct {
	// The job configuration in cache of the matching job.
	Config *job.JobConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The job runtime in cache of the matching job.
	Runtime              *job.RuntimeInfo `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetJobCacheResponse) Reset()         { *m = GetJobCacheResponse{} }
func (m *GetJobCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobCacheResponse) ProtoMessage()    {}
func (*GetJobCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{16}
}

func (m *GetJobCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobCacheResponse.Unmarshal(m, b)
}
func (m *GetJobCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetJobCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobCacheResponse.Merge(m, src)
}
func (m *GetJobCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetJobCacheResponse.Size(m)
}
func (m *GetJobCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobCacheResponse proto.InternalMessageInfo

func (m *GetJobCacheResponse) GetConfig() *job.JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GetJobCacheResponse) GetRuntime() *job.RuntimeInfo {
	if m != nil {
		return m.Runtime
	}
	return nil
}

//*
// StartConfig is the optional config for StartJobRequest
type StartConfig struct {
	// batch size of rolling start, if unset or 0 all tasks specified
	// will be started at the same time.
	BatchSize            uint32   `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartConfig) Reset()         { *m = StartConfig{} }
func (m *StartConfig) String() string { return proto.CompactTextString(m) }
func (*StartConfig) ProtoMessage()    {}
func (*StartConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{17}
}

func (m *StartConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartConfig.Unmarshal(m, b)
}
func (m *StartConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartConfig.Marshal(b, m, deterministic)
}
func (m *StartConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartConfig.Merge(m, src)
}
func (m *StartConfig) XXX_Size() int {
	return xxx_messageInfo_StartConfig.Size(m)
}
func (m *StartConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StartConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StartConfig proto.InternalMessageInfo

func (m *StartConfig) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

//*
//  Request message for JobService.StartJob method.
//  Experimental only
type StartJobRequest struct {
	// The job to start
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instances to start, default to all
	Ranges []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// The resourceVersion received from last job operation
	// call for concurrency control
	ResourceVersion uint64 `protobuf:"varint,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The config for starting a job
	StartConfig          *StartConfig `protobuf:"bytes,4,opt,name=startConfig,proto3" json:"startConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StartJobRequest) Reset()         { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()    {}
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{18}
}

func (m *StartJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartJobRequest.Unmarshal(m, b)
}
func (m *StartJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartJobRequest.Marshal(b, m, deterministic)
}
func (m *StartJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartJobRequest.Merge(m, src)
}
func (m *StartJobRequest) XXX_Size() int {
	return xxx_messageInfo_StartJobRequest.Size(m)
}
func (m *StartJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartJobRequest proto.InternalMessageInfo

func (m *StartJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StartJobRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *StartJobRequest) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StartJobRequest) GetStartConfig() *StartConfig {
	if m != nil {
		return m.StartConfig
	}
	return nil
}

//*
//  Response message for JobService.StartJob method.
//
//  Return errors:
//    INVALID_ARGUMENT:  if the job ID or job resourceVersion is invalid.
//    NOT_FOUND:         if the job ID is not found.
//
//  Experimental only
type StartJobResponse struct {
	// The new resourceVersion after the operation
	ResourceVersion uint64 `protobuf:"varint,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// updateID associated with the start
	UpdateID             *peloton.UpdateID `protobuf:"bytes,2,opt,name=updateID,proto3" json:"updateID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StartJobResponse) Reset()         { *m = StartJobResponse{} }
func (m *StartJobResponse) String() string { return proto.CompactTextString(m) }
func (*StartJobResponse) ProtoMessage()    {}
func (*StartJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{19}
}

func (m *StartJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartJobResponse.Unmarshal(m, b)
}
func (m *StartJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartJobResponse.Marshal(b, m, deterministic)
}
func (m *StartJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartJobResponse.Merge(m, src)
}
func (m *StartJobResponse) XXX_Size() int {
	return xxx_messageInfo_StartJobResponse.Size(m)
}
func (m *StartJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartJobResponse proto.InternalMessageInfo

func (m *StartJobResponse) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StartJobResponse) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

//*
// StopConfig is the optional config for StopJobRequest
type StopConfig struct {
	// batch size of rolling stop, if unset or 0 all tasks specified
	// will be stop at the same time.
	BatchSize            uint32   `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopConfig) Reset()         { *m = StopConfig{} }
func (m *StopConfig) String() string { return proto.CompactTextString(m) }
func (*StopConfig) ProtoMessage()    {}
func (*StopConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{20}
}

func (m *StopConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopConfig.Unmarshal(m, b)
}
func (m *StopConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopConfig.Marshal(b, m, deterministic)
}
func (m *StopConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopConfig.Merge(m, src)
}
func (m *StopConfig) XXX_Size() int {
	return xxx_messageInfo_StopConfig.Size(m)
}
func (m *StopConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StopConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StopConfig proto.InternalMessageInfo

func (m *StopConfig) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

//*
//  Request message for JobService.StopJobRequest method.
//  Experimental only
type StopJobRequest struct {
	// The job to stop
	Id *peloton.JobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The instances to stop, default to all
	Ranges []*task.InstanceRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	// The resourceVersion received from last job operation
	// call for concurrency control
	ResourceVersion uint64 `protobuf:"varint,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// The config for stopping a job
	StopConfig           *StopConfig `protobuf:"bytes,4,opt,name=stopConfig,proto3" json:"stopConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StopJobRequest) Reset()         { *m = StopJobRequest{} }
func (m *StopJobRequest) String() string { return proto.CompactTextString(m) }
func (*StopJobRequest) ProtoMessage()    {}
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{21}
}

func (m *StopJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopJobRequest.Unmarshal(m, b)
}
func (m *StopJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopJobRequest.Marshal(b, m, deterministic)
}
func (m *StopJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopJobRequest.Merge(m, src)
}
func (m *StopJobRequest) XXX_Size() int {
	return xxx_messageInfo_StopJobRequest.Size(m)
}
func (m *StopJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopJobRequest proto.InternalMessageInfo

func (m *StopJobRequest) GetId() *peloton.JobID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StopJobRequest) GetRanges() []*task.InstanceRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *StopJobRequest) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StopJobRequest) GetStopConfig() *StopConfig {
	if m != nil {
		return m.StopConfig
	}
	return nil
}

//*
//  Response message for JobService.StopJob method.
//
//  Return errors:
//    INVALID_ARGUMENT:  if the job ID or job resourceVersion is invalid.
//    NOT_FOUND:         if the job ID is not found.
//
//  Experimental only
type StopJobResponse struct {
	// The new resourceVersion after the operation
	ResourceVersion uint64 `protobuf:"varint,1,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// updateID associated with the stop
	UpdateID             *peloton.UpdateID `protobuf:"bytes,2,opt,name=updateID,proto3" json:"updateID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StopJobResponse) Reset()         { *m = StopJobResponse{} }
func (m *StopJobResponse) String() string { return proto.CompactTextString(m) }
func (*StopJobResponse) ProtoMessage()    {}
func (*StopJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc1943e8a369305, []int{22}
}

func (m *StopJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopJobResponse.Unmarshal(m, b)
}
func (m *StopJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopJobResponse.Marshal(b, m, deterministic)
}
func (m *StopJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopJobResponse.Merge(m, src)
}
func (m *StopJobResponse) XXX_Size() int {
	return xxx_messageInfo_StopJobResponse.Size(m)
}
func (m *StopJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopJobResponse proto.InternalMessageInfo

func (m *StopJobResponse) GetResourceVersion() uint64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

func (m *StopJobResponse) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateJobRequest)(nil), "peloton.api.v0.job.svc.CreateJobRequest")
	proto.RegisterType((*CreateJobResponse)(nil), "peloton.api.v0.job.svc.CreateJobResponse")
	proto.RegisterType((*GetJobRequest)(nil), "peloton.api.v0.job.svc.GetJobRequest")
	proto.RegisterType((*GetJobResponse)(nil), "peloton.api.v0.job.svc.GetJobResponse")
	proto.RegisterType((*QueryJobsRequest)(nil), "peloton.api.v0.job.svc.QueryJobsRequest")
	proto.RegisterType((*QueryJobsResponse)(nil), "peloton.api.v0.job.svc.QueryJobsResponse")
	proto.RegisterType((*DeleteJobRequest)(nil), "peloton.api.v0.job.svc.DeleteJobRequest")
	proto.RegisterType((*DeleteJobResponse)(nil), "peloton.api.v0.job.svc.DeleteJobResponse")
	proto.RegisterType((*UpdateJobRequest)(nil), "peloton.api.v0.job.svc.UpdateJobRequest")
	proto.RegisterType((*UpdateJobResponse)(nil), "peloton.api.v0.job.svc.UpdateJobResponse")
	proto.RegisterType((*RestartConfig)(nil), "peloton.api.v0.job.svc.RestartConfig")
	proto.RegisterType((*RestartJobRequest)(nil), "peloton.api.v0.job.svc.RestartJobRequest")
	proto.RegisterType((*RestartJobResponse)(nil), "peloton.api.v0.job.svc.RestartJobResponse")
	proto.RegisterType((*RefreshJobRequest)(nil), "peloton.api.v0.job.svc.RefreshJobRequest")
	proto.RegisterType((*RefreshJobResponse)(nil), "peloton.api.v0.job.svc.RefreshJobResponse")
	proto.RegisterType((*GetJobCacheRequest)(nil), "peloton.api.v0.job.svc.GetJobCacheRequest")
	proto.RegisterType((*GetJobCacheResponse)(nil), "peloton.api.v0.job.svc.GetJobCacheResponse")
	proto.RegisterType((*StartConfig)(nil), "peloton.api.v0.job.svc.StartConfig")
	proto.RegisterType((*StartJobRequest)(nil), "peloton.api.v0.job.svc.StartJobRequest")
	proto.RegisterType((*StartJobResponse)(nil), "peloton.api.v0.job.svc.StartJobResponse")
	proto.RegisterType((*StopConfig)(nil), "peloton.api.v0.job.svc.StopConfig")
	proto.RegisterType((*StopJobRequest)(nil), "peloton.api.v0.job.svc.StopJobRequest")
	proto.RegisterType((*StopJobResponse)(nil), "peloton.api.v0.job.svc.StopJobResponse")
}

func init() {
	proto.RegisterFile("peloton/api/v0/job/svc/job_svc.proto", fileDescriptor_abc1943e8a369305)
}

var fileDescriptor_abc1943e8a369305 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0x3a, 0xc6, 0x6e, 0x9e, 0x95, 0xd6, 0x9e, 0xa0, 0xca, 0x32, 0xa1, 0x44, 0x43, 0x69,
	0xdd, 0x54, 0xdd, 0x84, 0x54, 0x95, 0x00, 0x55, 0x08, 0x92, 0x20, 0xb0, 0xb9, 0x84, 0x59, 0x15,
	0xa4, 0x4a, 0x88, 0xec, 0x6e, 0x26, 0xc9, 0x06, 0xb3, 0xb3, 0x9d, 0x19, 0x5b, 0x6a, 0xc5, 0x85,
	0x13, 0x07, 0xbe, 0x0d, 0x5f, 0x80, 0xef, 0xc1, 0x37, 0xe0, 0x80, 0xc4, 0x85, 0x3b, 0xda, 0xd9,
	0xd9, 0xf5, 0x64, 0xb2, 0x6b, 0x3b, 0x8e, 0x04, 0xf4, 0x62, 0xcb, 0xde, 0xdf, 0xfb, 0xf7, 0x9b,
	0xdf, 0xbc, 0xf7, 0x16, 0xee, 0x26, 0x74, 0xc4, 0x24, 0x8b, 0xb7, 0xfd, 0x24, 0xda, 0x9e, 0xec,
	0x6c, 0x9f, 0xb3, 0x60, 0x5b, 0x4c, 0xc2, 0xf4, 0xfb, 0x3b, 0x31, 0x09, 0xdd, 0x84, 0x33, 0xc9,
	0xd0, 0x6d, 0x8d, 0x72, 0xfd, 0x24, 0x72, 0x27, 0x3b, 0xee, 0x39, 0x0b, 0x5c, 0x31, 0x09, 0x7b,
	0x1b, 0x96, 0x75, 0x0e, 0x53, 0x56, 0xbd, 0x4d, 0xeb, 0xe9, 0x8b, 0x31, 0xe5, 0x2f, 0xb3, 0x4f,
	0x8d, 0xd8, 0x28, 0x89, 0x9e, 0xfa, 0xce, 0x9e, 0xde, 0xb1, 0x9e, 0x4a, 0x5f, 0x7c, 0xaf, 0x3e,
	0xf4, 0x73, 0x3b, 0x77, 0x4e, 0x45, 0xc2, 0xd8, 0x28, 0xff, 0xce, 0x50, 0xf8, 0x2f, 0x07, 0xda,
	0xfb, 0x9c, 0xfa, 0x92, 0x0e, 0x59, 0x40, 0xe8, 0x8b, 0x31, 0x15, 0x12, 0x3d, 0x82, 0x5a, 0x74,
	0xdc, 0x75, 0x36, 0x9d, 0x7e, 0x6b, 0xf7, 0x6d, 0xd7, 0xaa, 0x2e, 0xff, 0x39, 0x64, 0xc1, 0xe0,
	0x80, 0xd4, 0xa2, 0x63, 0xf4, 0x14, 0xea, 0xa9, 0xc7, 0x6e, 0x4d, 0x19, 0xf4, 0x6d, 0x83, 0x3c,
	0x20, 0xa1, 0x82, 0x8d, 0x79, 0x48, 0x0f, 0x19, 0x1b, 0x1d, 0xfa, 0xf2, 0x8c, 0x28, 0x2b, 0xf4,
	0x04, 0x1a, 0x21, 0x8b, 0x4f, 0xa2, 0xd3, 0xee, 0x4a, 0x79, 0xc0, 0xb4, 0xe4, 0x21, 0x0b, 0xf6,
	0x15, 0x88, 0x68, 0x30, 0xfa, 0x00, 0x9a, 0x82, 0x86, 0x9c, 0x4a, 0xd1, 0xad, 0x6f, 0xae, 0xf4,
	0x5b, 0xbb, 0x77, 0xaa, 0x12, 0xf5, 0x14, 0x8c, 0xe4, 0x70, 0xfc, 0x05, 0x74, 0x8c, 0x8a, 0x45,
	0xc2, 0x62, 0x41, 0xd1, 0x63, 0x78, 0xe3, 0x9c, 0x05, 0x83, 0x05, 0xab, 0xce, 0xb0, 0xf8, 0x63,
	0x58, 0xfb, 0x9c, 0xca, 0xa5, 0x89, 0xc3, 0x3f, 0x39, 0x70, 0x33, 0x77, 0xa0, 0xf3, 0x78, 0x02,
	0x0d, 0x4e, 0xc5, 0x78, 0x24, 0xab, 0xbc, 0x58, 0x6c, 0x64, 0x60, 0x93, 0x8d, 0x95, 0xab, 0xb1,
	0xf1, 0x8b, 0x03, 0xed, 0xaf, 0x52, 0xd1, 0x0d, 0x59, 0x20, 0xf2, 0x3a, 0xde, 0x87, 0xba, 0x48,
	0x68, 0x38, 0x2b, 0x07, 0x65, 0xe3, 0x25, 0x34, 0x24, 0x0a, 0x8a, 0x0e, 0x00, 0x12, 0xff, 0x34,
	0x8a, 0x7d, 0x19, 0xb1, 0x58, 0x4b, 0xe1, 0xae, 0x6d, 0x98, 0xa9, 0xfb, 0xb0, 0xc0, 0x29, 0x7b,
	0xc3, 0x0e, 0xff, 0xe6, 0x40, 0xc7, 0xc8, 0xa6, 0x20, 0xa5, 0xc9, 0x69, 0xc8, 0xf8, 0xb1, 0xe8,
	0x3a, 0xaa, 0xba, 0xb7, 0x2a, 0x58, 0x19, 0xc4, 0x27, 0x8c, 0xe4, 0x58, 0xf4, 0x49, 0x49, 0x4a,
	0x9b, 0xf3, 0x52, 0x32, 0xd3, 0x29, 0x78, 0x58, 0x59, 0x98, 0x07, 0xfc, 0x29, 0xb4, 0x0f, 0xe8,
	0x88, 0x5e, 0xe3, 0x3e, 0xe1, 0x75, 0xe8, 0x18, 0x2e, 0x32, 0x0e, 0xf0, 0xaf, 0x0e, 0xb4, 0x9f,
	0x25, 0xc7, 0xd7, 0xba, 0xa8, 0xd3, 0xab, 0x56, 0x5b, 0xf2, 0xaa, 0x5d, 0x51, 0x5c, 0xeb, 0xd0,
	0x31, 0x72, 0xd6, 0x95, 0x3c, 0x82, 0x35, 0x42, 0x85, 0xf4, 0xb9, 0xcc, 0xe2, 0xa0, 0x0d, 0x58,
	0x0d, 0x7c, 0x19, 0x9e, 0x79, 0xd1, 0x2b, 0xaa, 0x8a, 0x59, 0x23, 0xd3, 0x3f, 0xf0, 0xdf, 0x0e,
	0x74, 0x34, 0x7e, 0xf9, 0xca, 0x3f, 0x82, 0x06, 0xf7, 0xe3, 0x53, 0x2a, 0xba, 0x35, 0x55, 0x01,
	0xb6, 0x4d, 0x54, 0xe3, 0x1c, 0xc4, 0x42, 0xfa, 0x71, 0x48, 0x49, 0x0a, 0x25, 0xda, 0x02, 0xf5,
	0xe1, 0x16, 0xd7, 0xad, 0xeb, 0x6b, 0xca, 0x45, 0xaa, 0xa5, 0x54, 0x0f, 0x75, 0x62, 0xff, 0x8d,
	0xbe, 0x84, 0x35, 0x6e, 0x56, 0xd6, 0xad, 0xab, 0xfc, 0xde, 0x73, 0xcb, 0x07, 0x84, 0x7b, 0x81,
	0x06, 0x72, 0xd1, 0x16, 0xff, 0x08, 0xc8, 0x2c, 0x5b, 0x5f, 0x85, 0x92, 0x64, 0x9c, 0xf2, 0x64,
	0x9e, 0xc2, 0x8d, 0xb1, 0xe2, 0x7e, 0x70, 0x50, 0xa5, 0xfd, 0xfc, 0xe7, 0x33, 0x8d, 0x23, 0x85,
	0x05, 0xde, 0x4b, 0x49, 0x3f, 0xe1, 0x54, 0x9c, 0x2d, 0xaf, 0xe3, 0x37, 0xd3, 0x0a, 0xa6, 0x3e,
	0xf4, 0xf1, 0xef, 0x03, 0xca, 0x7a, 0xde, 0xbe, 0x1f, 0x9e, 0xd1, 0x25, 0x5d, 0xff, 0xec, 0xc0,
	0xfa, 0x05, 0x2f, 0xd3, 0xf6, 0xa9, 0x15, 0xee, 0x5c, 0x45, 0xe1, 0x1f, 0x42, 0x93, 0x8f, 0x63,
	0x19, 0xfd, 0x40, 0x35, 0x55, 0xef, 0x94, 0xd9, 0x91, 0x0c, 0xa2, 0x9b, 0x4c, 0xf6, 0x03, 0x3f,
	0x84, 0x96, 0xb7, 0xb0, 0x96, 0xff, 0x74, 0xe0, 0x96, 0xf7, 0x3a, 0x28, 0xf9, 0x33, 0x68, 0x5d,
	0xd6, 0xf1, 0xbb, 0x55, 0x3a, 0x36, 0x08, 0x20, 0xa6, 0x1d, 0x7e, 0x05, 0x6d, 0xef, 0xbf, 0x52,
	0xf0, 0x16, 0x80, 0x27, 0x59, 0xb2, 0xd0, 0xb9, 0xfc, 0xe1, 0xc0, 0xcd, 0x14, 0xfc, 0x7f, 0x3f,
	0x96, 0x3d, 0x00, 0x51, 0xd4, 0xa4, 0x4f, 0x05, 0x57, 0x9f, 0x4a, 0x8e, 0x24, 0x86, 0x15, 0x7e,
	0x99, 0x4a, 0x50, 0x97, 0xfa, 0xef, 0x1e, 0xc9, 0xee, 0xef, 0x4d, 0x80, 0x21, 0x0b, 0x3c, 0xca,
	0x27, 0x51, 0x48, 0xd1, 0x11, 0xac, 0x16, 0x8b, 0x18, 0xea, 0x57, 0x95, 0x61, 0x6f, 0xa7, 0xbd,
	0x07, 0x0b, 0x20, 0x75, 0x61, 0xdf, 0x40, 0x23, 0xeb, 0x12, 0xa8, 0xb2, 0x07, 0x5f, 0x58, 0xe0,
	0x7a, 0xf7, 0xe6, 0xc1, 0xb4, 0xe3, 0x23, 0x58, 0x2d, 0xd6, 0x94, 0xea, 0xd4, 0xed, 0xbd, 0xaa,
	0x3a, 0xf5, 0xcb, 0x3b, 0xcf, 0x11, 0xac, 0x16, 0x4b, 0x40, 0x75, 0x04, 0x7b, 0xd5, 0xa8, 0x8e,
	0x70, 0x69, 0xa3, 0x48, 0x23, 0x14, 0xc3, 0xb9, 0x3a, 0x82, 0xbd, 0x73, 0x54, 0x47, 0xb8, 0x34,
	0xe9, 0x51, 0x08, 0x30, 0x1d, 0x61, 0xe8, 0xc1, 0x9c, 0x31, 0x68, 0xc4, 0xd8, 0x5a, 0x04, 0xaa,
	0x83, 0x7c, 0x0b, 0x37, 0xf2, 0x1e, 0x83, 0xee, 0xcf, 0xec, 0x50, 0x46, 0x80, 0xfe, 0x7c, 0xa0,
	0x76, 0xff, 0x1c, 0x9a, 0xfa, 0xba, 0xa0, 0x7b, 0xb3, 0x6e, 0x9a, 0xe1, 0xfc, 0xfe, 0x5c, 0x9c,
	0xc9, 0x4f, 0x3e, 0x20, 0x67, 0xf1, 0x63, 0x0d, 0xe2, 0x59, 0xfc, 0xd8, 0xf3, 0x16, 0x9d, 0x40,
	0xcb, 0x98, 0x94, 0x68, 0x6b, 0xb6, 0xc2, 0xcd, 0xa1, 0xdc, 0x7b, 0xb8, 0x10, 0x36, 0x8b, 0xb3,
	0xb7, 0x03, 0x15, 0xef, 0xc1, 0xcf, 0x6f, 0x97, 0xbf, 0x45, 0x07, 0x0d, 0xf5, 0x0a, 0xfa, 0xf8,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xe8, 0xed, 0x61, 0x66, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobServiceClient interface {
	// Create a job entity for a given config.
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	// Get the config of a job entity.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	// Query the jobs that match a list of labels.
	QueryJobs(ctx context.Context, in *QueryJobsRequest, opts ...grpc.CallOption) (*QueryJobsResponse, error)
	// Delete a job and stop all related tasks.
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	// Update a job entity with a new config. This is a temporary API
	// for updating batch jobs. It only supports adding new instances to an
	// existing job. It will be deprecated when the UpgradeService API
	// is implemented.
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	// Restart the tasks specified in restart request
	// Experimental only
	RestartJob(ctx context.Context, in *RestartJobRequest, opts ...grpc.CallOption) (*RestartJobResponse, error)
	// StartJob the tasks specified in start request
	// Experimental only
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	// Stop the tasks specified in stop request
	// Experimental only
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error)
	// Debug only method. Allows user to load job runtime state from DB
	// and re-execute the action associated with current state.
	RefreshJob(ctx context.Context, in *RefreshJobRequest, opts ...grpc.CallOption) (*RefreshJobResponse, error)
	// Debug only method. Get the cache of a job stored in Peloton.
	GetJobCache(ctx context.Context, in *GetJobCacheRequest, opts ...grpc.CallOption) (*GetJobCacheResponse, error)
}

type jobServiceClient struct {
	cc *grpc.ClientConn
}

func NewJobServiceClient(cc *grpc.ClientConn) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) QueryJobs(ctx context.Context, in *QueryJobsRequest, opts ...grpc.CallOption) (*QueryJobsResponse, error) {
	out := new(QueryJobsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/QueryJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) RestartJob(ctx context.Context, in *RestartJobRequest, opts ...grpc.CallOption) (*RestartJobResponse, error) {
	out := new(RestartJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/RestartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error) {
	out := new(StopJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) RefreshJob(ctx context.Context, in *RefreshJobRequest, opts ...grpc.CallOption) (*RefreshJobResponse, error) {
	out := new(RefreshJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/RefreshJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobCache(ctx context.Context, in *GetJobCacheRequest, opts ...grpc.CallOption) (*GetJobCacheResponse, error) {
	out := new(GetJobCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.job.svc.JobService/GetJobCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
type JobServiceServer interface {
	// Create a job entity for a given config.
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	// Get the config of a job entity.
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	// Query the jobs that match a list of labels.
	QueryJobs(context.Context, *QueryJobsRequest) (*QueryJobsResponse, error)
	// Delete a job and stop all related tasks.
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	// Update a job entity with a new config. This is a temporary API
	// for updating batch jobs. It only supports adding new instances to an
	// existing job. It will be deprecated when the UpgradeService API
	// is implemented.
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error)
	// Restart the tasks specified in restart request
	// Experimental only
	RestartJob(context.Context, *RestartJobRequest) (*RestartJobResponse, error)
	// StartJob the tasks specified in start request
	// Experimental only
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	// Stop the tasks specified in stop request
	// Experimental only
	StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error)
	// Debug only method. Allows user to load job runtime state from DB
	// and re-execute the action associated with current state.
	RefreshJob(context.Context, *RefreshJobRequest) (*RefreshJobResponse, error)
	// Debug only method. Get the cache of a job stored in Peloton.
	GetJobCache(context.Context, *GetJobCacheRequest) (*GetJobCacheResponse, error)
}

func RegisterJobServiceServer(s *grpc.Server, srv JobServiceServer) {
	s.RegisterService(&_JobService_serviceDesc, srv)
}

func _JobService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_QueryJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).QueryJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/QueryJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).QueryJobs(ctx, req.(*QueryJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_RestartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).RestartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/RestartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).RestartJob(ctx, req.(*RestartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_RefreshJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).RefreshJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/RefreshJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).RefreshJob(ctx, req.(*RefreshJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.job.svc.JobService/GetJobCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobCache(ctx, req.(*GetJobCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.v0.job.svc.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobService_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobService_GetJob_Handler,
		},
		{
			MethodName: "QueryJobs",
			Handler:    _JobService_QueryJobs_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobService_DeleteJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _JobService_UpdateJob_Handler,
		},
		{
			MethodName: "RestartJob",
			Handler:    _JobService_RestartJob_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _JobService_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobService_StopJob_Handler,
		},
		{
			MethodName: "RefreshJob",
			Handler:    _JobService_RefreshJob_Handler,
		},
		{
			MethodName: "GetJobCache",
			Handler:    _JobService_GetJobCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/api/v0/job/svc/job_svc.proto",
}
