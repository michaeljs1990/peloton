// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/update/update.proto

package update

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Runtime state of a job update
type State int32

const (
	// Invalid protobuf value
	State_INVALID State = 0
	// The update has been created but not started yet
	State_INITIALIZED State = 1
	// The update is rolling forward
	State_ROLLING_FORWARD State = 2
	// The update has been paused
	State_PAUSED State = 3
	// The update has completed successfully
	State_SUCCEEDED State = 4
	// The update was aborted/cancelled
	State_ABORTED State = 5
	// The update is failed
	State_FAILED State = 6
	// The update is rolling barckward
	State_ROLLING_BACKWARD State = 7
	// The update was rolled back due to failure
	State_ROLLED_BACK State = 8
)

var State_name = map[int32]string{
	0: "INVALID",
	1: "INITIALIZED",
	2: "ROLLING_FORWARD",
	3: "PAUSED",
	4: "SUCCEEDED",
	5: "ABORTED",
	6: "FAILED",
	7: "ROLLING_BACKWARD",
	8: "ROLLED_BACK",
}

var State_value = map[string]int32{
	"INVALID":          0,
	"INITIALIZED":      1,
	"ROLLING_FORWARD":  2,
	"PAUSED":           3,
	"SUCCEEDED":        4,
	"ABORTED":          5,
	"FAILED":           6,
	"ROLLING_BACKWARD": 7,
	"ROLLED_BACK":      8,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a968e5d5ea11a0c2, []int{0}
}

//*
//  Update options for a job update
type UpdateConfig struct {
	// Update batch size of the deployment
	BatchSize uint32 `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	// Update batch percentage of the deployment. If present,
	// will take precedence over batchSize
	BatchPercentage float64 `protobuf:"fixed64,2,opt,name=batchPercentage,proto3" json:"batchPercentage,omitempty"`
	// Whether or not to stop all instance before update
	StopBeforeUpdate bool `protobuf:"varint,3,opt,name=stopBeforeUpdate,proto3" json:"stopBeforeUpdate,omitempty"`
	// startPaused indicates if the update should start in the paused state,
	// requiring an explicit resume to initiate.
	StartPaused bool `protobuf:"varint,4,opt,name=startPaused,proto3" json:"startPaused,omitempty"`
	// rollbackOnFailure indicates if the update should be rolled back
	// automatically if failure is detected
	RollbackOnFailure bool `protobuf:"varint,5,opt,name=rollbackOnFailure,proto3" json:"rollbackOnFailure,omitempty"`
	// maxInstanceAttempts is the maximum attempt times for one task.
	// If the value is 0, the instance can be retried for infinite
	// times.
	MaxInstanceAttempts uint32 `protobuf:"varint,6,opt,name=maxInstanceAttempts,proto3" json:"maxInstanceAttempts,omitempty"`
	// maxFailureInstances is the number of failed instances in one
	// update that allowed.
	// If the value is 0, there is no limit for max failure instances
	// and the update is marked successful even if all of the instances
	// fail.
	MaxFailureInstances uint32 `protobuf:"varint,7,opt,name=maxFailureInstances,proto3" json:"maxFailureInstances,omitempty"`
	// If set to true, peloton would try to place the task
	// restarted/updated on the host it previously run on.
	// It is best effort, and has no guarantee of success.
	InPlace bool `protobuf:"varint,8,opt,name=inPlace,proto3" json:"inPlace,omitempty"`
	// Experimental: this flag is for experimental purpose and
	// will be removed in the future release.
	// If set to true, peloton would start tasks updated
	// if the tasks are killed previously.
	// By default, killed tasks would remain killed, and
	// run with new version when running again.
	StartTasks           bool     `protobuf:"varint,9,opt,name=startTasks,proto3" json:"startTasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateConfig) Reset()         { *m = UpdateConfig{} }
func (m *UpdateConfig) String() string { return proto.CompactTextString(m) }
func (*UpdateConfig) ProtoMessage()    {}
func (*UpdateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a968e5d5ea11a0c2, []int{0}
}

func (m *UpdateConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateConfig.Unmarshal(m, b)
}
func (m *UpdateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateConfig.Marshal(b, m, deterministic)
}
func (m *UpdateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateConfig.Merge(m, src)
}
func (m *UpdateConfig) XXX_Size() int {
	return xxx_messageInfo_UpdateConfig.Size(m)
}
func (m *UpdateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateConfig proto.InternalMessageInfo

func (m *UpdateConfig) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *UpdateConfig) GetBatchPercentage() float64 {
	if m != nil {
		return m.BatchPercentage
	}
	return 0
}

func (m *UpdateConfig) GetStopBeforeUpdate() bool {
	if m != nil {
		return m.StopBeforeUpdate
	}
	return false
}

func (m *UpdateConfig) GetStartPaused() bool {
	if m != nil {
		return m.StartPaused
	}
	return false
}

func (m *UpdateConfig) GetRollbackOnFailure() bool {
	if m != nil {
		return m.RollbackOnFailure
	}
	return false
}

func (m *UpdateConfig) GetMaxInstanceAttempts() uint32 {
	if m != nil {
		return m.MaxInstanceAttempts
	}
	return 0
}

func (m *UpdateConfig) GetMaxFailureInstances() uint32 {
	if m != nil {
		return m.MaxFailureInstances
	}
	return 0
}

func (m *UpdateConfig) GetInPlace() bool {
	if m != nil {
		return m.InPlace
	}
	return false
}

func (m *UpdateConfig) GetStartTasks() bool {
	if m != nil {
		return m.StartTasks
	}
	return false
}

//*
//  UpdateStatus provides current runtime status of an update
type UpdateStatus struct {
	// Number of tasks that have been updated
	NumTasksDone uint32 `protobuf:"varint,1,opt,name=numTasksDone,proto3" json:"numTasksDone,omitempty"`
	// Number of tasks to be updated
	NumTasksRemaining uint32 `protobuf:"varint,2,opt,name=numTasksRemaining,proto3" json:"numTasksRemaining,omitempty"`
	// Runtime state of the update
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=peloton.api.v0.update.State" json:"state,omitempty"`
	// Number of tasks that failed during the update
	NumTasksFailed       uint32   `protobuf:"varint,4,opt,name=numTasksFailed,proto3" json:"numTasksFailed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateStatus) Reset()         { *m = UpdateStatus{} }
func (m *UpdateStatus) String() string { return proto.CompactTextString(m) }
func (*UpdateStatus) ProtoMessage()    {}
func (*UpdateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a968e5d5ea11a0c2, []int{1}
}

func (m *UpdateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateStatus.Unmarshal(m, b)
}
func (m *UpdateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateStatus.Marshal(b, m, deterministic)
}
func (m *UpdateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatus.Merge(m, src)
}
func (m *UpdateStatus) XXX_Size() int {
	return xxx_messageInfo_UpdateStatus.Size(m)
}
func (m *UpdateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatus proto.InternalMessageInfo

func (m *UpdateStatus) GetNumTasksDone() uint32 {
	if m != nil {
		return m.NumTasksDone
	}
	return 0
}

func (m *UpdateStatus) GetNumTasksRemaining() uint32 {
	if m != nil {
		return m.NumTasksRemaining
	}
	return 0
}

func (m *UpdateStatus) GetState() State {
	if m != nil {
		return m.State
	}
	return State_INVALID
}

func (m *UpdateStatus) GetNumTasksFailed() uint32 {
	if m != nil {
		return m.NumTasksFailed
	}
	return 0
}

//*
// Information of an update, such as update config and runtime status
type UpdateInfo struct {
	// Update ID of the job update
	UpdateId *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateId,proto3" json:"updateId,omitempty"`
	// Update configuration
	Config *UpdateConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Update runtime status
	Status *UpdateStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Job ID of the job update
	JobId *peloton.JobID `protobuf:"bytes,4,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// Configuration version of the job after this update
	ConfigVersion uint64 `protobuf:"varint,5,opt,name=configVersion,proto3" json:"configVersion,omitempty"`
	// Job configuration version before the update
	PrevConfigVersion uint64 `protobuf:"varint,6,opt,name=prevConfigVersion,proto3" json:"prevConfigVersion,omitempty"`
	// Opaque metadata provided by the user
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,7,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateInfo) Reset()         { *m = UpdateInfo{} }
func (m *UpdateInfo) String() string { return proto.CompactTextString(m) }
func (*UpdateInfo) ProtoMessage()    {}
func (*UpdateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a968e5d5ea11a0c2, []int{2}
}

func (m *UpdateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateInfo.Unmarshal(m, b)
}
func (m *UpdateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateInfo.Marshal(b, m, deterministic)
}
func (m *UpdateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInfo.Merge(m, src)
}
func (m *UpdateInfo) XXX_Size() int {
	return xxx_messageInfo_UpdateInfo.Size(m)
}
func (m *UpdateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInfo proto.InternalMessageInfo

func (m *UpdateInfo) GetUpdateId() *peloton.UpdateID {
	if m != nil {
		return m.UpdateId
	}
	return nil
}

func (m *UpdateInfo) GetConfig() *UpdateConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateInfo) GetStatus() *UpdateStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UpdateInfo) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *UpdateInfo) GetConfigVersion() uint64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *UpdateInfo) GetPrevConfigVersion() uint64 {
	if m != nil {
		return m.PrevConfigVersion
	}
	return 0
}

func (m *UpdateInfo) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

func init() {
	proto.RegisterEnum("peloton.api.v0.update.State", State_name, State_value)
	proto.RegisterType((*UpdateConfig)(nil), "peloton.api.v0.update.UpdateConfig")
	proto.RegisterType((*UpdateStatus)(nil), "peloton.api.v0.update.UpdateStatus")
	proto.RegisterType((*UpdateInfo)(nil), "peloton.api.v0.update.UpdateInfo")
}

func init() { proto.RegisterFile("peloton/api/v0/update/update.proto", fileDescriptor_a968e5d5ea11a0c2) }

var fileDescriptor_a968e5d5ea11a0c2 = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdb, 0x6e, 0xd3, 0x30,
	0x18, 0x26, 0xdb, 0x7a, 0xd8, 0x9f, 0x75, 0x0b, 0x1e, 0x93, 0x22, 0x34, 0x50, 0x55, 0x10, 0xaa,
	0x26, 0x94, 0x4d, 0xdd, 0x25, 0xdc, 0xa4, 0x75, 0x86, 0x0c, 0xd5, 0x5a, 0xb9, 0xdb, 0x90, 0x76,
	0x33, 0xb9, 0xad, 0x37, 0xc2, 0x5a, 0x3b, 0x24, 0xee, 0x84, 0x78, 0x0c, 0x24, 0xde, 0x86, 0x87,
	0xe2, 0x11, 0x50, 0xfe, 0x24, 0x63, 0xeb, 0x41, 0x5c, 0x25, 0xfe, 0x0e, 0xff, 0xc9, 0xbf, 0x0c,
	0x8d, 0x48, 0x4e, 0xb4, 0xd1, 0xea, 0x50, 0x44, 0xe1, 0xe1, 0xdd, 0xd1, 0xe1, 0x2c, 0x1a, 0x0b,
	0x23, 0xf3, 0x8f, 0x17, 0xc5, 0xda, 0x68, 0xb2, 0x97, 0x6b, 0x3c, 0x11, 0x85, 0xde, 0xdd, 0x91,
	0x97, 0x91, 0xcf, 0xf7, 0xe7, 0xac, 0x85, 0x0a, 0x4d, 0x8d, 0x3f, 0x6b, 0xb0, 0x75, 0x8e, 0xc2,
	0x8e, 0x56, 0xd7, 0xe1, 0x0d, 0xd9, 0x87, 0xcd, 0xa1, 0x30, 0xa3, 0x2f, 0x83, 0xf0, 0x87, 0x74,
	0xad, 0xba, 0xd5, 0xac, 0xf1, 0x7f, 0x00, 0x69, 0xc2, 0x0e, 0x1e, 0xfa, 0x32, 0x1e, 0x49, 0x65,
	0xc4, 0x8d, 0x74, 0xd7, 0xea, 0x56, 0xd3, 0xe2, 0xf3, 0x30, 0x39, 0x00, 0x27, 0x31, 0x3a, 0x6a,
	0xcb, 0x6b, 0x1d, 0xcb, 0x2c, 0x83, 0xbb, 0x5e, 0xb7, 0x9a, 0x55, 0xbe, 0x80, 0x93, 0x3a, 0xd8,
	0x89, 0x11, 0xb1, 0xe9, 0x8b, 0x59, 0x22, 0xc7, 0xee, 0x06, 0xca, 0x1e, 0x42, 0xe4, 0x2d, 0x3c,
	0x8d, 0xf5, 0x64, 0x32, 0x14, 0xa3, 0xdb, 0x9e, 0x3a, 0x11, 0xe1, 0x64, 0x16, 0x4b, 0xb7, 0x84,
	0xba, 0x45, 0x82, 0x1c, 0xc1, 0xee, 0x54, 0x7c, 0x67, 0x2a, 0x31, 0x42, 0x8d, 0xa4, 0x6f, 0x8c,
	0x9c, 0x46, 0x26, 0x71, 0xcb, 0xd8, 0xcd, 0x32, 0x2a, 0x77, 0xe4, 0xfe, 0x82, 0x4d, 0xdc, 0xca,
	0xbd, 0x63, 0x9e, 0x22, 0x2e, 0x54, 0x42, 0xd5, 0x9f, 0x88, 0x91, 0x74, 0xab, 0x58, 0x47, 0x71,
	0x24, 0x2f, 0x01, 0xb0, 0xf4, 0x33, 0x91, 0xdc, 0x26, 0xee, 0x26, 0x92, 0x0f, 0x90, 0xc6, 0x6f,
	0xab, 0x18, 0xf9, 0xc0, 0x08, 0x33, 0x4b, 0x48, 0x03, 0xb6, 0xd4, 0x6c, 0x8a, 0x24, 0xd5, 0xaa,
	0x98, 0xfa, 0x23, 0x2c, 0x1d, 0x40, 0x71, 0xe6, 0x72, 0x2a, 0x42, 0x15, 0xaa, 0x1b, 0x1c, 0x7d,
	0x8d, 0x2f, 0x12, 0xa4, 0x05, 0xa5, 0xc4, 0x14, 0x13, 0xdf, 0x6e, 0xed, 0x7b, 0x4b, 0x57, 0xc3,
	0x4b, 0xf3, 0x4b, 0x9e, 0x49, 0xc9, 0x1b, 0xd8, 0x2e, 0x02, 0xa5, 0xcd, 0xe6, 0xf7, 0x50, 0xe3,
	0x73, 0x68, 0xe3, 0xe7, 0x3a, 0x40, 0x56, 0x3e, 0x53, 0xd7, 0x9a, 0xbc, 0x87, 0x6a, 0x16, 0x8d,
	0x8d, 0xb1, 0x70, 0xbb, 0x55, 0x9f, 0xcf, 0x56, 0x1c, 0x73, 0x17, 0xe5, 0xf7, 0x0e, 0xf2, 0x0e,
	0xca, 0x23, 0xdc, 0x3b, 0xec, 0xc5, 0x6e, 0xbd, 0x5a, 0x51, 0xe9, 0xc3, 0x15, 0xe5, 0xb9, 0x25,
	0x35, 0x27, 0x38, 0x41, 0x6c, 0xf3, 0x7f, 0xe6, 0x6c, 0xd8, 0x3c, 0xb7, 0x90, 0x63, 0x28, 0x7d,
	0xd5, 0x43, 0x96, 0x75, 0x69, 0xb7, 0x5e, 0xac, 0x2a, 0xfa, 0xa3, 0x1e, 0x32, 0xca, 0x33, 0x2d,
	0x79, 0x0d, 0xb5, 0x2c, 0xf7, 0x85, 0x8c, 0x93, 0x50, 0x2b, 0x5c, 0xc1, 0x0d, 0xfe, 0x18, 0x4c,
	0xef, 0x2a, 0x8a, 0xe5, 0x5d, 0xe7, 0x91, 0xb2, 0x8c, 0xca, 0x45, 0x82, 0x74, 0xc0, 0xd6, 0x91,
	0xf8, 0x36, 0x93, 0x57, 0x63, 0x61, 0x04, 0xae, 0x9c, 0xdd, 0x6a, 0xac, 0x2a, 0xa7, 0x87, 0x52,
	0x2a, 0x8c, 0xe0, 0xa0, 0xef, 0xff, 0x0f, 0x7e, 0x59, 0x50, 0xc2, 0xdb, 0x24, 0x36, 0x54, 0xd8,
	0xe9, 0x85, 0xdf, 0x65, 0xd4, 0x79, 0x42, 0x76, 0xc0, 0x66, 0xa7, 0xec, 0x8c, 0xf9, 0x5d, 0x76,
	0x19, 0x50, 0xc7, 0x22, 0xbb, 0xb0, 0xc3, 0x7b, 0xdd, 0x2e, 0x3b, 0xfd, 0x70, 0x75, 0xd2, 0xe3,
	0x9f, 0x7d, 0x4e, 0x9d, 0x35, 0x02, 0x50, 0xee, 0xfb, 0xe7, 0x83, 0x80, 0x3a, 0xeb, 0xa4, 0x06,
	0x9b, 0x83, 0xf3, 0x4e, 0x27, 0x08, 0x68, 0x40, 0x9d, 0x8d, 0x34, 0x9a, 0xdf, 0xee, 0xf1, 0xb3,
	0x80, 0x3a, 0xa5, 0x54, 0x77, 0xe2, 0xb3, 0x6e, 0x40, 0x9d, 0x32, 0x79, 0x06, 0x4e, 0x11, 0xa8,
	0xed, 0x77, 0x3e, 0x61, 0xa4, 0x4a, 0x9a, 0x2f, 0x45, 0x03, 0x8a, 0xa0, 0x53, 0x6d, 0x7b, 0xb0,
	0xfc, 0x55, 0xba, 0xdc, 0x5b, 0xfa, 0xa0, 0x0d, 0xcb, 0xf8, 0x2a, 0x1d, 0xff, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xdf, 0x36, 0x23, 0x0a, 0xf0, 0x04, 0x00, 0x00,
}
