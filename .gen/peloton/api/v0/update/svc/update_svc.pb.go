// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v0/update/svc/update_svc.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	job "github.com/uber/peloton/.gen/peloton/api/v0/job"
	peloton "github.com/uber/peloton/.gen/peloton/api/v0/peloton"
	update "github.com/uber/peloton/.gen/peloton/api/v0/update"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// Request message for UpdateService.CreateUpdate method.
type CreateUpdateRequest struct {
	// Entity id of the job to be updated.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// New configuration of the job to be updated. The new job config
	// will be applied to all instances without violating the job SLA.
	JobConfig *job.JobConfig `protobuf:"bytes,2,opt,name=jobConfig,proto3" json:"jobConfig,omitempty"`
	// The options of the update.
	UpdateConfig *update.UpdateConfig `protobuf:"bytes,3,opt,name=updateConfig,proto3" json:"updateConfig,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,4,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CreateUpdateRequest) Reset()         { *m = CreateUpdateRequest{} }
func (m *CreateUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUpdateRequest) ProtoMessage()    {}
func (*CreateUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{0}
}

func (m *CreateUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateUpdateRequest.Unmarshal(m, b)
}
func (m *CreateUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateUpdateRequest.Marshal(b, m, deterministic)
}
func (m *CreateUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpdateRequest.Merge(m, src)
}
func (m *CreateUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateUpdateRequest.Size(m)
}
func (m *CreateUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpdateRequest proto.InternalMessageInfo

func (m *CreateUpdateRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *CreateUpdateRequest) GetJobConfig() *job.JobConfig {
	if m != nil {
		return m.JobConfig
	}
	return nil
}

func (m *CreateUpdateRequest) GetUpdateConfig() *update.UpdateConfig {
	if m != nil {
		return m.UpdateConfig
	}
	return nil
}

func (m *CreateUpdateRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

//*
// Response message for UpdateService.CreateUpdate method.
// Returns errors:
//   NOT_FOUND:      if the job with the provided identifier is not found.
//   INVALID_ARGUMENT: if the provided job config or update config is invalid.
type CreateUpdateResponse struct {
	// Identifier for the newly created update.
	UpdateID             *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateID,proto3" json:"updateID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateUpdateResponse) Reset()         { *m = CreateUpdateResponse{} }
func (m *CreateUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateUpdateResponse) ProtoMessage()    {}
func (*CreateUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{1}
}

func (m *CreateUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateUpdateResponse.Unmarshal(m, b)
}
func (m *CreateUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateUpdateResponse.Marshal(b, m, deterministic)
}
func (m *CreateUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUpdateResponse.Merge(m, src)
}
func (m *CreateUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateUpdateResponse.Size(m)
}
func (m *CreateUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUpdateResponse proto.InternalMessageInfo

func (m *CreateUpdateResponse) GetUpdateID() *peloton.UpdateID {
	if m != nil {
		return m.UpdateID
	}
	return nil
}

//*
//  Request message for UpdateService.GetUpdate method.
type GetUpdateRequest struct {
	UpdateId *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateId,proto3" json:"updateId,omitempty"`
	// If set, only return the update status in the response.
	StatusOnly           bool     `protobuf:"varint,2,opt,name=statusOnly,proto3" json:"statusOnly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpdateRequest) Reset()         { *m = GetUpdateRequest{} }
func (m *GetUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*GetUpdateRequest) ProtoMessage()    {}
func (*GetUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{2}
}

func (m *GetUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpdateRequest.Unmarshal(m, b)
}
func (m *GetUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpdateRequest.Marshal(b, m, deterministic)
}
func (m *GetUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateRequest.Merge(m, src)
}
func (m *GetUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_GetUpdateRequest.Size(m)
}
func (m *GetUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateRequest proto.InternalMessageInfo

func (m *GetUpdateRequest) GetUpdateId() *peloton.UpdateID {
	if m != nil {
		return m.UpdateId
	}
	return nil
}

func (m *GetUpdateRequest) GetStatusOnly() bool {
	if m != nil {
		return m.StatusOnly
	}
	return false
}

//*
//  Response message for UpdateService.GetUpdate method.
//  Returns errors:
//    INVALID_ARGUMENT: if the update ID is not provided.
type GetUpdateResponse struct {
	// Update information.
	UpdateInfo           *update.UpdateInfo `protobuf:"bytes,1,opt,name=updateInfo,proto3" json:"updateInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetUpdateResponse) Reset()         { *m = GetUpdateResponse{} }
func (m *GetUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*GetUpdateResponse) ProtoMessage()    {}
func (*GetUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{3}
}

func (m *GetUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpdateResponse.Unmarshal(m, b)
}
func (m *GetUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpdateResponse.Marshal(b, m, deterministic)
}
func (m *GetUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateResponse.Merge(m, src)
}
func (m *GetUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_GetUpdateResponse.Size(m)
}
func (m *GetUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateResponse proto.InternalMessageInfo

func (m *GetUpdateResponse) GetUpdateInfo() *update.UpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

//*
//  Request message for UpdateService.ListUpdates method.
type ListUpdatesRequest struct {
	// Number of updates to return. Not supported.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Updates will be returned for the given job identifier.
	JobID                *peloton.JobID `protobuf:"bytes,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListUpdatesRequest) Reset()         { *m = ListUpdatesRequest{} }
func (m *ListUpdatesRequest) String() string { return proto.CompactTextString(m) }
func (*ListUpdatesRequest) ProtoMessage()    {}
func (*ListUpdatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{4}
}

func (m *ListUpdatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUpdatesRequest.Unmarshal(m, b)
}
func (m *ListUpdatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUpdatesRequest.Marshal(b, m, deterministic)
}
func (m *ListUpdatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpdatesRequest.Merge(m, src)
}
func (m *ListUpdatesRequest) XXX_Size() int {
	return xxx_messageInfo_ListUpdatesRequest.Size(m)
}
func (m *ListUpdatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpdatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpdatesRequest proto.InternalMessageInfo

func (m *ListUpdatesRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListUpdatesRequest) GetJobID() *peloton.JobID {
	if m != nil {
		return m.JobID
	}
	return nil
}

//*
//  Response message for UpdateService.ListUpdates method.
//  Returns errors:
//    INVALID_ARGUMENT: if the job ID is not provided.
type ListUpdatesResponse struct {
	UpdateInfo           []*update.UpdateInfo `protobuf:"bytes,1,rep,name=updateInfo,proto3" json:"updateInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListUpdatesResponse) Reset()         { *m = ListUpdatesResponse{} }
func (m *ListUpdatesResponse) String() string { return proto.CompactTextString(m) }
func (*ListUpdatesResponse) ProtoMessage()    {}
func (*ListUpdatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{5}
}

func (m *ListUpdatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUpdatesResponse.Unmarshal(m, b)
}
func (m *ListUpdatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUpdatesResponse.Marshal(b, m, deterministic)
}
func (m *ListUpdatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpdatesResponse.Merge(m, src)
}
func (m *ListUpdatesResponse) XXX_Size() int {
	return xxx_messageInfo_ListUpdatesResponse.Size(m)
}
func (m *ListUpdatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpdatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpdatesResponse proto.InternalMessageInfo

func (m *ListUpdatesResponse) GetUpdateInfo() []*update.UpdateInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

//*
//  Request message for UpdateService.PauseUpdate method.
type PauseUpdateRequest struct {
	// Identifier of the update to be paused.
	UpdateId *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateId,proto3" json:"updateId,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,2,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PauseUpdateRequest) Reset()         { *m = PauseUpdateRequest{} }
func (m *PauseUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*PauseUpdateRequest) ProtoMessage()    {}
func (*PauseUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{6}
}

func (m *PauseUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PauseUpdateRequest.Unmarshal(m, b)
}
func (m *PauseUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PauseUpdateRequest.Marshal(b, m, deterministic)
}
func (m *PauseUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseUpdateRequest.Merge(m, src)
}
func (m *PauseUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_PauseUpdateRequest.Size(m)
}
func (m *PauseUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PauseUpdateRequest proto.InternalMessageInfo

func (m *PauseUpdateRequest) GetUpdateId() *peloton.UpdateID {
	if m != nil {
		return m.UpdateId
	}
	return nil
}

func (m *PauseUpdateRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

//*
//  Response message for UpdateService.PauseUpdate method.
//  Returns errors:
//    NOT_FOUND: if the update with the provided identifier is not found.
//    UNAVAILABLE: if the update is in a state which cannot be paused.
type PauseUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PauseUpdateResponse) Reset()         { *m = PauseUpdateResponse{} }
func (m *PauseUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*PauseUpdateResponse) ProtoMessage()    {}
func (*PauseUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{7}
}

func (m *PauseUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PauseUpdateResponse.Unmarshal(m, b)
}
func (m *PauseUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PauseUpdateResponse.Marshal(b, m, deterministic)
}
func (m *PauseUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseUpdateResponse.Merge(m, src)
}
func (m *PauseUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_PauseUpdateResponse.Size(m)
}
func (m *PauseUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PauseUpdateResponse proto.InternalMessageInfo

//*
//  Request message for UpdateService.ResumeUpdate method.
type ResumeUpdateRequest struct {
	// Identifier of the update to be resumed.
	UpdateId *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateId,proto3" json:"updateId,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,2,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ResumeUpdateRequest) Reset()         { *m = ResumeUpdateRequest{} }
func (m *ResumeUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*ResumeUpdateRequest) ProtoMessage()    {}
func (*ResumeUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{8}
}

func (m *ResumeUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeUpdateRequest.Unmarshal(m, b)
}
func (m *ResumeUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeUpdateRequest.Marshal(b, m, deterministic)
}
func (m *ResumeUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeUpdateRequest.Merge(m, src)
}
func (m *ResumeUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_ResumeUpdateRequest.Size(m)
}
func (m *ResumeUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeUpdateRequest proto.InternalMessageInfo

func (m *ResumeUpdateRequest) GetUpdateId() *peloton.UpdateID {
	if m != nil {
		return m.UpdateId
	}
	return nil
}

func (m *ResumeUpdateRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

//*
//  Response message for UpdateService.ResumeUpdate method.
//  Returns errors:
//    NOT_FOUND: if the update with the provided identifier is not found.
//    UNAVAILABLE: if the update is in a state which cannot be resumed.
type ResumeUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResumeUpdateResponse) Reset()         { *m = ResumeUpdateResponse{} }
func (m *ResumeUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*ResumeUpdateResponse) ProtoMessage()    {}
func (*ResumeUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{9}
}

func (m *ResumeUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeUpdateResponse.Unmarshal(m, b)
}
func (m *ResumeUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeUpdateResponse.Marshal(b, m, deterministic)
}
func (m *ResumeUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeUpdateResponse.Merge(m, src)
}
func (m *ResumeUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_ResumeUpdateResponse.Size(m)
}
func (m *ResumeUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeUpdateResponse proto.InternalMessageInfo

//*
//  Request message for UpdateService.RollbackUpdate method.
type RollbackUpdateRequest struct {
	// Identifier of the update to be rolled back.
	UpdateId             *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateId,proto3" json:"updateId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RollbackUpdateRequest) Reset()         { *m = RollbackUpdateRequest{} }
func (m *RollbackUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackUpdateRequest) ProtoMessage()    {}
func (*RollbackUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{10}
}

func (m *RollbackUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackUpdateRequest.Unmarshal(m, b)
}
func (m *RollbackUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackUpdateRequest.Marshal(b, m, deterministic)
}
func (m *RollbackUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackUpdateRequest.Merge(m, src)
}
func (m *RollbackUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_RollbackUpdateRequest.Size(m)
}
func (m *RollbackUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackUpdateRequest proto.InternalMessageInfo

func (m *RollbackUpdateRequest) GetUpdateId() *peloton.UpdateID {
	if m != nil {
		return m.UpdateId
	}
	return nil
}

//*
//  Response message for UpdateService.RollbackUpdate method.
//  Returns errors:
//    NOT_FOUND: if the update with the provided identifier is not found.
//    UNAVAILABLE: if the update is in a state which cannot be resumed.
type RollbackUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackUpdateResponse) Reset()         { *m = RollbackUpdateResponse{} }
func (m *RollbackUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackUpdateResponse) ProtoMessage()    {}
func (*RollbackUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{11}
}

func (m *RollbackUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackUpdateResponse.Unmarshal(m, b)
}
func (m *RollbackUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackUpdateResponse.Marshal(b, m, deterministic)
}
func (m *RollbackUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackUpdateResponse.Merge(m, src)
}
func (m *RollbackUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_RollbackUpdateResponse.Size(m)
}
func (m *RollbackUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackUpdateResponse proto.InternalMessageInfo

//*
//  Request message for UpdateService.AbortUpdate method.
type AbortUpdateRequest struct {
	// Identifier of the update to be aborted.
	UpdateId  *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateId,proto3" json:"updateId,omitempty"`
	SoftAbort bool              `protobuf:"varint,2,opt,name=softAbort,proto3" json:"softAbort,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,3,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AbortUpdateRequest) Reset()         { *m = AbortUpdateRequest{} }
func (m *AbortUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*AbortUpdateRequest) ProtoMessage()    {}
func (*AbortUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{12}
}

func (m *AbortUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortUpdateRequest.Unmarshal(m, b)
}
func (m *AbortUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortUpdateRequest.Marshal(b, m, deterministic)
}
func (m *AbortUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortUpdateRequest.Merge(m, src)
}
func (m *AbortUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_AbortUpdateRequest.Size(m)
}
func (m *AbortUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortUpdateRequest proto.InternalMessageInfo

func (m *AbortUpdateRequest) GetUpdateId() *peloton.UpdateID {
	if m != nil {
		return m.UpdateId
	}
	return nil
}

func (m *AbortUpdateRequest) GetSoftAbort() bool {
	if m != nil {
		return m.SoftAbort
	}
	return false
}

func (m *AbortUpdateRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

//*
//  Response message for UpdateService.AbortUpdate method.
//  Returns errors:
//    NOT_FOUND: if the update with the provided identifier is not found.
//    UNAVAILABLE: if the update is in a state which cannot be resumed.
type AbortUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortUpdateResponse) Reset()         { *m = AbortUpdateResponse{} }
func (m *AbortUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*AbortUpdateResponse) ProtoMessage()    {}
func (*AbortUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{13}
}

func (m *AbortUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortUpdateResponse.Unmarshal(m, b)
}
func (m *AbortUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortUpdateResponse.Marshal(b, m, deterministic)
}
func (m *AbortUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortUpdateResponse.Merge(m, src)
}
func (m *AbortUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_AbortUpdateResponse.Size(m)
}
func (m *AbortUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AbortUpdateResponse proto.InternalMessageInfo

//*
//  Request message for UpdateService.GetUpdateCache method.
type GetUpdateCacheRequest struct {
	UpdateId             *peloton.UpdateID `protobuf:"bytes,1,opt,name=updateId,proto3" json:"updateId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetUpdateCacheRequest) Reset()         { *m = GetUpdateCacheRequest{} }
func (m *GetUpdateCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetUpdateCacheRequest) ProtoMessage()    {}
func (*GetUpdateCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{14}
}

func (m *GetUpdateCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpdateCacheRequest.Unmarshal(m, b)
}
func (m *GetUpdateCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpdateCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetUpdateCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateCacheRequest.Merge(m, src)
}
func (m *GetUpdateCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetUpdateCacheRequest.Size(m)
}
func (m *GetUpdateCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateCacheRequest proto.InternalMessageInfo

func (m *GetUpdateCacheRequest) GetUpdateId() *peloton.UpdateID {
	if m != nil {
		return m.UpdateId
	}
	return nil
}

//*
//  Response message for UpdateService.GetUpdateCache method.
//  Returns errors:
//    INVALID_ARGUMENT: if the update ID is not provided.
type GetUpdateCacheResponse struct {
	// Job ID of the job update
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	// The state of the job update
	State update.State `protobuf:"varint,2,opt,name=state,proto3,enum=peloton.api.v0.update.State" json:"state,omitempty"`
	// List of instances which will be updated with this update
	InstancesTotal []uint32 `protobuf:"varint,3,rep,packed,name=instancesTotal,proto3" json:"instancesTotal,omitempty"`
	// List of instances which have already been updated
	InstancesDone []uint32 `protobuf:"varint,4,rep,packed,name=instancesDone,proto3" json:"instancesDone,omitempty"`
	// List of instances which are currently being updated
	InstancesCurrent []uint32 `protobuf:"varint,5,rep,packed,name=instancesCurrent,proto3" json:"instancesCurrent,omitempty"`
	// List of instances which have been added with this update
	InstancesAdded []uint32 `protobuf:"varint,6,rep,packed,name=instancesAdded,proto3" json:"instancesAdded,omitempty"`
	// List of existing instances which need to be updated with this update
	InstancesUpdated []uint32 `protobuf:"varint,7,rep,packed,name=instancesUpdated,proto3" json:"instancesUpdated,omitempty"`
	// List of existing instances which fail to be updated with this update
	InstancesFailed      []uint32 `protobuf:"varint,8,rep,packed,name=instancesFailed,proto3" json:"instancesFailed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpdateCacheResponse) Reset()         { *m = GetUpdateCacheResponse{} }
func (m *GetUpdateCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetUpdateCacheResponse) ProtoMessage()    {}
func (*GetUpdateCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ae9b36ffcfc9dc, []int{15}
}

func (m *GetUpdateCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpdateCacheResponse.Unmarshal(m, b)
}
func (m *GetUpdateCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpdateCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetUpdateCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateCacheResponse.Merge(m, src)
}
func (m *GetUpdateCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetUpdateCacheResponse.Size(m)
}
func (m *GetUpdateCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateCacheResponse proto.InternalMessageInfo

func (m *GetUpdateCacheResponse) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetUpdateCacheResponse) GetState() update.State {
	if m != nil {
		return m.State
	}
	return update.State_INVALID
}

func (m *GetUpdateCacheResponse) GetInstancesTotal() []uint32 {
	if m != nil {
		return m.InstancesTotal
	}
	return nil
}

func (m *GetUpdateCacheResponse) GetInstancesDone() []uint32 {
	if m != nil {
		return m.InstancesDone
	}
	return nil
}

func (m *GetUpdateCacheResponse) GetInstancesCurrent() []uint32 {
	if m != nil {
		return m.InstancesCurrent
	}
	return nil
}

func (m *GetUpdateCacheResponse) GetInstancesAdded() []uint32 {
	if m != nil {
		return m.InstancesAdded
	}
	return nil
}

func (m *GetUpdateCacheResponse) GetInstancesUpdated() []uint32 {
	if m != nil {
		return m.InstancesUpdated
	}
	return nil
}

func (m *GetUpdateCacheResponse) GetInstancesFailed() []uint32 {
	if m != nil {
		return m.InstancesFailed
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateUpdateRequest)(nil), "peloton.api.v0.update.svc.CreateUpdateRequest")
	proto.RegisterType((*CreateUpdateResponse)(nil), "peloton.api.v0.update.svc.CreateUpdateResponse")
	proto.RegisterType((*GetUpdateRequest)(nil), "peloton.api.v0.update.svc.GetUpdateRequest")
	proto.RegisterType((*GetUpdateResponse)(nil), "peloton.api.v0.update.svc.GetUpdateResponse")
	proto.RegisterType((*ListUpdatesRequest)(nil), "peloton.api.v0.update.svc.ListUpdatesRequest")
	proto.RegisterType((*ListUpdatesResponse)(nil), "peloton.api.v0.update.svc.ListUpdatesResponse")
	proto.RegisterType((*PauseUpdateRequest)(nil), "peloton.api.v0.update.svc.PauseUpdateRequest")
	proto.RegisterType((*PauseUpdateResponse)(nil), "peloton.api.v0.update.svc.PauseUpdateResponse")
	proto.RegisterType((*ResumeUpdateRequest)(nil), "peloton.api.v0.update.svc.ResumeUpdateRequest")
	proto.RegisterType((*ResumeUpdateResponse)(nil), "peloton.api.v0.update.svc.ResumeUpdateResponse")
	proto.RegisterType((*RollbackUpdateRequest)(nil), "peloton.api.v0.update.svc.RollbackUpdateRequest")
	proto.RegisterType((*RollbackUpdateResponse)(nil), "peloton.api.v0.update.svc.RollbackUpdateResponse")
	proto.RegisterType((*AbortUpdateRequest)(nil), "peloton.api.v0.update.svc.AbortUpdateRequest")
	proto.RegisterType((*AbortUpdateResponse)(nil), "peloton.api.v0.update.svc.AbortUpdateResponse")
	proto.RegisterType((*GetUpdateCacheRequest)(nil), "peloton.api.v0.update.svc.GetUpdateCacheRequest")
	proto.RegisterType((*GetUpdateCacheResponse)(nil), "peloton.api.v0.update.svc.GetUpdateCacheResponse")
}

func init() {
	proto.RegisterFile("peloton/api/v0/update/svc/update_svc.proto", fileDescriptor_f7ae9b36ffcfc9dc)
}

var fileDescriptor_f7ae9b36ffcfc9dc = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x55, 0xdb, 0x75, 0x1f, 0x77, 0x1f, 0x0c, 0x77, 0x9b, 0xb2, 0x6a, 0xa0, 0x11, 0x10, 0x9a,
	0x06, 0xa4, 0xa3, 0x93, 0x78, 0x81, 0x97, 0xd1, 0x8a, 0x69, 0x13, 0xd2, 0x90, 0xb7, 0x22, 0xc4,
	0xcb, 0xe4, 0x24, 0x2e, 0x64, 0x64, 0x71, 0x56, 0x3b, 0x95, 0xf8, 0x19, 0x3c, 0x20, 0xf8, 0x23,
	0xfc, 0x38, 0xde, 0x50, 0x1c, 0x37, 0x4d, 0xd2, 0x24, 0xda, 0xaa, 0x3e, 0xf0, 0x50, 0xa9, 0xbd,
	0x3d, 0xf7, 0xdc, 0xeb, 0x73, 0xed, 0x63, 0xc3, 0xbe, 0x4f, 0x5d, 0x26, 0x98, 0xd7, 0x22, 0xbe,
	0xd3, 0x1a, 0x1e, 0xb4, 0x02, 0xdf, 0x26, 0x82, 0xb6, 0xf8, 0xd0, 0x52, 0x5f, 0x2f, 0xf9, 0xd0,
	0x32, 0xfc, 0x01, 0x13, 0x0c, 0x6d, 0x2b, 0xac, 0x41, 0x7c, 0xc7, 0x18, 0x1e, 0x18, 0x11, 0xc0,
	0xe0, 0x43, 0xab, 0xb9, 0x93, 0xa1, 0x19, 0x21, 0x65, 0xe2, 0xc4, 0xbf, 0x57, 0xcc, 0x0c, 0x3f,
	0xea, 0x5f, 0x3d, 0xbf, 0x05, 0xc5, 0x2e, 0x31, 0xfa, 0xcf, 0x2a, 0x34, 0x3a, 0x03, 0x4a, 0x04,
	0xed, 0xc9, 0x30, 0xa6, 0x37, 0x01, 0xe5, 0x02, 0x1d, 0x42, 0xfd, 0x8a, 0x99, 0x27, 0xb6, 0x56,
	0xd9, 0xad, 0xec, 0x2d, 0xb7, 0x1f, 0x18, 0x99, 0x16, 0x47, 0x3f, 0x4f, 0x99, 0x79, 0xd2, 0xc5,
	0x11, 0x16, 0xbd, 0x86, 0xa5, 0x2b, 0x66, 0x76, 0x98, 0xd7, 0x77, 0xbe, 0x68, 0xd5, 0xfc, 0xc4,
	0xb0, 0xbd, 0xd3, 0x11, 0x08, 0x8f, 0xf1, 0xe8, 0x18, 0x56, 0xa2, 0xce, 0x54, 0x7e, 0x4d, 0xe6,
	0x3f, 0x36, 0xf2, 0xb5, 0xe9, 0x25, 0xa0, 0x38, 0x95, 0x88, 0x3a, 0xb0, 0xcc, 0x7c, 0x72, 0x13,
	0xd0, 0x4b, 0x9b, 0x08, 0xa2, 0xcd, 0x49, 0x1e, 0xbd, 0x68, 0x01, 0x67, 0x12, 0xda, 0x25, 0x82,
	0x60, 0x60, 0xf1, 0x77, 0xfd, 0x02, 0x36, 0xd2, 0xb2, 0x70, 0x9f, 0x79, 0x9c, 0xa2, 0x37, 0xb0,
	0x18, 0x15, 0x3b, 0xe9, 0x2a, 0x69, 0x76, 0x8b, 0x98, 0x7b, 0x0a, 0x87, 0xe3, 0x0c, 0xdd, 0x87,
	0xf5, 0x63, 0x2a, 0xd2, 0x4a, 0x8f, 0x19, 0xed, 0x3b, 0x33, 0xda, 0xe8, 0x21, 0x00, 0x17, 0x44,
	0x04, 0xfc, 0xcc, 0x73, 0xbf, 0x4b, 0xcd, 0x17, 0x71, 0x22, 0xa2, 0x7f, 0x84, 0xfb, 0x89, 0x8a,
	0x6a, 0x11, 0x47, 0x00, 0x8a, 0xc0, 0xeb, 0x33, 0x55, 0xf4, 0x51, 0xa9, 0xd0, 0x21, 0x10, 0x27,
	0x92, 0xf4, 0x4b, 0x40, 0xef, 0x1d, 0xae, 0x88, 0xf9, 0x68, 0x2d, 0x1b, 0x50, 0x77, 0x9d, 0x6b,
	0x47, 0x48, 0xce, 0x3a, 0x8e, 0x7e, 0x8c, 0xf6, 0x52, 0xb7, 0x68, 0x4b, 0xe4, 0xec, 0xa5, 0xae,
	0xfe, 0x09, 0x1a, 0xa9, 0x02, 0x05, 0xad, 0xd7, 0xee, 0xde, 0xfa, 0xaf, 0x0a, 0xa0, 0x0f, 0x24,
	0xe0, 0x74, 0x96, 0x73, 0xc8, 0x6c, 0xba, 0xea, 0x54, 0x9b, 0x6e, 0x13, 0x1a, 0xa9, 0xc6, 0xa2,
	0x35, 0xeb, 0xbf, 0x2b, 0xd0, 0xc0, 0x94, 0x07, 0xd7, 0xff, 0x5f, 0xc7, 0x5b, 0xb0, 0x91, 0xee,
	0x4c, 0xb5, 0xdc, 0x83, 0x4d, 0xcc, 0x5c, 0xd7, 0x24, 0xd6, 0xb7, 0x19, 0xf6, 0xac, 0x6b, 0xb0,
	0x95, 0xa5, 0x55, 0x05, 0xff, 0x54, 0x00, 0x1d, 0x99, 0x6c, 0x30, 0xd3, 0xc3, 0xb5, 0x03, 0x4b,
	0x9c, 0xf5, 0x85, 0xe4, 0x55, 0x67, 0x6b, 0x1c, 0xc8, 0x0a, 0x58, 0x9b, 0x76, 0xe4, 0xa9, 0xb6,
	0xc7, 0xfa, 0xc5, 0xc7, 0xb6, 0x43, 0xac, 0xaf, 0x33, 0xd2, 0xef, 0x6f, 0x15, 0xb6, 0xb2, 0xbc,
	0xea, 0x60, 0x4d, 0x65, 0xf8, 0x6d, 0xa8, 0x87, 0x5e, 0x43, 0xa5, 0x38, 0x6b, 0xed, 0x9d, 0x82,
	0x83, 0x78, 0x1e, 0x62, 0x70, 0x04, 0x45, 0x4f, 0x61, 0xcd, 0xf1, 0xb8, 0x20, 0x9e, 0x45, 0xf9,
	0x05, 0x13, 0xc4, 0xd5, 0x6a, 0xbb, 0xb5, 0xbd, 0x55, 0x9c, 0x89, 0xa2, 0x27, 0xb0, 0x1a, 0x47,
	0xba, 0xcc, 0xa3, 0xda, 0x9c, 0x84, 0xa5, 0x83, 0x68, 0x1f, 0xd6, 0xe3, 0x40, 0x27, 0x18, 0x0c,
	0xa8, 0x27, 0xb4, 0xba, 0x04, 0x4e, 0xc4, 0x53, 0x95, 0x8f, 0x6c, 0x9b, 0xda, 0xda, 0x7c, 0xa6,
	0xb2, 0x8c, 0xa6, 0x38, 0x23, 0xa9, 0x6c, 0x6d, 0x21, 0xc3, 0xa9, 0xe2, 0x68, 0x0f, 0xee, 0xc5,
	0xb1, 0x77, 0xc4, 0x71, 0xa9, 0xad, 0x2d, 0x4a, 0x68, 0x36, 0xdc, 0xfe, 0xb1, 0x00, 0xab, 0x51,
	0xd6, 0x39, 0x1d, 0x0c, 0x1d, 0x8b, 0x22, 0x06, 0x2b, 0xc9, 0x3b, 0x06, 0x19, 0x46, 0xe1, 0x3b,
	0xc0, 0xc8, 0xb9, 0xa3, 0x9b, 0xad, 0x5b, 0xe3, 0xd5, 0x8c, 0xfb, 0xb0, 0x14, 0x4f, 0x1f, 0x3d,
	0x2b, 0xc9, 0xce, 0x5e, 0x52, 0xcd, 0xe7, 0xb7, 0x03, 0xab, 0x3a, 0x2e, 0x2c, 0x27, 0xbc, 0x1b,
	0xbd, 0x28, 0x49, 0x9e, 0xbc, 0x44, 0x9a, 0xc6, 0x6d, 0xe1, 0xe3, 0x6a, 0x09, 0xd7, 0x2c, 0xad,
	0x36, 0x69, 0xfb, 0xa5, 0xd5, 0x72, 0xcc, 0x38, 0x1c, 0x5a, 0xd2, 0xf1, 0x4a, 0x87, 0x96, 0x63,
	0xda, 0xa5, 0x43, 0xcb, 0xb3, 0x52, 0x14, 0xc0, 0x5a, 0xda, 0xf3, 0xd0, 0x41, 0x19, 0x45, 0x9e,
	0xeb, 0x36, 0x5f, 0xde, 0x21, 0x63, 0xac, 0x6a, 0xc2, 0x98, 0x4a, 0x55, 0x9d, 0xf4, 0xdd, 0x52,
	0x55, 0x73, 0xfc, 0x2e, 0x5c, 0x64, 0xda, 0x97, 0x4a, 0x17, 0x99, 0x6b, 0x8d, 0xa5, 0x8b, 0xcc,
	0x37, 0xbd, 0xb7, 0xaf, 0xa0, 0xf8, 0xe9, 0xfd, 0x79, 0xbb, 0xf0, 0x05, 0x6f, 0xce, 0xcb, 0xc7,
	0xf3, 0xe1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0x18, 0x11, 0x44, 0xe5, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateServiceClient interface {
	// Create a new update for a job.
	// Only one update can exist for a job at a given time.
	CreateUpdate(ctx context.Context, in *CreateUpdateRequest, opts ...grpc.CallOption) (*CreateUpdateResponse, error)
	// Get the status of an update.
	GetUpdate(ctx context.Context, in *GetUpdateRequest, opts ...grpc.CallOption) (*GetUpdateResponse, error)
	// List all updates (including current and previously
	// completed) for a given job.
	ListUpdates(ctx context.Context, in *ListUpdatesRequest, opts ...grpc.CallOption) (*ListUpdatesResponse, error)
	// Pause an update.
	PauseUpdate(ctx context.Context, in *PauseUpdateRequest, opts ...grpc.CallOption) (*PauseUpdateResponse, error)
	// Resume a paused update.
	ResumeUpdate(ctx context.Context, in *ResumeUpdateRequest, opts ...grpc.CallOption) (*ResumeUpdateResponse, error)
	// Rollback an update.
	RollbackUpdate(ctx context.Context, in *RollbackUpdateRequest, opts ...grpc.CallOption) (*RollbackUpdateResponse, error)
	// Abort an update.
	AbortUpdate(ctx context.Context, in *AbortUpdateRequest, opts ...grpc.CallOption) (*AbortUpdateResponse, error)
	// Debug only method. Get the cache of a job update.
	GetUpdateCache(ctx context.Context, in *GetUpdateCacheRequest, opts ...grpc.CallOption) (*GetUpdateCacheResponse, error)
}

type updateServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpdateServiceClient(cc *grpc.ClientConn) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) CreateUpdate(ctx context.Context, in *CreateUpdateRequest, opts ...grpc.CallOption) (*CreateUpdateResponse, error) {
	out := new(CreateUpdateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/CreateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetUpdate(ctx context.Context, in *GetUpdateRequest, opts ...grpc.CallOption) (*GetUpdateResponse, error) {
	out := new(GetUpdateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/GetUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) ListUpdates(ctx context.Context, in *ListUpdatesRequest, opts ...grpc.CallOption) (*ListUpdatesResponse, error) {
	out := new(ListUpdatesResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/ListUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) PauseUpdate(ctx context.Context, in *PauseUpdateRequest, opts ...grpc.CallOption) (*PauseUpdateResponse, error) {
	out := new(PauseUpdateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/PauseUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) ResumeUpdate(ctx context.Context, in *ResumeUpdateRequest, opts ...grpc.CallOption) (*ResumeUpdateResponse, error) {
	out := new(ResumeUpdateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/ResumeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) RollbackUpdate(ctx context.Context, in *RollbackUpdateRequest, opts ...grpc.CallOption) (*RollbackUpdateResponse, error) {
	out := new(RollbackUpdateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/RollbackUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) AbortUpdate(ctx context.Context, in *AbortUpdateRequest, opts ...grpc.CallOption) (*AbortUpdateResponse, error) {
	out := new(AbortUpdateResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/AbortUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetUpdateCache(ctx context.Context, in *GetUpdateCacheRequest, opts ...grpc.CallOption) (*GetUpdateCacheResponse, error) {
	out := new(GetUpdateCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v0.update.svc.UpdateService/GetUpdateCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServiceServer is the server API for UpdateService service.
type UpdateServiceServer interface {
	// Create a new update for a job.
	// Only one update can exist for a job at a given time.
	CreateUpdate(context.Context, *CreateUpdateRequest) (*CreateUpdateResponse, error)
	// Get the status of an update.
	GetUpdate(context.Context, *GetUpdateRequest) (*GetUpdateResponse, error)
	// List all updates (including current and previously
	// completed) for a given job.
	ListUpdates(context.Context, *ListUpdatesRequest) (*ListUpdatesResponse, error)
	// Pause an update.
	PauseUpdate(context.Context, *PauseUpdateRequest) (*PauseUpdateResponse, error)
	// Resume a paused update.
	ResumeUpdate(context.Context, *ResumeUpdateRequest) (*ResumeUpdateResponse, error)
	// Rollback an update.
	RollbackUpdate(context.Context, *RollbackUpdateRequest) (*RollbackUpdateResponse, error)
	// Abort an update.
	AbortUpdate(context.Context, *AbortUpdateRequest) (*AbortUpdateResponse, error)
	// Debug only method. Get the cache of a job update.
	GetUpdateCache(context.Context, *GetUpdateCacheRequest) (*GetUpdateCacheResponse, error)
}

func RegisterUpdateServiceServer(s *grpc.Server, srv UpdateServiceServer) {
	s.RegisterService(&_UpdateService_serviceDesc, srv)
}

func _UpdateService_CreateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).CreateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/CreateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).CreateUpdate(ctx, req.(*CreateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/GetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetUpdate(ctx, req.(*GetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_ListUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).ListUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/ListUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).ListUpdates(ctx, req.(*ListUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_PauseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).PauseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/PauseUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).PauseUpdate(ctx, req.(*PauseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_ResumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).ResumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/ResumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).ResumeUpdate(ctx, req.(*ResumeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_RollbackUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).RollbackUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/RollbackUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).RollbackUpdate(ctx, req.(*RollbackUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_AbortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).AbortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/AbortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).AbortUpdate(ctx, req.(*AbortUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetUpdateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetUpdateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v0.update.svc.UpdateService/GetUpdateCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetUpdateCache(ctx, req.(*GetUpdateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.v0.update.svc.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUpdate",
			Handler:    _UpdateService_CreateUpdate_Handler,
		},
		{
			MethodName: "GetUpdate",
			Handler:    _UpdateService_GetUpdate_Handler,
		},
		{
			MethodName: "ListUpdates",
			Handler:    _UpdateService_ListUpdates_Handler,
		},
		{
			MethodName: "PauseUpdate",
			Handler:    _UpdateService_PauseUpdate_Handler,
		},
		{
			MethodName: "ResumeUpdate",
			Handler:    _UpdateService_ResumeUpdate_Handler,
		},
		{
			MethodName: "RollbackUpdate",
			Handler:    _UpdateService_RollbackUpdate_Handler,
		},
		{
			MethodName: "AbortUpdate",
			Handler:    _UpdateService_AbortUpdate_Handler,
		},
		{
			MethodName: "GetUpdateCache",
			Handler:    _UpdateService_GetUpdateCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/api/v0/update/svc/update_svc.proto",
}
