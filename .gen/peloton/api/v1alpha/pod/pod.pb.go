// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v1alpha/pod/pod.proto

package pod

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/uber/peloton/.gen/mesos/v1"
	peloton "github.com/uber/peloton/.gen/peloton/api/v1alpha/peloton"
	apachemesos "github.com/uber/peloton/.gen/peloton/api/v1alpha/pod/apachemesos"
	query "github.com/uber/peloton/.gen/peloton/api/v1alpha/query"
	volume "github.com/uber/peloton/.gen/peloton/api/v1alpha/volume"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Runtime states of a container in a pod
type ContainerState int32

const (
	// Invalid state.
	ContainerState_CONTAINER_STATE_INVALID ContainerState = 0
	// The container has not been created yet
	ContainerState_CONTAINER_STATE_PENDING ContainerState = 1
	// The container has been launched
	ContainerState_CONTAINER_STATE_LAUNCHED ContainerState = 2
	// The container is being started on a host
	ContainerState_CONTAINER_STATE_STARTING ContainerState = 3
	// The container is running on a host
	ContainerState_CONTAINER_STATE_RUNNING ContainerState = 4
	// The container terminated with an exit code of zero
	ContainerState_CONTAINER_STATE_SUCCEEDED ContainerState = 5
	// The container terminated with a non-zero exit code
	ContainerState_CONTAINER_STATE_FAILED ContainerState = 6
	// The container is being killed
	ContainerState_CONTAINER_STATE_KILLING ContainerState = 7
	// Execution of the container was terminated by the system
	ContainerState_CONTAINER_STATE_KILLED ContainerState = 8
)

var ContainerState_name = map[int32]string{
	0: "CONTAINER_STATE_INVALID",
	1: "CONTAINER_STATE_PENDING",
	2: "CONTAINER_STATE_LAUNCHED",
	3: "CONTAINER_STATE_STARTING",
	4: "CONTAINER_STATE_RUNNING",
	5: "CONTAINER_STATE_SUCCEEDED",
	6: "CONTAINER_STATE_FAILED",
	7: "CONTAINER_STATE_KILLING",
	8: "CONTAINER_STATE_KILLED",
}

var ContainerState_value = map[string]int32{
	"CONTAINER_STATE_INVALID":   0,
	"CONTAINER_STATE_PENDING":   1,
	"CONTAINER_STATE_LAUNCHED":  2,
	"CONTAINER_STATE_STARTING":  3,
	"CONTAINER_STATE_RUNNING":   4,
	"CONTAINER_STATE_SUCCEEDED": 5,
	"CONTAINER_STATE_FAILED":    6,
	"CONTAINER_STATE_KILLING":   7,
	"CONTAINER_STATE_KILLED":    8,
}

func (x ContainerState) String() string {
	return proto.EnumName(ContainerState_name, int32(x))
}

func (ContainerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{0}
}

// HealthState is the health check state of a container
type HealthState int32

const (
	// Default value.
	HealthState_HEALTH_STATE_INVALID HealthState = 0
	// If the health check config is not enabled in the container config,
	// then the health state is DISABLED.
	HealthState_HEALTH_STATE_DISABLED HealthState = 1
	// If the health check config is enabled in the container config,
	// but the container has not reported the output of the health check yet,
	// then the health state is UNKNOWN.
	HealthState_HEALTH_STATE_UNKNOWN HealthState = 2
	// The container passes the health check.
	HealthState_HEALTH_STATE_HEALTHY HealthState = 3
	// The container failed to pass the health check.
	HealthState_HEALTH_STATE_UNHEALTHY HealthState = 4
)

var HealthState_name = map[int32]string{
	0: "HEALTH_STATE_INVALID",
	1: "HEALTH_STATE_DISABLED",
	2: "HEALTH_STATE_UNKNOWN",
	3: "HEALTH_STATE_HEALTHY",
	4: "HEALTH_STATE_UNHEALTHY",
}

var HealthState_value = map[string]int32{
	"HEALTH_STATE_INVALID":   0,
	"HEALTH_STATE_DISABLED":  1,
	"HEALTH_STATE_UNKNOWN":   2,
	"HEALTH_STATE_HEALTHY":   3,
	"HEALTH_STATE_UNHEALTHY": 4,
}

func (x HealthState) String() string {
	return proto.EnumName(HealthState_name, int32(x))
}

func (HealthState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{1}
}

// Runtime states of a pod instance
type PodState int32

const (
	// Invalid state.
	PodState_POD_STATE_INVALID PodState = 0
	// The pod is being initialized
	PodState_POD_STATE_INITIALIZED PodState = 1
	// The pod is pending and waiting for resources
	PodState_POD_STATE_PENDING PodState = 2
	// The pod has been allocated with resources and ready for placement
	PodState_POD_STATE_READY PodState = 3
	// The pod is being placed to a host based on its resource
	// requirements and constraints
	PodState_POD_STATE_PLACING PodState = 4
	// The pod has been assigned to a host matching the resource
	// requirements and constraints
	PodState_POD_STATE_PLACED PodState = 5
	// The pod is taken from resmgr to be launched
	PodState_POD_STATE_LAUNCHING PodState = 6
	// The pod is being launched in Job manager
	PodState_POD_STATE_LAUNCHED PodState = 7
	// Either init containers are starting/running or the main containers
	// in the pod are being started.
	PodState_POD_STATE_STARTING PodState = 8
	// All containers in the pod are running
	PodState_POD_STATE_RUNNING PodState = 9
	// All containers in the pod terminated with an exit code of zero
	PodState_POD_STATE_SUCCEEDED PodState = 10
	// At least on container in the pod terminated with a non-zero exit code
	PodState_POD_STATE_FAILED PodState = 11
	// The pod is lost
	PodState_POD_STATE_LOST PodState = 12
	// The pod is being killed
	PodState_POD_STATE_KILLING PodState = 13
	// At least one of the containers in the pod was terminated by the system
	PodState_POD_STATE_KILLED PodState = 14
	// The pod is being preempted by another one on the node
	PodState_POD_STATE_PREEMPTING PodState = 15
	// The pod is to be deleted after termination
	PodState_POD_STATE_DELETED PodState = 16
	// The pod is to be reserved on a node
	PodState_POD_STATE_RESERVED PodState = 17
)

var PodState_name = map[int32]string{
	0:  "POD_STATE_INVALID",
	1:  "POD_STATE_INITIALIZED",
	2:  "POD_STATE_PENDING",
	3:  "POD_STATE_READY",
	4:  "POD_STATE_PLACING",
	5:  "POD_STATE_PLACED",
	6:  "POD_STATE_LAUNCHING",
	7:  "POD_STATE_LAUNCHED",
	8:  "POD_STATE_STARTING",
	9:  "POD_STATE_RUNNING",
	10: "POD_STATE_SUCCEEDED",
	11: "POD_STATE_FAILED",
	12: "POD_STATE_LOST",
	13: "POD_STATE_KILLING",
	14: "POD_STATE_KILLED",
	15: "POD_STATE_PREEMPTING",
	16: "POD_STATE_DELETED",
	17: "POD_STATE_RESERVED",
}

var PodState_value = map[string]int32{
	"POD_STATE_INVALID":     0,
	"POD_STATE_INITIALIZED": 1,
	"POD_STATE_PENDING":     2,
	"POD_STATE_READY":       3,
	"POD_STATE_PLACING":     4,
	"POD_STATE_PLACED":      5,
	"POD_STATE_LAUNCHING":   6,
	"POD_STATE_LAUNCHED":    7,
	"POD_STATE_STARTING":    8,
	"POD_STATE_RUNNING":     9,
	"POD_STATE_SUCCEEDED":   10,
	"POD_STATE_FAILED":      11,
	"POD_STATE_LOST":        12,
	"POD_STATE_KILLING":     13,
	"POD_STATE_KILLED":      14,
	"POD_STATE_PREEMPTING":  15,
	"POD_STATE_DELETED":     16,
	"POD_STATE_RESERVED":    17,
}

func (x PodState) String() string {
	return proto.EnumName(PodState_name, int32(x))
}

func (PodState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{2}
}

// Type of health check to run
type HealthCheckSpec_HealthCheckType int32

const (
	// Reserved for future compatibility of new types.
	HealthCheckSpec_HEALTH_CHECK_TYPE_UNKNOWN HealthCheckSpec_HealthCheckType = 0
	// Command line based health check
	HealthCheckSpec_HEALTH_CHECK_TYPE_COMMAND HealthCheckSpec_HealthCheckType = 1
	// HTTP endpoint based health check
	HealthCheckSpec_HEALTH_CHECK_TYPE_HTTP HealthCheckSpec_HealthCheckType = 2
)

var HealthCheckSpec_HealthCheckType_name = map[int32]string{
	0: "HEALTH_CHECK_TYPE_UNKNOWN",
	1: "HEALTH_CHECK_TYPE_COMMAND",
	2: "HEALTH_CHECK_TYPE_HTTP",
}

var HealthCheckSpec_HealthCheckType_value = map[string]int32{
	"HEALTH_CHECK_TYPE_UNKNOWN": 0,
	"HEALTH_CHECK_TYPE_COMMAND": 1,
	"HEALTH_CHECK_TYPE_HTTP":    2,
}

func (x HealthCheckSpec_HealthCheckType) String() string {
	return proto.EnumName(HealthCheckSpec_HealthCheckType_name, int32(x))
}

func (HealthCheckSpec_HealthCheckType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{3, 0}
}

type Constraint_Type int32

const (
	// Reserved for compatibility.
	Constraint_CONSTRAINT_TYPE_INVALID Constraint_Type = 0
	Constraint_CONSTRAINT_TYPE_LABEL   Constraint_Type = 1
	Constraint_CONSTRAINT_TYPE_AND     Constraint_Type = 2
	Constraint_CONSTRAINT_TYPE_OR      Constraint_Type = 3
)

var Constraint_Type_name = map[int32]string{
	0: "CONSTRAINT_TYPE_INVALID",
	1: "CONSTRAINT_TYPE_LABEL",
	2: "CONSTRAINT_TYPE_AND",
	3: "CONSTRAINT_TYPE_OR",
}

var Constraint_Type_value = map[string]int32{
	"CONSTRAINT_TYPE_INVALID": 0,
	"CONSTRAINT_TYPE_LABEL":   1,
	"CONSTRAINT_TYPE_AND":     2,
	"CONSTRAINT_TYPE_OR":      3,
}

func (x Constraint_Type) String() string {
	return proto.EnumName(Constraint_Type_name, int32(x))
}

func (Constraint_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{5, 0}
}

// Condition represents a constraint on the number of occurrences of the label.
type LabelConstraint_Condition int32

const (
	LabelConstraint_LABEL_CONSTRAINT_CONDITION_INVALID      LabelConstraint_Condition = 0
	LabelConstraint_LABEL_CONSTRAINT_CONDITION_LESS_THAN    LabelConstraint_Condition = 1
	LabelConstraint_LABEL_CONSTRAINT_CONDITION_EQUAL        LabelConstraint_Condition = 2
	LabelConstraint_LABEL_CONSTRAINT_CONDITION_GREATER_THAN LabelConstraint_Condition = 3
)

var LabelConstraint_Condition_name = map[int32]string{
	0: "LABEL_CONSTRAINT_CONDITION_INVALID",
	1: "LABEL_CONSTRAINT_CONDITION_LESS_THAN",
	2: "LABEL_CONSTRAINT_CONDITION_EQUAL",
	3: "LABEL_CONSTRAINT_CONDITION_GREATER_THAN",
}

var LabelConstraint_Condition_value = map[string]int32{
	"LABEL_CONSTRAINT_CONDITION_INVALID":      0,
	"LABEL_CONSTRAINT_CONDITION_LESS_THAN":    1,
	"LABEL_CONSTRAINT_CONDITION_EQUAL":        2,
	"LABEL_CONSTRAINT_CONDITION_GREATER_THAN": 3,
}

func (x LabelConstraint_Condition) String() string {
	return proto.EnumName(LabelConstraint_Condition_name, int32(x))
}

func (LabelConstraint_Condition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{8, 0}
}

// Kind represents whatever the constraint applies to the labels on the host
// or to the labels of the pods that are located on the host.
type LabelConstraint_Kind int32

const (
	LabelConstraint_LABEL_CONSTRAINT_KIND_INVALID LabelConstraint_Kind = 0
	LabelConstraint_LABEL_CONSTRAINT_KIND_POD     LabelConstraint_Kind = 1
	LabelConstraint_LABEL_CONSTRAINT_KIND_HOST    LabelConstraint_Kind = 2
)

var LabelConstraint_Kind_name = map[int32]string{
	0: "LABEL_CONSTRAINT_KIND_INVALID",
	1: "LABEL_CONSTRAINT_KIND_POD",
	2: "LABEL_CONSTRAINT_KIND_HOST",
}

var LabelConstraint_Kind_value = map[string]int32{
	"LABEL_CONSTRAINT_KIND_INVALID": 0,
	"LABEL_CONSTRAINT_KIND_POD":     1,
	"LABEL_CONSTRAINT_KIND_HOST":    2,
}

func (x LabelConstraint_Kind) String() string {
	return proto.EnumName(LabelConstraint_Kind_name, int32(x))
}

func (LabelConstraint_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{8, 1}
}

// Reason lists various causes for a task termination
type TerminationStatus_Reason int32

const (
	// Default value.
	TerminationStatus_TERMINATION_STATUS_REASON_INVALID TerminationStatus_Reason = 0
	// Task was killed because a stop request was received from a client.
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_ON_REQUEST TerminationStatus_Reason = 1
	// Task failed. See also TerminationStatus.exit_code,
	// TerminationStatus.signal and ContainerStatus.message.
	TerminationStatus_TERMINATION_STATUS_REASON_FAILED TerminationStatus_Reason = 2
	// Task was killed to put the host in to maintenance.
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_HOST_MAINTENANCE TerminationStatus_Reason = 3
	// Tasked was killed to reclaim resources allocated to it.
	TerminationStatus_TERMINATION_STATUS_REASON_PREEMPTED_RESOURCES TerminationStatus_Reason = 4
	// Task was killed due to deadline tracker exceeding task timeout
	TerminationStatus_TERMINATION_STATUS_REASON_DEADLINE_TIMEOUT_EXCEEDED TerminationStatus_Reason = 5
	// Task was killed for update
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_FOR_UPDATE TerminationStatus_Reason = 6
	// Task was killed for restart
	TerminationStatus_TERMINATION_STATUS_REASON_KILLED_FOR_RESTART TerminationStatus_Reason = 7
)

var TerminationStatus_Reason_name = map[int32]string{
	0: "TERMINATION_STATUS_REASON_INVALID",
	1: "TERMINATION_STATUS_REASON_KILLED_ON_REQUEST",
	2: "TERMINATION_STATUS_REASON_FAILED",
	3: "TERMINATION_STATUS_REASON_KILLED_HOST_MAINTENANCE",
	4: "TERMINATION_STATUS_REASON_PREEMPTED_RESOURCES",
	5: "TERMINATION_STATUS_REASON_DEADLINE_TIMEOUT_EXCEEDED",
	6: "TERMINATION_STATUS_REASON_KILLED_FOR_UPDATE",
	7: "TERMINATION_STATUS_REASON_KILLED_FOR_RESTART",
}

var TerminationStatus_Reason_value = map[string]int32{
	"TERMINATION_STATUS_REASON_INVALID":                   0,
	"TERMINATION_STATUS_REASON_KILLED_ON_REQUEST":         1,
	"TERMINATION_STATUS_REASON_FAILED":                    2,
	"TERMINATION_STATUS_REASON_KILLED_HOST_MAINTENANCE":   3,
	"TERMINATION_STATUS_REASON_PREEMPTED_RESOURCES":       4,
	"TERMINATION_STATUS_REASON_DEADLINE_TIMEOUT_EXCEEDED": 5,
	"TERMINATION_STATUS_REASON_KILLED_FOR_UPDATE":         6,
	"TERMINATION_STATUS_REASON_KILLED_FOR_RESTART":        7,
}

func (x TerminationStatus_Reason) String() string {
	return proto.EnumName(TerminationStatus_Reason_name, int32(x))
}

func (TerminationStatus_Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{17, 0}
}

// Resource configuration for a container.
type ResourceSpec struct {
	// CPU limit in number of CPU cores
	CpuLimit float64 `protobuf:"fixed64,1,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`
	// Memory limit in MB
	MemLimitMb float64 `protobuf:"fixed64,2,opt,name=mem_limit_mb,json=memLimitMb,proto3" json:"mem_limit_mb,omitempty"`
	// Disk limit in MB
	DiskLimitMb float64 `protobuf:"fixed64,3,opt,name=disk_limit_mb,json=diskLimitMb,proto3" json:"disk_limit_mb,omitempty"`
	// File descriptor limit
	FdLimit uint32 `protobuf:"varint,4,opt,name=fd_limit,json=fdLimit,proto3" json:"fd_limit,omitempty"`
	// GPU limit in number of GPUs
	GpuLimit             float64  `protobuf:"fixed64,5,opt,name=gpu_limit,json=gpuLimit,proto3" json:"gpu_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceSpec) Reset()         { *m = ResourceSpec{} }
func (m *ResourceSpec) String() string { return proto.CompactTextString(m) }
func (*ResourceSpec) ProtoMessage()    {}
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{0}
}

func (m *ResourceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceSpec.Unmarshal(m, b)
}
func (m *ResourceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceSpec.Marshal(b, m, deterministic)
}
func (m *ResourceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSpec.Merge(m, src)
}
func (m *ResourceSpec) XXX_Size() int {
	return xxx_messageInfo_ResourceSpec.Size(m)
}
func (m *ResourceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSpec proto.InternalMessageInfo

func (m *ResourceSpec) GetCpuLimit() float64 {
	if m != nil {
		return m.CpuLimit
	}
	return 0
}

func (m *ResourceSpec) GetMemLimitMb() float64 {
	if m != nil {
		return m.MemLimitMb
	}
	return 0
}

func (m *ResourceSpec) GetDiskLimitMb() float64 {
	if m != nil {
		return m.DiskLimitMb
	}
	return 0
}

func (m *ResourceSpec) GetFdLimit() uint32 {
	if m != nil {
		return m.FdLimit
	}
	return 0
}

func (m *ResourceSpec) GetGpuLimit() float64 {
	if m != nil {
		return m.GpuLimit
	}
	return 0
}

// CommandSpec describes a command to be run in the container.
type CommandSpec struct {
	// value is the command line to execute inside the container.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Arguments to the command.
	Arguments            []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandSpec) Reset()         { *m = CommandSpec{} }
func (m *CommandSpec) String() string { return proto.CompactTextString(m) }
func (*CommandSpec) ProtoMessage()    {}
func (*CommandSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{1}
}

func (m *CommandSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandSpec.Unmarshal(m, b)
}
func (m *CommandSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandSpec.Marshal(b, m, deterministic)
}
func (m *CommandSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandSpec.Merge(m, src)
}
func (m *CommandSpec) XXX_Size() int {
	return xxx_messageInfo_CommandSpec.Size(m)
}
func (m *CommandSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CommandSpec proto.InternalMessageInfo

func (m *CommandSpec) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CommandSpec) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

// HTTPGetSpec describes an action based on HTTP Get request.
type HTTPGetSpec struct {
	// The scheme to use for connecting to the host.
	// Currently http and https are supported.
	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Port to send the HTTP GET.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The request path on the HTTP server.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Custom HTTP headers to set in the request.
	// HTTP allows repeated headers.
	HttpHeaders          []*HTTPGetSpec_HTTPHeader `protobuf:"bytes,4,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *HTTPGetSpec) Reset()         { *m = HTTPGetSpec{} }
func (m *HTTPGetSpec) String() string { return proto.CompactTextString(m) }
func (*HTTPGetSpec) ProtoMessage()    {}
func (*HTTPGetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{2}
}

func (m *HTTPGetSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPGetSpec.Unmarshal(m, b)
}
func (m *HTTPGetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPGetSpec.Marshal(b, m, deterministic)
}
func (m *HTTPGetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPGetSpec.Merge(m, src)
}
func (m *HTTPGetSpec) XXX_Size() int {
	return xxx_messageInfo_HTTPGetSpec.Size(m)
}
func (m *HTTPGetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPGetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPGetSpec proto.InternalMessageInfo

func (m *HTTPGetSpec) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *HTTPGetSpec) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *HTTPGetSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTTPGetSpec) GetHttpHeaders() []*HTTPGetSpec_HTTPHeader {
	if m != nil {
		return m.HttpHeaders
	}
	return nil
}

// HTTPHeader describes a custom HTTP header to be used in the HTTP request.
type HTTPGetSpec_HTTPHeader struct {
	// The header field name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The header field value
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPGetSpec_HTTPHeader) Reset()         { *m = HTTPGetSpec_HTTPHeader{} }
func (m *HTTPGetSpec_HTTPHeader) String() string { return proto.CompactTextString(m) }
func (*HTTPGetSpec_HTTPHeader) ProtoMessage()    {}
func (*HTTPGetSpec_HTTPHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{2, 0}
}

func (m *HTTPGetSpec_HTTPHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPGetSpec_HTTPHeader.Unmarshal(m, b)
}
func (m *HTTPGetSpec_HTTPHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPGetSpec_HTTPHeader.Marshal(b, m, deterministic)
}
func (m *HTTPGetSpec_HTTPHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPGetSpec_HTTPHeader.Merge(m, src)
}
func (m *HTTPGetSpec_HTTPHeader) XXX_Size() int {
	return xxx_messageInfo_HTTPGetSpec_HTTPHeader.Size(m)
}
func (m *HTTPGetSpec_HTTPHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPGetSpec_HTTPHeader.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPGetSpec_HTTPHeader proto.InternalMessageInfo

func (m *HTTPGetSpec_HTTPHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPGetSpec_HTTPHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Health check configuration for a container
type HealthCheckSpec struct {
	// Whether the health check is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Start time wait in seconds.
	// Default value is 15.
	InitialIntervalSecs uint32 `protobuf:"varint,2,opt,name=initial_interval_secs,json=initialIntervalSecs,proto3" json:"initial_interval_secs,omitempty"`
	// Interval in seconds between two health checks.
	// Default value is 10.
	IntervalSecs uint32 `protobuf:"varint,3,opt,name=interval_secs,json=intervalSecs,proto3" json:"interval_secs,omitempty"`
	// Max number of consecutive failures before failing health check.
	// Default value is 3.
	MaxConsecutiveFailures uint32 `protobuf:"varint,4,opt,name=max_consecutive_failures,json=maxConsecutiveFailures,proto3" json:"max_consecutive_failures,omitempty"`
	// Health check command timeout in seconds.
	// Default value is 20.
	TimeoutSecs uint32 `protobuf:"varint,5,opt,name=timeout_secs,json=timeoutSecs,proto3" json:"timeout_secs,omitempty"`
	// Type of health check to run
	Type HealthCheckSpec_HealthCheckType `protobuf:"varint,6,opt,name=type,proto3,enum=peloton.api.v1alpha.pod.HealthCheckSpec_HealthCheckType" json:"type,omitempty"`
	// Only applicable when type is `COMMAND`.
	// Deprecated
	CommandCheck *HealthCheckSpec_CommandCheck `protobuf:"bytes,7,opt,name=command_check,json=commandCheck,proto3" json:"command_check,omitempty"`
	// Only applicable when type is 'HTTP'.
	// Deprecated
	HttpCheck *HealthCheckSpec_HTTPCheck `protobuf:"bytes,8,opt,name=http_check,json=httpCheck,proto3" json:"http_check,omitempty"`
	// Minimum consecutive successes for the health check to be
	// considered successful after a failure. Defaults to 1.
	// Only available in the Kubelet runtime.
	SuccessThreshold uint32 `protobuf:"varint,9,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	// Command to run in the container to do the health check.
	// Only applicable when type is `COMMAND`.
	Command *CommandSpec `protobuf:"bytes,10,opt,name=command,proto3" json:"command,omitempty"`
	// HTTP Get request to perform.
	// Only applicable when type is 'HTTP'.
	HttpGet              *HTTPGetSpec `protobuf:"bytes,11,opt,name=http_get,json=httpGet,proto3" json:"http_get,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HealthCheckSpec) Reset()         { *m = HealthCheckSpec{} }
func (m *HealthCheckSpec) String() string { return proto.CompactTextString(m) }
func (*HealthCheckSpec) ProtoMessage()    {}
func (*HealthCheckSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{3}
}

func (m *HealthCheckSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckSpec.Unmarshal(m, b)
}
func (m *HealthCheckSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckSpec.Marshal(b, m, deterministic)
}
func (m *HealthCheckSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckSpec.Merge(m, src)
}
func (m *HealthCheckSpec) XXX_Size() int {
	return xxx_messageInfo_HealthCheckSpec.Size(m)
}
func (m *HealthCheckSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckSpec proto.InternalMessageInfo

func (m *HealthCheckSpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *HealthCheckSpec) GetInitialIntervalSecs() uint32 {
	if m != nil {
		return m.InitialIntervalSecs
	}
	return 0
}

func (m *HealthCheckSpec) GetIntervalSecs() uint32 {
	if m != nil {
		return m.IntervalSecs
	}
	return 0
}

func (m *HealthCheckSpec) GetMaxConsecutiveFailures() uint32 {
	if m != nil {
		return m.MaxConsecutiveFailures
	}
	return 0
}

func (m *HealthCheckSpec) GetTimeoutSecs() uint32 {
	if m != nil {
		return m.TimeoutSecs
	}
	return 0
}

func (m *HealthCheckSpec) GetType() HealthCheckSpec_HealthCheckType {
	if m != nil {
		return m.Type
	}
	return HealthCheckSpec_HEALTH_CHECK_TYPE_UNKNOWN
}

func (m *HealthCheckSpec) GetCommandCheck() *HealthCheckSpec_CommandCheck {
	if m != nil {
		return m.CommandCheck
	}
	return nil
}

func (m *HealthCheckSpec) GetHttpCheck() *HealthCheckSpec_HTTPCheck {
	if m != nil {
		return m.HttpCheck
	}
	return nil
}

func (m *HealthCheckSpec) GetSuccessThreshold() uint32 {
	if m != nil {
		return m.SuccessThreshold
	}
	return 0
}

func (m *HealthCheckSpec) GetCommand() *CommandSpec {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *HealthCheckSpec) GetHttpGet() *HTTPGetSpec {
	if m != nil {
		return m.HttpGet
	}
	return nil
}

// Deprecated.
type HealthCheckSpec_CommandCheck struct {
	// Health check command to be executed.
	// Note that this command by default inherits all environment varibles from
	// the container it's monitoring, unless `unshare_environments` is set to true.
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// If set, this check will not share the environment variables of the container.
	UnshareEnvironments  bool     `protobuf:"varint,2,opt,name=unshare_environments,json=unshareEnvironments,proto3" json:"unshare_environments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckSpec_CommandCheck) Reset()         { *m = HealthCheckSpec_CommandCheck{} }
func (m *HealthCheckSpec_CommandCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckSpec_CommandCheck) ProtoMessage()    {}
func (*HealthCheckSpec_CommandCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{3, 0}
}

func (m *HealthCheckSpec_CommandCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckSpec_CommandCheck.Unmarshal(m, b)
}
func (m *HealthCheckSpec_CommandCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckSpec_CommandCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckSpec_CommandCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckSpec_CommandCheck.Merge(m, src)
}
func (m *HealthCheckSpec_CommandCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckSpec_CommandCheck.Size(m)
}
func (m *HealthCheckSpec_CommandCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckSpec_CommandCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckSpec_CommandCheck proto.InternalMessageInfo

func (m *HealthCheckSpec_CommandCheck) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *HealthCheckSpec_CommandCheck) GetUnshareEnvironments() bool {
	if m != nil {
		return m.UnshareEnvironments
	}
	return false
}

// Deprecated.
type HealthCheckSpec_HTTPCheck struct {
	// Currently http and https are supported.
	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Port to send the HTTP GET.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The request path.
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckSpec_HTTPCheck) Reset()         { *m = HealthCheckSpec_HTTPCheck{} }
func (m *HealthCheckSpec_HTTPCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheckSpec_HTTPCheck) ProtoMessage()    {}
func (*HealthCheckSpec_HTTPCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{3, 1}
}

func (m *HealthCheckSpec_HTTPCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckSpec_HTTPCheck.Unmarshal(m, b)
}
func (m *HealthCheckSpec_HTTPCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckSpec_HTTPCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheckSpec_HTTPCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckSpec_HTTPCheck.Merge(m, src)
}
func (m *HealthCheckSpec_HTTPCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheckSpec_HTTPCheck.Size(m)
}
func (m *HealthCheckSpec_HTTPCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckSpec_HTTPCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckSpec_HTTPCheck proto.InternalMessageInfo

func (m *HealthCheckSpec_HTTPCheck) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *HealthCheckSpec_HTTPCheck) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *HealthCheckSpec_HTTPCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Network port configuration for a container
type PortSpec struct {
	// Name of the network port, e.g. http, tchannel. Required field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Static port number if any. If unset, will be dynamically allocated
	// by the scheduler
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Environment variable name to be exported when running a container for this port.
	// Required field for dynamic port.
	EnvName              string   `protobuf:"bytes,3,opt,name=env_name,json=envName,proto3" json:"env_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortSpec) Reset()         { *m = PortSpec{} }
func (m *PortSpec) String() string { return proto.CompactTextString(m) }
func (*PortSpec) ProtoMessage()    {}
func (*PortSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{4}
}

func (m *PortSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortSpec.Unmarshal(m, b)
}
func (m *PortSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortSpec.Marshal(b, m, deterministic)
}
func (m *PortSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortSpec.Merge(m, src)
}
func (m *PortSpec) XXX_Size() int {
	return xxx_messageInfo_PortSpec.Size(m)
}
func (m *PortSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PortSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PortSpec proto.InternalMessageInfo

func (m *PortSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortSpec) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PortSpec) GetEnvName() string {
	if m != nil {
		return m.EnvName
	}
	return ""
}

// Constraint represents a host label constraint or a related pods label constraint.
// This is used to require that a host have certain label constraints or to require
// that the pods already running on the host have certain label constraints.
type Constraint struct {
	Type                 Constraint_Type  `protobuf:"varint,1,opt,name=type,proto3,enum=peloton.api.v1alpha.pod.Constraint_Type" json:"type,omitempty"`
	LabelConstraint      *LabelConstraint `protobuf:"bytes,2,opt,name=label_constraint,json=labelConstraint,proto3" json:"label_constraint,omitempty"`
	AndConstraint        *AndConstraint   `protobuf:"bytes,3,opt,name=and_constraint,json=andConstraint,proto3" json:"and_constraint,omitempty"`
	OrConstraint         *OrConstraint    `protobuf:"bytes,4,opt,name=or_constraint,json=orConstraint,proto3" json:"or_constraint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Constraint) Reset()         { *m = Constraint{} }
func (m *Constraint) String() string { return proto.CompactTextString(m) }
func (*Constraint) ProtoMessage()    {}
func (*Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{5}
}

func (m *Constraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Constraint.Unmarshal(m, b)
}
func (m *Constraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Constraint.Marshal(b, m, deterministic)
}
func (m *Constraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Constraint.Merge(m, src)
}
func (m *Constraint) XXX_Size() int {
	return xxx_messageInfo_Constraint.Size(m)
}
func (m *Constraint) XXX_DiscardUnknown() {
	xxx_messageInfo_Constraint.DiscardUnknown(m)
}

var xxx_messageInfo_Constraint proto.InternalMessageInfo

func (m *Constraint) GetType() Constraint_Type {
	if m != nil {
		return m.Type
	}
	return Constraint_CONSTRAINT_TYPE_INVALID
}

func (m *Constraint) GetLabelConstraint() *LabelConstraint {
	if m != nil {
		return m.LabelConstraint
	}
	return nil
}

func (m *Constraint) GetAndConstraint() *AndConstraint {
	if m != nil {
		return m.AndConstraint
	}
	return nil
}

func (m *Constraint) GetOrConstraint() *OrConstraint {
	if m != nil {
		return m.OrConstraint
	}
	return nil
}

// AndConstraint represents a logical 'and' of constraints.
type AndConstraint struct {
	Constraints          []*Constraint `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AndConstraint) Reset()         { *m = AndConstraint{} }
func (m *AndConstraint) String() string { return proto.CompactTextString(m) }
func (*AndConstraint) ProtoMessage()    {}
func (*AndConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{6}
}

func (m *AndConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AndConstraint.Unmarshal(m, b)
}
func (m *AndConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AndConstraint.Marshal(b, m, deterministic)
}
func (m *AndConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AndConstraint.Merge(m, src)
}
func (m *AndConstraint) XXX_Size() int {
	return xxx_messageInfo_AndConstraint.Size(m)
}
func (m *AndConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_AndConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_AndConstraint proto.InternalMessageInfo

func (m *AndConstraint) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

// OrConstraint represents a logical 'or' of constraints.
type OrConstraint struct {
	Constraints          []*Constraint `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrConstraint) Reset()         { *m = OrConstraint{} }
func (m *OrConstraint) String() string { return proto.CompactTextString(m) }
func (*OrConstraint) ProtoMessage()    {}
func (*OrConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{7}
}

func (m *OrConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrConstraint.Unmarshal(m, b)
}
func (m *OrConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrConstraint.Marshal(b, m, deterministic)
}
func (m *OrConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrConstraint.Merge(m, src)
}
func (m *OrConstraint) XXX_Size() int {
	return xxx_messageInfo_OrConstraint.Size(m)
}
func (m *OrConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_OrConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_OrConstraint proto.InternalMessageInfo

func (m *OrConstraint) GetConstraints() []*Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

// LabelConstraint represents a constraint on the number of occurrences of a given
// label from the set of host labels or pod labels present on the host.
type LabelConstraint struct {
	// Determines which labels the constraint should apply to.
	Kind LabelConstraint_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=peloton.api.v1alpha.pod.LabelConstraint_Kind" json:"kind,omitempty"`
	// Determines which constraint there should be on the number of occurrences of the label.
	Condition LabelConstraint_Condition `protobuf:"varint,2,opt,name=condition,proto3,enum=peloton.api.v1alpha.pod.LabelConstraint_Condition" json:"condition,omitempty"`
	// The label which this defines a constraint on:
	// For Kind == HOST, each attribute on host agent is transformed to a label,
	// with `hostname` as a special label which is always inferred from agent
	// hostname and set.
	Label *peloton.Label `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// A limit on the number of occurrences of the label.
	Requirement          uint32   `protobuf:"varint,4,opt,name=requirement,proto3" json:"requirement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelConstraint) Reset()         { *m = LabelConstraint{} }
func (m *LabelConstraint) String() string { return proto.CompactTextString(m) }
func (*LabelConstraint) ProtoMessage()    {}
func (*LabelConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{8}
}

func (m *LabelConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelConstraint.Unmarshal(m, b)
}
func (m *LabelConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelConstraint.Marshal(b, m, deterministic)
}
func (m *LabelConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelConstraint.Merge(m, src)
}
func (m *LabelConstraint) XXX_Size() int {
	return xxx_messageInfo_LabelConstraint.Size(m)
}
func (m *LabelConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_LabelConstraint proto.InternalMessageInfo

func (m *LabelConstraint) GetKind() LabelConstraint_Kind {
	if m != nil {
		return m.Kind
	}
	return LabelConstraint_LABEL_CONSTRAINT_KIND_INVALID
}

func (m *LabelConstraint) GetCondition() LabelConstraint_Condition {
	if m != nil {
		return m.Condition
	}
	return LabelConstraint_LABEL_CONSTRAINT_CONDITION_INVALID
}

func (m *LabelConstraint) GetLabel() *peloton.Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *LabelConstraint) GetRequirement() uint32 {
	if m != nil {
		return m.Requirement
	}
	return 0
}

// Restart policy for a pod.
type RestartPolicy struct {
	// Max number of pod failures can occur before giving up scheduling retry, no
	// backoff for now. Default 0 means no retry on failures.
	MaxFailures          uint32   `protobuf:"varint,1,opt,name=max_failures,json=maxFailures,proto3" json:"max_failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartPolicy) Reset()         { *m = RestartPolicy{} }
func (m *RestartPolicy) String() string { return proto.CompactTextString(m) }
func (*RestartPolicy) ProtoMessage()    {}
func (*RestartPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{9}
}

func (m *RestartPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartPolicy.Unmarshal(m, b)
}
func (m *RestartPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartPolicy.Marshal(b, m, deterministic)
}
func (m *RestartPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartPolicy.Merge(m, src)
}
func (m *RestartPolicy) XXX_Size() int {
	return xxx_messageInfo_RestartPolicy.Size(m)
}
func (m *RestartPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RestartPolicy proto.InternalMessageInfo

func (m *RestartPolicy) GetMaxFailures() uint32 {
	if m != nil {
		return m.MaxFailures
	}
	return 0
}

// Preemption policy for a pod
type PreemptionPolicy struct {
	// This policy defines if the pod should be restarted after it is
	// preempted. If set to true the pod will not be rescheduled
	// after it is preempted. If set to false the pod will be rescheduled.
	// Defaults to false
	KillOnPreempt        bool     `protobuf:"varint,2,opt,name=kill_on_preempt,json=killOnPreempt,proto3" json:"kill_on_preempt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreemptionPolicy) Reset()         { *m = PreemptionPolicy{} }
func (m *PreemptionPolicy) String() string { return proto.CompactTextString(m) }
func (*PreemptionPolicy) ProtoMessage()    {}
func (*PreemptionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{10}
}

func (m *PreemptionPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreemptionPolicy.Unmarshal(m, b)
}
func (m *PreemptionPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreemptionPolicy.Marshal(b, m, deterministic)
}
func (m *PreemptionPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreemptionPolicy.Merge(m, src)
}
func (m *PreemptionPolicy) XXX_Size() int {
	return xxx_messageInfo_PreemptionPolicy.Size(m)
}
func (m *PreemptionPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PreemptionPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PreemptionPolicy proto.InternalMessageInfo

func (m *PreemptionPolicy) GetKillOnPreempt() bool {
	if m != nil {
		return m.KillOnPreempt
	}
	return false
}

// Persistent volume configuration for a pod.
// Deprecated
type PersistentVolumeSpec struct {
	// Volume mount path inside container.
	ContainerPath string `protobuf:"bytes,1,opt,name=container_path,json=containerPath,proto3" json:"container_path,omitempty"`
	// Volume size in MB.
	SizeMb               uint32   `protobuf:"varint,2,opt,name=size_mb,json=sizeMb,proto3" json:"size_mb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PersistentVolumeSpec) Reset()         { *m = PersistentVolumeSpec{} }
func (m *PersistentVolumeSpec) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeSpec) ProtoMessage()    {}
func (*PersistentVolumeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{11}
}

func (m *PersistentVolumeSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersistentVolumeSpec.Unmarshal(m, b)
}
func (m *PersistentVolumeSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersistentVolumeSpec.Marshal(b, m, deterministic)
}
func (m *PersistentVolumeSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentVolumeSpec.Merge(m, src)
}
func (m *PersistentVolumeSpec) XXX_Size() int {
	return xxx_messageInfo_PersistentVolumeSpec.Size(m)
}
func (m *PersistentVolumeSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentVolumeSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentVolumeSpec proto.InternalMessageInfo

func (m *PersistentVolumeSpec) GetContainerPath() string {
	if m != nil {
		return m.ContainerPath
	}
	return ""
}

func (m *PersistentVolumeSpec) GetSizeMb() uint32 {
	if m != nil {
		return m.SizeMb
	}
	return 0
}

// Environment represents an environment variable present in a container.
type Environment struct {
	// Name of the environment variable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the environment variable.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Environment) Reset()         { *m = Environment{} }
func (m *Environment) String() string { return proto.CompactTextString(m) }
func (*Environment) ProtoMessage()    {}
func (*Environment) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{12}
}

func (m *Environment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Environment.Unmarshal(m, b)
}
func (m *Environment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Environment.Marshal(b, m, deterministic)
}
func (m *Environment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Environment.Merge(m, src)
}
func (m *Environment) XXX_Size() int {
	return xxx_messageInfo_Environment.Size(m)
}
func (m *Environment) XXX_DiscardUnknown() {
	xxx_messageInfo_Environment.DiscardUnknown(m)
}

var xxx_messageInfo_Environment proto.InternalMessageInfo

func (m *Environment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Environment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMount struct {
	// This must match the Name of a Volume in the PodSpec.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	ReadOnly bool `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// Path within the container at which the volume should be mounted.
	MountPath            string   `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeMount) Reset()         { *m = VolumeMount{} }
func (m *VolumeMount) String() string { return proto.CompactTextString(m) }
func (*VolumeMount) ProtoMessage()    {}
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{13}
}

func (m *VolumeMount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeMount.Unmarshal(m, b)
}
func (m *VolumeMount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeMount.Marshal(b, m, deterministic)
}
func (m *VolumeMount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeMount.Merge(m, src)
}
func (m *VolumeMount) XXX_Size() int {
	return xxx_messageInfo_VolumeMount.Size(m)
}
func (m *VolumeMount) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeMount.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeMount proto.InternalMessageInfo

func (m *VolumeMount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeMount) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *VolumeMount) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

// A single application container running inside a pod
type ContainerSpec struct {
	// Name of the container.
	// Each container in a pod must have a unique name.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource config of the container
	Resource *ResourceSpec `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// Container config of the container
	// Deprecated.
	Container *v1.ContainerInfo `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
	// Command line config of the container
	// Deprecated.
	Command *v1.CommandInfo `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	// Custom executor config of the task.
	// Deprecated.
	Executor *v1.ExecutorInfo `protobuf:"bytes,8,opt,name=executor,proto3" json:"executor,omitempty"`
	// Liveness health check config of the container
	LivenessCheck *HealthCheckSpec `protobuf:"bytes,5,opt,name=liveness_check,json=livenessCheck,proto3" json:"liveness_check,omitempty"`
	// Readiness health check config of the container
	// This is currently not supported.
	ReadinessCheck *HealthCheckSpec `protobuf:"bytes,6,opt,name=readiness_check,json=readinessCheck,proto3" json:"readiness_check,omitempty"`
	// List of network ports to be allocated for the pod
	Ports []*PortSpec `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty"`
	// Entrypoint command.
	Entrypoint *CommandSpec `protobuf:"bytes,9,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	// List of environment variables to set in the container.
	Environment []*Environment `protobuf:"bytes,10,rep,name=environment,proto3" json:"environment,omitempty"`
	// Image name.
	Image string `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
	// Pod volumes to mount into the container's filesystem.
	VolumeMounts         []*VolumeMount `protobuf:"bytes,12,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ContainerSpec) Reset()         { *m = ContainerSpec{} }
func (m *ContainerSpec) String() string { return proto.CompactTextString(m) }
func (*ContainerSpec) ProtoMessage()    {}
func (*ContainerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{14}
}

func (m *ContainerSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerSpec.Unmarshal(m, b)
}
func (m *ContainerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerSpec.Marshal(b, m, deterministic)
}
func (m *ContainerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerSpec.Merge(m, src)
}
func (m *ContainerSpec) XXX_Size() int {
	return xxx_messageInfo_ContainerSpec.Size(m)
}
func (m *ContainerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerSpec proto.InternalMessageInfo

func (m *ContainerSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerSpec) GetResource() *ResourceSpec {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ContainerSpec) GetContainer() *v1.ContainerInfo {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ContainerSpec) GetCommand() *v1.CommandInfo {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ContainerSpec) GetExecutor() *v1.ExecutorInfo {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *ContainerSpec) GetLivenessCheck() *HealthCheckSpec {
	if m != nil {
		return m.LivenessCheck
	}
	return nil
}

func (m *ContainerSpec) GetReadinessCheck() *HealthCheckSpec {
	if m != nil {
		return m.ReadinessCheck
	}
	return nil
}

func (m *ContainerSpec) GetPorts() []*PortSpec {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ContainerSpec) GetEntrypoint() *CommandSpec {
	if m != nil {
		return m.Entrypoint
	}
	return nil
}

func (m *ContainerSpec) GetEnvironment() []*Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *ContainerSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ContainerSpec) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

// Pod configuration for a given job instance
// Note that only add string/slice/ptr type into PodConfig directly due to
// the limitation of go reflection inside our pod specific config logic.
type PodSpec struct {
	// Name of the pod
	PodName *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// List of user-defined labels for the pod
	Labels []*peloton.Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// List of initialization containers belonging to the pod.
	// These containers are assumed to run to completion and
	// are executed in order prior to containers being started.
	// If any init container fails, the pod is considered to have failed.
	// Init containers cannot be configured to have readiness or liveness health checks.
	InitContainers []*ContainerSpec `protobuf:"bytes,3,rep,name=init_containers,json=initContainers,proto3" json:"init_containers,omitempty"`
	// List of containers belonging to the pod.
	// These will be started in parallel after init containers terminate.
	// There must be at least one container in a pod.
	Containers []*ContainerSpec `protobuf:"bytes,4,rep,name=containers,proto3" json:"containers,omitempty"`
	// Constraint on the attributes of the host or labels on pods on the host
	// that this pod should run on.
	// Use `AndConstraint`/`OrConstraint` to compose multiple constraints if
	// necessary.
	Constraint *Constraint `protobuf:"bytes,5,opt,name=constraint,proto3" json:"constraint,omitempty"`
	// Pod restart policy on failures
	RestartPolicy *RestartPolicy `protobuf:"bytes,6,opt,name=restart_policy,json=restartPolicy,proto3" json:"restart_policy,omitempty"`
	// Persistent volume config of the pod.
	// Deprecated
	Volume *PersistentVolumeSpec `protobuf:"bytes,7,opt,name=volume,proto3" json:"volume,omitempty"`
	// Preemption policy of the pod
	PreemptionPolicy *PreemptionPolicy `protobuf:"bytes,8,opt,name=preemption_policy,json=preemptionPolicy,proto3" json:"preemption_policy,omitempty"`
	// Whether this is a controller pod. A controller is a special batch pod
	// which controls other pods inside a job. E.g. spark driver pods in a spark
	// job will be a controller pod.
	Controller bool `protobuf:"varint,9,opt,name=controller,proto3" json:"controller,omitempty"`
	// This is used to set the amount of time between when the executor sends the
	// SIGTERM message to gracefully terminate a pod and when it kills it by
	// sending SIGKILL. If you do not set the grace period duration the default is
	// 30 seconds.
	KillGracePeriodSeconds uint32 `protobuf:"varint,10,opt,name=kill_grace_period_seconds,json=killGracePeriodSeconds,proto3" json:"kill_grace_period_seconds,omitempty"`
	// revocable represents pod to use physical or slack resources.
	Revocable bool `protobuf:"varint,11,opt,name=revocable,proto3" json:"revocable,omitempty"`
	// List of volumes that can be mounted by containers belonging to the pod.
	Volumes []*volume.VolumeSpec `protobuf:"bytes,12,rep,name=volumes,proto3" json:"volumes,omitempty"`
	// Extra configuration specific to the Mesos runtime.
	// Experimental and is subject to change.
	MesosSpec            *apachemesos.PodSpec `protobuf:"bytes,13,opt,name=mesos_spec,json=mesosSpec,proto3" json:"mesos_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PodSpec) Reset()         { *m = PodSpec{} }
func (m *PodSpec) String() string { return proto.CompactTextString(m) }
func (*PodSpec) ProtoMessage()    {}
func (*PodSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{15}
}

func (m *PodSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSpec.Unmarshal(m, b)
}
func (m *PodSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSpec.Marshal(b, m, deterministic)
}
func (m *PodSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSpec.Merge(m, src)
}
func (m *PodSpec) XXX_Size() int {
	return xxx_messageInfo_PodSpec.Size(m)
}
func (m *PodSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PodSpec proto.InternalMessageInfo

func (m *PodSpec) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

func (m *PodSpec) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PodSpec) GetInitContainers() []*ContainerSpec {
	if m != nil {
		return m.InitContainers
	}
	return nil
}

func (m *PodSpec) GetContainers() []*ContainerSpec {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodSpec) GetConstraint() *Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (m *PodSpec) GetRestartPolicy() *RestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return nil
}

func (m *PodSpec) GetVolume() *PersistentVolumeSpec {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *PodSpec) GetPreemptionPolicy() *PreemptionPolicy {
	if m != nil {
		return m.PreemptionPolicy
	}
	return nil
}

func (m *PodSpec) GetController() bool {
	if m != nil {
		return m.Controller
	}
	return false
}

func (m *PodSpec) GetKillGracePeriodSeconds() uint32 {
	if m != nil {
		return m.KillGracePeriodSeconds
	}
	return 0
}

func (m *PodSpec) GetRevocable() bool {
	if m != nil {
		return m.Revocable
	}
	return false
}

func (m *PodSpec) GetVolumes() []*volume.VolumeSpec {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSpec) GetMesosSpec() *apachemesos.PodSpec {
	if m != nil {
		return m.MesosSpec
	}
	return nil
}

// The result of the health check
type HealthStatus struct {
	// The health check state
	State HealthState `protobuf:"varint,1,opt,name=state,proto3,enum=peloton.api.v1alpha.pod.HealthState" json:"state,omitempty"`
	// The output of the health check run
	Output               string   `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthStatus) Reset()         { *m = HealthStatus{} }
func (m *HealthStatus) String() string { return proto.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()    {}
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{16}
}

func (m *HealthStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthStatus.Unmarshal(m, b)
}
func (m *HealthStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthStatus.Marshal(b, m, deterministic)
}
func (m *HealthStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthStatus.Merge(m, src)
}
func (m *HealthStatus) XXX_Size() int {
	return xxx_messageInfo_HealthStatus.Size(m)
}
func (m *HealthStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HealthStatus proto.InternalMessageInfo

func (m *HealthStatus) GetState() HealthState {
	if m != nil {
		return m.State
	}
	return HealthState_HEALTH_STATE_INVALID
}

func (m *HealthStatus) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

// TerminationStatus contains details about termination of a task. It mainly
// contains Peloton-specific reasons for termination.
type TerminationStatus struct {
	// Reason for termination.
	Reason TerminationStatus_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=peloton.api.v1alpha.pod.TerminationStatus_Reason" json:"reason,omitempty"`
	// If non-zero, exit status when the container terminated.
	ExitCode uint32 `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Name of signal received by the container when it terminated.
	Signal               string   `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TerminationStatus) Reset()         { *m = TerminationStatus{} }
func (m *TerminationStatus) String() string { return proto.CompactTextString(m) }
func (*TerminationStatus) ProtoMessage()    {}
func (*TerminationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{17}
}

func (m *TerminationStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TerminationStatus.Unmarshal(m, b)
}
func (m *TerminationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TerminationStatus.Marshal(b, m, deterministic)
}
func (m *TerminationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminationStatus.Merge(m, src)
}
func (m *TerminationStatus) XXX_Size() int {
	return xxx_messageInfo_TerminationStatus.Size(m)
}
func (m *TerminationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TerminationStatus proto.InternalMessageInfo

func (m *TerminationStatus) GetReason() TerminationStatus_Reason {
	if m != nil {
		return m.Reason
	}
	return TerminationStatus_TERMINATION_STATUS_REASON_INVALID
}

func (m *TerminationStatus) GetExitCode() uint32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *TerminationStatus) GetSignal() string {
	if m != nil {
		return m.Signal
	}
	return ""
}

// Runtime status of a container in a pod
type ContainerStatus struct {
	// Name of the container
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Runtime state of the container
	State ContainerState `protobuf:"varint,2,opt,name=state,proto3,enum=peloton.api.v1alpha.pod.ContainerState" json:"state,omitempty"`
	// Dynamic ports reserved on the host while this container is running
	Ports map[string]uint32 `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The message that explains the current state of a container such as why
	// the container is failed. Only track the latest one if the container has been
	// retried and failed multiple times.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// The reason that explains the current state of a container. Only track
	// the latest one if the container has been retried and failed multiple times.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// The number of times the container has failed after retries.
	FailureCount uint32 `protobuf:"varint,6,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	// The result of the health check
	Healthy *HealthStatus `protobuf:"bytes,7,opt,name=healthy,proto3" json:"healthy,omitempty"`
	// The image the container is running
	Image string `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	// The time when the container starts to run. Will be unset if the
	// pod hasn't started running yet. The time is represented in
	// RFC3339 form with UTC timezone.
	StartTime string `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time when the container terminated. Will be unset if the
	// pod hasn't completed yet. The time is represented in
	// RFC3339 form with UTC timezone.
	CompletionTime string `protobuf:"bytes,10,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	// Termination status of the task. Set only if the task is in a non-successful
	// terminal state such as CONTAINER_STATE_FAILED or CONTAINER_STATE_KILLED.
	TerminationStatus    *TerminationStatus `protobuf:"bytes,11,opt,name=terminationStatus,proto3" json:"terminationStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ContainerStatus) Reset()         { *m = ContainerStatus{} }
func (m *ContainerStatus) String() string { return proto.CompactTextString(m) }
func (*ContainerStatus) ProtoMessage()    {}
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{18}
}

func (m *ContainerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerStatus.Unmarshal(m, b)
}
func (m *ContainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerStatus.Marshal(b, m, deterministic)
}
func (m *ContainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerStatus.Merge(m, src)
}
func (m *ContainerStatus) XXX_Size() int {
	return xxx_messageInfo_ContainerStatus.Size(m)
}
func (m *ContainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerStatus proto.InternalMessageInfo

func (m *ContainerStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerStatus) GetState() ContainerState {
	if m != nil {
		return m.State
	}
	return ContainerState_CONTAINER_STATE_INVALID
}

func (m *ContainerStatus) GetPorts() map[string]uint32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ContainerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ContainerStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ContainerStatus) GetFailureCount() uint32 {
	if m != nil {
		return m.FailureCount
	}
	return 0
}

func (m *ContainerStatus) GetHealthy() *HealthStatus {
	if m != nil {
		return m.Healthy
	}
	return nil
}

func (m *ContainerStatus) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ContainerStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ContainerStatus) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *ContainerStatus) GetTerminationStatus() *TerminationStatus {
	if m != nil {
		return m.TerminationStatus
	}
	return nil
}

// Runtime status of a pod instance in a Job
type PodStatus struct {
	// Runtime state of the pod
	State PodState `protobuf:"varint,1,opt,name=state,proto3,enum=peloton.api.v1alpha.pod.PodState" json:"state,omitempty"`
	// The current pod ID for this pod
	PodId *peloton.PodID `protobuf:"bytes,2,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	// The time when the pod starts to run. Will be unset if the
	// pod hasn't started running yet. The time is represented in
	// RFC3339 form with UTC timezone.
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time when the pod is completed. Will be unset if the
	// pod hasn't completed yet. The time is represented in
	// RFC3339 form with UTC timezone.
	CompletionTime string `protobuf:"bytes,4,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	// The name of the host where the pod is running
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// Status of the init containers.
	InitContainersStatus []*ContainerStatus `protobuf:"bytes,6,rep,name=init_containers_status,json=initContainersStatus,proto3" json:"init_containers_status,omitempty"`
	// Status of the containers.
	ContainersStatus []*ContainerStatus `protobuf:"bytes,7,rep,name=containers_status,json=containersStatus,proto3" json:"containers_status,omitempty"`
	// The desired state of the pod which should be eventually reached
	// by the system.
	DesiredState PodState `protobuf:"varint,8,opt,name=desired_state,json=desiredState,proto3,enum=peloton.api.v1alpha.pod.PodState" json:"desired_state,omitempty"`
	// The message that explains the current state of a pod.
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// The reason that explains the current state of a pod.
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	// The number of times the pod has failed after retries.
	FailureCount uint32 `protobuf:"varint,11,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	// persistent volume id
	// Deprecated
	VolumeId *peloton.VolumeID `protobuf:"bytes,12,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The entity version currently used by the pod.
	// TODO Avoid leaking job abstractions into public pod APIs.
	// Remove after internal protobuf structures are defined.
	Version *peloton.EntityVersion `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	// The desired entity version that should be used by the pod.
	// TODO Avoid leaking job abstractions into public pod APIs.
	// Remove after internal protobuf structures are defined.
	DesiredVersion *peloton.EntityVersion `protobuf:"bytes,14,opt,name=desired_version,json=desiredVersion,proto3" json:"desired_version,omitempty"`
	// the id of mesos agent on the host to be launched.
	// Deprecated.
	AgentId *v1.AgentID `protobuf:"bytes,15,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// Revision of the current pod status.
	Revision *peloton.Revision `protobuf:"bytes,16,opt,name=revision,proto3" json:"revision,omitempty"`
	// The pod id of the previous pod.
	PrevPodId *peloton.PodID `protobuf:"bytes,17,opt,name=prev_pod_id,json=prevPodId,proto3" json:"prev_pod_id,omitempty"`
	// The resource usage for this pod. The map key is each resource kind
	// in string format and the map value is the number of unit-seconds
	// of that resource used by the job. Example: if a pod that uses 1 CPU
	// and finishes in 10 seconds, this map will contain <"cpu":10>
	ResourceUsage map[string]float64 `protobuf:"bytes,18,rep,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// The desired pod ID for this pod
	DesiredPodId *peloton.PodID `protobuf:"bytes,19,opt,name=desired_pod_id,json=desiredPodId,proto3" json:"desired_pod_id,omitempty"`
	// The name of the host where the pod should be running on upon restart.
	// It is used for best effort in-place update/restart.
	DesiredHost string `protobuf:"bytes,20,opt,name=desiredHost,proto3" json:"desiredHost,omitempty"`
	// The identifier for the host runtime agent.
	HostId               string   `protobuf:"bytes,21,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodStatus) Reset()         { *m = PodStatus{} }
func (m *PodStatus) String() string { return proto.CompactTextString(m) }
func (*PodStatus) ProtoMessage()    {}
func (*PodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{19}
}

func (m *PodStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodStatus.Unmarshal(m, b)
}
func (m *PodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodStatus.Marshal(b, m, deterministic)
}
func (m *PodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatus.Merge(m, src)
}
func (m *PodStatus) XXX_Size() int {
	return xxx_messageInfo_PodStatus.Size(m)
}
func (m *PodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatus proto.InternalMessageInfo

func (m *PodStatus) GetState() PodState {
	if m != nil {
		return m.State
	}
	return PodState_POD_STATE_INVALID
}

func (m *PodStatus) GetPodId() *peloton.PodID {
	if m != nil {
		return m.PodId
	}
	return nil
}

func (m *PodStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *PodStatus) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *PodStatus) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PodStatus) GetInitContainersStatus() []*ContainerStatus {
	if m != nil {
		return m.InitContainersStatus
	}
	return nil
}

func (m *PodStatus) GetContainersStatus() []*ContainerStatus {
	if m != nil {
		return m.ContainersStatus
	}
	return nil
}

func (m *PodStatus) GetDesiredState() PodState {
	if m != nil {
		return m.DesiredState
	}
	return PodState_POD_STATE_INVALID
}

func (m *PodStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PodStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodStatus) GetFailureCount() uint32 {
	if m != nil {
		return m.FailureCount
	}
	return 0
}

func (m *PodStatus) GetVolumeId() *peloton.VolumeID {
	if m != nil {
		return m.VolumeId
	}
	return nil
}

func (m *PodStatus) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *PodStatus) GetDesiredVersion() *peloton.EntityVersion {
	if m != nil {
		return m.DesiredVersion
	}
	return nil
}

func (m *PodStatus) GetAgentId() *v1.AgentID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *PodStatus) GetRevision() *peloton.Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *PodStatus) GetPrevPodId() *peloton.PodID {
	if m != nil {
		return m.PrevPodId
	}
	return nil
}

func (m *PodStatus) GetResourceUsage() map[string]float64 {
	if m != nil {
		return m.ResourceUsage
	}
	return nil
}

func (m *PodStatus) GetDesiredPodId() *peloton.PodID {
	if m != nil {
		return m.DesiredPodId
	}
	return nil
}

func (m *PodStatus) GetDesiredHost() string {
	if m != nil {
		return m.DesiredHost
	}
	return ""
}

func (m *PodStatus) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

// Info of a pod in a Job
type PodInfo struct {
	// Configuration of the pod
	Spec *PodSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// Runtime status of the pod
	Status               *PodStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PodInfo) Reset()         { *m = PodInfo{} }
func (m *PodInfo) String() string { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()    {}
func (*PodInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{20}
}

func (m *PodInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodInfo.Unmarshal(m, b)
}
func (m *PodInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodInfo.Marshal(b, m, deterministic)
}
func (m *PodInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfo.Merge(m, src)
}
func (m *PodInfo) XXX_Size() int {
	return xxx_messageInfo_PodInfo.Size(m)
}
func (m *PodInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfo proto.InternalMessageInfo

func (m *PodInfo) GetSpec() *PodSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PodInfo) GetStatus() *PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Summary information about a pod
type PodSummary struct {
	// Name of the pod
	PodName *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Runtime status of the pod
	Status               *PodStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PodSummary) Reset()         { *m = PodSummary{} }
func (m *PodSummary) String() string { return proto.CompactTextString(m) }
func (*PodSummary) ProtoMessage()    {}
func (*PodSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{21}
}

func (m *PodSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodSummary.Unmarshal(m, b)
}
func (m *PodSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodSummary.Marshal(b, m, deterministic)
}
func (m *PodSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodSummary.Merge(m, src)
}
func (m *PodSummary) XXX_Size() int {
	return xxx_messageInfo_PodSummary.Size(m)
}
func (m *PodSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_PodSummary.DiscardUnknown(m)
}

var xxx_messageInfo_PodSummary proto.InternalMessageInfo

func (m *PodSummary) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

func (m *PodSummary) GetStatus() *PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Pod InstanceID range [from, to)
type InstanceIDRange struct {
	From                 uint32   `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   uint32   `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceIDRange) Reset()         { *m = InstanceIDRange{} }
func (m *InstanceIDRange) String() string { return proto.CompactTextString(m) }
func (*InstanceIDRange) ProtoMessage()    {}
func (*InstanceIDRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{22}
}

func (m *InstanceIDRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIDRange.Unmarshal(m, b)
}
func (m *InstanceIDRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIDRange.Marshal(b, m, deterministic)
}
func (m *InstanceIDRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIDRange.Merge(m, src)
}
func (m *InstanceIDRange) XXX_Size() int {
	return xxx_messageInfo_InstanceIDRange.Size(m)
}
func (m *InstanceIDRange) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIDRange.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIDRange proto.InternalMessageInfo

func (m *InstanceIDRange) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *InstanceIDRange) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

// QuerySpec specifies the list of query criteria for pods. All
// indexed fields should be part of this message. And all fields
// in this message have to be indexed too.
type QuerySpec struct {
	// The spec of how to do pagination for the query results.
	Pagination *query.PaginationSpec `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// List of pod states to query the pods. Will match all pods if
	// the list is empty.
	PodStates []PodState `protobuf:"varint,2,rep,packed,name=pod_states,json=podStates,proto3,enum=peloton.api.v1alpha.pod.PodState" json:"pod_states,omitempty"`
	// List of pod names to query the pods. Will match all names if
	// the list is empty.
	Names []*peloton.PodName `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	// List of hosts to query the pods. Will match all hosts if
	// the list is empty.
	Hosts                []string `protobuf:"bytes,4,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySpec) Reset()         { *m = QuerySpec{} }
func (m *QuerySpec) String() string { return proto.CompactTextString(m) }
func (*QuerySpec) ProtoMessage()    {}
func (*QuerySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{23}
}

func (m *QuerySpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySpec.Unmarshal(m, b)
}
func (m *QuerySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySpec.Marshal(b, m, deterministic)
}
func (m *QuerySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpec.Merge(m, src)
}
func (m *QuerySpec) XXX_Size() int {
	return xxx_messageInfo_QuerySpec.Size(m)
}
func (m *QuerySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpec.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpec proto.InternalMessageInfo

func (m *QuerySpec) GetPagination() *query.PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QuerySpec) GetPodStates() []PodState {
	if m != nil {
		return m.PodStates
	}
	return nil
}

func (m *QuerySpec) GetNames() []*peloton.PodName {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *QuerySpec) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

// Pod events of a particular run of a job instance.
type PodEvent struct {
	// The current pod ID
	PodId *peloton.PodID `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	// Actual state of a pod
	ActualState string `protobuf:"bytes,2,opt,name=actual_state,json=actualState,proto3" json:"actual_state,omitempty"`
	// Goal State of a pod
	DesiredState string `protobuf:"bytes,3,opt,name=desired_state,json=desiredState,proto3" json:"desired_state,omitempty"`
	// The time when the event was created. The time is represented in
	// RFC3339 form with UTC timezone.
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The entity version currently used by the pod.
	Version *peloton.EntityVersion `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// The desired entity version that should be used by the pod.
	DesiredVersion *peloton.EntityVersion `protobuf:"bytes,6,opt,name=desired_version,json=desiredVersion,proto3" json:"desired_version,omitempty"`
	// The agentID for the pod
	AgentId string `protobuf:"bytes,7,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// The host on which the pod is running
	Hostname string `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Short human friendly message explaining state.
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// The short reason for the pod event
	Reason string `protobuf:"bytes,10,opt,name=reason,proto3" json:"reason,omitempty"`
	// The previous pod ID
	PrevPodId *peloton.PodID `protobuf:"bytes,11,opt,name=prev_pod_id,json=prevPodId,proto3" json:"prev_pod_id,omitempty"`
	// The health check result of the pod
	Healthy string `protobuf:"bytes,12,opt,name=healthy,proto3" json:"healthy,omitempty"`
	// The desired pod ID
	DesiredPodId         *peloton.PodID `protobuf:"bytes,13,opt,name=desired_pod_id,json=desiredPodId,proto3" json:"desired_pod_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PodEvent) Reset()         { *m = PodEvent{} }
func (m *PodEvent) String() string { return proto.CompactTextString(m) }
func (*PodEvent) ProtoMessage()    {}
func (*PodEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f63fdabd2e2ac635, []int{24}
}

func (m *PodEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodEvent.Unmarshal(m, b)
}
func (m *PodEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodEvent.Marshal(b, m, deterministic)
}
func (m *PodEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodEvent.Merge(m, src)
}
func (m *PodEvent) XXX_Size() int {
	return xxx_messageInfo_PodEvent.Size(m)
}
func (m *PodEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PodEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PodEvent proto.InternalMessageInfo

func (m *PodEvent) GetPodId() *peloton.PodID {
	if m != nil {
		return m.PodId
	}
	return nil
}

func (m *PodEvent) GetActualState() string {
	if m != nil {
		return m.ActualState
	}
	return ""
}

func (m *PodEvent) GetDesiredState() string {
	if m != nil {
		return m.DesiredState
	}
	return ""
}

func (m *PodEvent) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PodEvent) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *PodEvent) GetDesiredVersion() *peloton.EntityVersion {
	if m != nil {
		return m.DesiredVersion
	}
	return nil
}

func (m *PodEvent) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *PodEvent) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PodEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PodEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodEvent) GetPrevPodId() *peloton.PodID {
	if m != nil {
		return m.PrevPodId
	}
	return nil
}

func (m *PodEvent) GetHealthy() string {
	if m != nil {
		return m.Healthy
	}
	return ""
}

func (m *PodEvent) GetDesiredPodId() *peloton.PodID {
	if m != nil {
		return m.DesiredPodId
	}
	return nil
}

func init() {
	proto.RegisterEnum("peloton.api.v1alpha.pod.ContainerState", ContainerState_name, ContainerState_value)
	proto.RegisterEnum("peloton.api.v1alpha.pod.HealthState", HealthState_name, HealthState_value)
	proto.RegisterEnum("peloton.api.v1alpha.pod.PodState", PodState_name, PodState_value)
	proto.RegisterEnum("peloton.api.v1alpha.pod.HealthCheckSpec_HealthCheckType", HealthCheckSpec_HealthCheckType_name, HealthCheckSpec_HealthCheckType_value)
	proto.RegisterEnum("peloton.api.v1alpha.pod.Constraint_Type", Constraint_Type_name, Constraint_Type_value)
	proto.RegisterEnum("peloton.api.v1alpha.pod.LabelConstraint_Condition", LabelConstraint_Condition_name, LabelConstraint_Condition_value)
	proto.RegisterEnum("peloton.api.v1alpha.pod.LabelConstraint_Kind", LabelConstraint_Kind_name, LabelConstraint_Kind_value)
	proto.RegisterEnum("peloton.api.v1alpha.pod.TerminationStatus_Reason", TerminationStatus_Reason_name, TerminationStatus_Reason_value)
	proto.RegisterType((*ResourceSpec)(nil), "peloton.api.v1alpha.pod.ResourceSpec")
	proto.RegisterType((*CommandSpec)(nil), "peloton.api.v1alpha.pod.CommandSpec")
	proto.RegisterType((*HTTPGetSpec)(nil), "peloton.api.v1alpha.pod.HTTPGetSpec")
	proto.RegisterType((*HTTPGetSpec_HTTPHeader)(nil), "peloton.api.v1alpha.pod.HTTPGetSpec.HTTPHeader")
	proto.RegisterType((*HealthCheckSpec)(nil), "peloton.api.v1alpha.pod.HealthCheckSpec")
	proto.RegisterType((*HealthCheckSpec_CommandCheck)(nil), "peloton.api.v1alpha.pod.HealthCheckSpec.CommandCheck")
	proto.RegisterType((*HealthCheckSpec_HTTPCheck)(nil), "peloton.api.v1alpha.pod.HealthCheckSpec.HTTPCheck")
	proto.RegisterType((*PortSpec)(nil), "peloton.api.v1alpha.pod.PortSpec")
	proto.RegisterType((*Constraint)(nil), "peloton.api.v1alpha.pod.Constraint")
	proto.RegisterType((*AndConstraint)(nil), "peloton.api.v1alpha.pod.AndConstraint")
	proto.RegisterType((*OrConstraint)(nil), "peloton.api.v1alpha.pod.OrConstraint")
	proto.RegisterType((*LabelConstraint)(nil), "peloton.api.v1alpha.pod.LabelConstraint")
	proto.RegisterType((*RestartPolicy)(nil), "peloton.api.v1alpha.pod.RestartPolicy")
	proto.RegisterType((*PreemptionPolicy)(nil), "peloton.api.v1alpha.pod.PreemptionPolicy")
	proto.RegisterType((*PersistentVolumeSpec)(nil), "peloton.api.v1alpha.pod.PersistentVolumeSpec")
	proto.RegisterType((*Environment)(nil), "peloton.api.v1alpha.pod.Environment")
	proto.RegisterType((*VolumeMount)(nil), "peloton.api.v1alpha.pod.VolumeMount")
	proto.RegisterType((*ContainerSpec)(nil), "peloton.api.v1alpha.pod.ContainerSpec")
	proto.RegisterType((*PodSpec)(nil), "peloton.api.v1alpha.pod.PodSpec")
	proto.RegisterType((*HealthStatus)(nil), "peloton.api.v1alpha.pod.HealthStatus")
	proto.RegisterType((*TerminationStatus)(nil), "peloton.api.v1alpha.pod.TerminationStatus")
	proto.RegisterType((*ContainerStatus)(nil), "peloton.api.v1alpha.pod.ContainerStatus")
	proto.RegisterMapType((map[string]uint32)(nil), "peloton.api.v1alpha.pod.ContainerStatus.PortsEntry")
	proto.RegisterType((*PodStatus)(nil), "peloton.api.v1alpha.pod.PodStatus")
	proto.RegisterMapType((map[string]float64)(nil), "peloton.api.v1alpha.pod.PodStatus.ResourceUsageEntry")
	proto.RegisterType((*PodInfo)(nil), "peloton.api.v1alpha.pod.PodInfo")
	proto.RegisterType((*PodSummary)(nil), "peloton.api.v1alpha.pod.PodSummary")
	proto.RegisterType((*InstanceIDRange)(nil), "peloton.api.v1alpha.pod.InstanceIDRange")
	proto.RegisterType((*QuerySpec)(nil), "peloton.api.v1alpha.pod.QuerySpec")
	proto.RegisterType((*PodEvent)(nil), "peloton.api.v1alpha.pod.PodEvent")
}

func init() { proto.RegisterFile("peloton/api/v1alpha/pod/pod.proto", fileDescriptor_f63fdabd2e2ac635) }

var fileDescriptor_f63fdabd2e2ac635 = []byte{
	// 3087 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0x5b, 0x73, 0xdb, 0xc6,
	0xd9, 0x0e, 0x45, 0x8a, 0x24, 0x5e, 0x1e, 0x04, 0xad, 0x65, 0x89, 0x92, 0xed, 0x8c, 0x0c, 0x9f,
	0xf4, 0x39, 0x89, 0xf4, 0x59, 0xf9, 0xfc, 0xd9, 0xf1, 0xb4, 0x4d, 0x68, 0x12, 0xb6, 0x50, 0x53,
	0x24, 0xbd, 0x84, 0xdc, 0x24, 0x3d, 0x60, 0x20, 0x62, 0x2d, 0x61, 0x4c, 0x1c, 0x02, 0x80, 0x1c,
	0xab, 0xfd, 0x05, 0x9d, 0xe9, 0x55, 0x6f, 0x7a, 0xd9, 0x99, 0xf6, 0xaa, 0xd3, 0x99, 0x4e, 0x6f,
	0xfb, 0x27, 0x7a, 0xdb, 0x69, 0x7f, 0x42, 0x7e, 0x45, 0x67, 0x0f, 0x20, 0x40, 0x8a, 0x94, 0xa8,
	0x24, 0x17, 0x6d, 0xb0, 0xef, 0xe1, 0xd9, 0xdd, 0x77, 0xdf, 0xa3, 0x68, 0xb8, 0xed, 0x93, 0x81,
	0x17, 0x79, 0xee, 0x9e, 0xe9, 0xdb, 0x7b, 0xa3, 0x47, 0xe6, 0xc0, 0x3f, 0x35, 0xf7, 0x7c, 0xcf,
	0xa2, 0xff, 0xdb, 0xf5, 0x03, 0x2f, 0xf2, 0xd0, 0x86, 0x10, 0xd9, 0x35, 0x7d, 0x7b, 0x57, 0x88,
	0xec, 0xfa, 0x9e, 0xb5, 0xb5, 0xe6, 0x90, 0xd0, 0x0b, 0xf7, 0x46, 0x8f, 0xf6, 0xd8, 0x07, 0x17,
	0xdf, 0x9a, 0x8d, 0x28, 0x20, 0xb8, 0xc8, 0xe3, 0x79, 0x9b, 0x9a, 0xbe, 0xd9, 0x3f, 0x25, 0x1c,
	0x36, 0xf5, 0x2d, 0xd4, 0xee, 0xcd, 0x52, 0xfb, 0x66, 0x48, 0x82, 0x33, 0xfe, 0xff, 0x42, 0xec,
	0xc1, 0x2c, 0xb1, 0x91, 0x37, 0x18, 0x3a, 0x44, 0xfc, 0x87, 0x0b, 0x2a, 0x7f, 0xc9, 0x40, 0x19,
	0x93, 0xd0, 0x1b, 0x06, 0x7d, 0xd2, 0xf3, 0x49, 0x1f, 0xdd, 0x00, 0xa9, 0xef, 0x0f, 0x8d, 0x81,
	0xed, 0xd8, 0x51, 0x2d, 0xb3, 0x9d, 0xd9, 0xc9, 0xe0, 0x62, 0xdf, 0x1f, 0xb6, 0xe8, 0x1a, 0x6d,
	0x43, 0xd9, 0x21, 0x0e, 0x67, 0x1a, 0xce, 0x71, 0x6d, 0x89, 0xf1, 0xc1, 0x21, 0x0e, 0xe3, 0x1f,
	0x1e, 0x23, 0x05, 0x2a, 0x96, 0x1d, 0xbe, 0x4b, 0x44, 0xb2, 0x4c, 0xa4, 0x44, 0x89, 0xb1, 0xcc,
	0x26, 0x14, 0xdf, 0x5a, 0x62, 0x87, 0xdc, 0x76, 0x66, 0xa7, 0x82, 0x0b, 0x6f, 0x2d, 0xbe, 0xc1,
	0x0d, 0x90, 0x4e, 0xc6, 0xbb, 0x2f, 0xf3, 0xdd, 0x4f, 0xc4, 0xee, 0x4a, 0x1d, 0x4a, 0x0d, 0xcf,
	0x71, 0x4c, 0xd7, 0x62, 0x27, 0x5d, 0x83, 0xe5, 0x91, 0x39, 0x18, 0x12, 0x76, 0x4a, 0x09, 0xf3,
	0x05, 0xba, 0x09, 0x92, 0x19, 0x9c, 0x0c, 0x1d, 0xe2, 0x46, 0x61, 0x6d, 0x69, 0x3b, 0xbb, 0x23,
	0xe1, 0x84, 0xa0, 0xfc, 0x3b, 0x03, 0xa5, 0x03, 0x5d, 0xef, 0xbe, 0x24, 0x11, 0xc3, 0x58, 0x87,
	0x7c, 0xc8, 0x2c, 0x2c, 0x40, 0xc4, 0x0a, 0x21, 0xc8, 0xf9, 0x5e, 0x10, 0xb1, 0x0b, 0x56, 0x30,
	0xfb, 0x66, 0x34, 0x33, 0x3a, 0x65, 0x37, 0x92, 0x30, 0xfb, 0x46, 0x18, 0xca, 0xa7, 0x51, 0xe4,
	0x1b, 0xa7, 0xc4, 0xb4, 0x48, 0x10, 0xd6, 0x72, 0xdb, 0xd9, 0x9d, 0xd2, 0xfe, 0xde, 0xee, 0x1c,
	0x77, 0xd9, 0x4d, 0xed, 0xcd, 0xbe, 0x0f, 0x98, 0x1e, 0x2e, 0x51, 0x10, 0xfe, 0x1d, 0x6e, 0xfd,
	0x3f, 0x40, 0xc2, 0xa2, 0xbb, 0xba, 0xe6, 0xf8, 0x7c, 0xec, 0x3b, 0xb9, 0xf9, 0x52, 0xea, 0xe6,
	0xca, 0x9f, 0x0b, 0xb0, 0x72, 0x40, 0xcc, 0x41, 0x74, 0xda, 0x38, 0x25, 0xfd, 0x77, 0xec, 0x7e,
	0x35, 0x28, 0x10, 0xd7, 0x3c, 0x1e, 0x10, 0x8b, 0x01, 0x14, 0x71, 0xbc, 0x44, 0xfb, 0x70, 0xdd,
	0x76, 0xed, 0xc8, 0x36, 0x07, 0x86, 0xed, 0x46, 0x24, 0x18, 0x99, 0x03, 0x23, 0x24, 0xfd, 0x50,
	0x5c, 0xf9, 0x9a, 0x60, 0x6a, 0x82, 0xd7, 0x23, 0xfd, 0x10, 0xdd, 0x81, 0xca, 0xa4, 0x6c, 0x96,
	0xc9, 0x96, 0xed, 0xb4, 0xd0, 0x53, 0xa8, 0x39, 0xe6, 0x7b, 0xa3, 0xef, 0xb9, 0x21, 0xe9, 0x0f,
	0x23, 0x7b, 0x44, 0x8c, 0xb7, 0xa6, 0x3d, 0x18, 0x06, 0x24, 0x14, 0xaf, 0xbd, 0xee, 0x98, 0xef,
	0x1b, 0x09, 0xfb, 0x85, 0xe0, 0xa2, 0xdb, 0x50, 0x8e, 0x6c, 0x87, 0x78, 0xc3, 0x88, 0xa3, 0x2f,
	0x33, 0xe9, 0x92, 0xa0, 0x31, 0xf0, 0x16, 0xe4, 0xa2, 0x33, 0x9f, 0xd4, 0xf2, 0xdb, 0x99, 0x9d,
	0xea, 0xfe, 0xd3, 0xf9, 0x76, 0x9e, 0xb4, 0x43, 0x7a, 0xad, 0x9f, 0xf9, 0x04, 0x33, 0x14, 0xf4,
	0x35, 0x54, 0xfa, 0xdc, 0xa1, 0x8c, 0x3e, 0x65, 0xd5, 0x0a, 0xdb, 0x99, 0x9d, 0xd2, 0xfe, 0xe3,
	0x85, 0x61, 0x85, 0x3b, 0x32, 0x02, 0x2e, 0xf7, 0x53, 0x2b, 0xf4, 0x1a, 0x80, 0x79, 0x06, 0x07,
	0x2e, 0x32, 0xe0, 0xfd, 0xc5, 0xcf, 0xab, 0xeb, 0x5d, 0x8e, 0x2a, 0x51, 0x14, 0x0e, 0xf9, 0x11,
	0xac, 0x86, 0xc3, 0x7e, 0x9f, 0x84, 0xa1, 0x11, 0x9d, 0x06, 0x24, 0x3c, 0xf5, 0x06, 0x56, 0x4d,
	0x62, 0x46, 0x92, 0x05, 0x43, 0x8f, 0xe9, 0xe8, 0x27, 0x50, 0x10, 0xe7, 0xa9, 0x01, 0xdb, 0xfc,
	0xee, 0xdc, 0xcd, 0x53, 0x41, 0x85, 0x63, 0x25, 0xf4, 0x39, 0x14, 0xd9, 0xf9, 0x4f, 0x48, 0x54,
	0x2b, 0x5d, 0x02, 0x90, 0xf2, 0x6a, 0x5c, 0xa0, 0x5a, 0x2f, 0x49, 0xb4, 0xf5, 0x73, 0x28, 0xa7,
	0xcd, 0x43, 0x5d, 0x31, 0x3e, 0x10, 0xf7, 0xe5, 0xf1, 0x56, 0x8f, 0x60, 0x6d, 0xe8, 0x86, 0xa7,
	0x66, 0x40, 0x0c, 0xe2, 0x8e, 0xec, 0xc0, 0x73, 0xe3, 0xe8, 0xa5, 0x1e, 0x7b, 0x4d, 0xf0, 0xd4,
	0x14, 0x6b, 0xeb, 0x15, 0x48, 0x63, 0x13, 0x7d, 0xdf, 0x20, 0x56, 0xde, 0x4d, 0xc4, 0x0d, 0xf5,
	0x0f, 0x74, 0x0b, 0x36, 0x0f, 0xd4, 0x7a, 0x4b, 0x3f, 0x30, 0x1a, 0x07, 0x6a, 0xe3, 0x95, 0xa1,
	0x7f, 0xd5, 0x55, 0x8d, 0xa3, 0xf6, 0xab, 0x76, 0xe7, 0x67, 0x6d, 0xf9, 0x83, 0xd9, 0xec, 0x46,
	0xe7, 0xf0, 0xb0, 0xde, 0x6e, 0xca, 0x19, 0xb4, 0x05, 0xeb, 0xe7, 0xd9, 0xf4, 0xbc, 0xf2, 0x92,
	0xd2, 0x81, 0x62, 0xd7, 0x0b, 0x78, 0xf6, 0xb9, 0x34, 0xb6, 0x2b, 0x71, 0x56, 0xdb, 0x84, 0x22,
	0x71, 0x47, 0x06, 0x93, 0xe6, 0x47, 0x2f, 0x10, 0x77, 0xd4, 0x36, 0x1d, 0xa2, 0xfc, 0x35, 0x0b,
	0x40, 0xa3, 0x29, 0x0a, 0x4c, 0xdb, 0x8d, 0xd0, 0x8f, 0x44, 0x84, 0x64, 0x58, 0x84, 0xec, 0x5c,
	0xf0, 0xe8, 0xb1, 0xca, 0x6e, 0x2a, 0x22, 0x7a, 0x20, 0x0f, 0xcc, 0x63, 0x32, 0x60, 0xe1, 0xcb,
	0xd9, 0xec, 0x20, 0xa5, 0x0b, 0x90, 0x5a, 0x54, 0x21, 0x81, 0xc3, 0x2b, 0x83, 0x49, 0x02, 0x3a,
	0x84, 0x2a, 0x0b, 0xb1, 0x04, 0x32, 0xcb, 0x20, 0xef, 0xcf, 0x85, 0xac, 0xbb, 0x56, 0x0a, 0xb0,
	0x62, 0xa6, 0x97, 0xe8, 0xa7, 0x50, 0xf1, 0x82, 0x34, 0x5a, 0x8e, 0xa1, 0xdd, 0x9b, 0x8b, 0xd6,
	0x09, 0x52, 0x60, 0x65, 0x2f, 0xb5, 0x52, 0x3c, 0xc8, 0xb1, 0xf7, 0xbe, 0x01, 0x1b, 0x8d, 0x4e,
	0xbb, 0xa7, 0xe3, 0xba, 0xd6, 0xd6, 0xf9, 0x7b, 0x69, 0xed, 0x37, 0xf5, 0x96, 0xd6, 0x94, 0x3f,
	0x40, 0x9b, 0x70, 0x7d, 0x9a, 0xd9, 0xaa, 0x3f, 0x57, 0x5b, 0x72, 0x06, 0x6d, 0xc0, 0xb5, 0x69,
	0x16, 0x75, 0x81, 0x25, 0xb4, 0x0e, 0x68, 0x9a, 0xd1, 0xc1, 0x72, 0x56, 0x79, 0x03, 0x95, 0x89,
	0xcb, 0x21, 0x15, 0x4a, 0xc9, 0x55, 0xc2, 0x5a, 0x86, 0x15, 0x90, 0x3b, 0x0b, 0x3c, 0x1b, 0x4e,
	0xeb, 0x29, 0x47, 0x50, 0x4e, 0x5f, 0xf3, 0x87, 0x82, 0xfd, 0x63, 0x0e, 0x56, 0xa6, 0xde, 0x17,
	0xd5, 0x21, 0xf7, 0xce, 0x16, 0x51, 0x5c, 0xdd, 0xff, 0x64, 0x51, 0xbf, 0xd8, 0x7d, 0x65, 0xbb,
	0x16, 0x66, 0xaa, 0xa8, 0x0b, 0x52, 0xdf, 0x73, 0x2d, 0x3b, 0xb2, 0x3d, 0x97, 0xf9, 0x57, 0xf5,
	0x82, 0xdc, 0x38, 0x8d, 0xd3, 0x88, 0x35, 0x71, 0x02, 0x82, 0x9e, 0xc2, 0x32, 0x73, 0x3b, 0xe1,
	0x5a, 0xca, 0x6c, 0x34, 0x41, 0x63, 0x88, 0x98, 0x2b, 0xa0, 0x6d, 0x28, 0x05, 0xe4, 0x9b, 0xa1,
	0x1d, 0x10, 0x9a, 0x5a, 0x44, 0x89, 0x4a, 0x93, 0x94, 0xbf, 0x67, 0x40, 0x1a, 0x6f, 0x8a, 0xee,
	0x83, 0xc2, 0x5e, 0xdf, 0x48, 0xbd, 0x6f, 0xa3, 0xd3, 0x6e, 0x6a, 0xba, 0xd6, 0x69, 0xa7, 0xbc,
	0x66, 0x07, 0xee, 0x5e, 0x20, 0xd7, 0x52, 0x7b, 0x3d, 0x43, 0x3f, 0xa8, 0xb7, 0xe5, 0x0c, 0xba,
	0x0b, 0xdb, 0x17, 0x48, 0xaa, 0xaf, 0x8f, 0xea, 0x2d, 0x79, 0x09, 0x7d, 0x04, 0x0f, 0x2e, 0x90,
	0x7a, 0x89, 0xd5, 0xba, 0xae, 0x62, 0x0e, 0x99, 0x55, 0x4e, 0x21, 0x47, 0xcd, 0x8d, 0x6e, 0xc3,
	0xad, 0x73, 0x4a, 0xaf, 0xb4, 0x76, 0x33, 0x75, 0xce, 0x5b, 0xb0, 0x39, 0x5b, 0xa4, 0xdb, 0xa1,
	0xb9, 0xec, 0x43, 0xd8, 0x9a, 0xcd, 0x3e, 0xe8, 0xf4, 0x74, 0x79, 0x49, 0xd9, 0x87, 0x0a, 0x26,
	0x61, 0x64, 0x06, 0x51, 0xd7, 0x1b, 0xd8, 0xfd, 0x33, 0x5a, 0xc5, 0x69, 0xfd, 0x1f, 0xd7, 0xfc,
	0x0c, 0x37, 0xa8, 0x63, 0xbe, 0x8f, 0x0b, 0xbd, 0xf2, 0x0c, 0xe4, 0x6e, 0x40, 0x88, 0xe3, 0x53,
	0x83, 0x0a, 0xb5, 0xfb, 0xb0, 0xf2, 0xce, 0x1e, 0x0c, 0x0c, 0xcf, 0x35, 0x7c, 0xce, 0x13, 0xf9,
	0xbf, 0x42, 0xc9, 0x1d, 0x57, 0x28, 0x28, 0x6f, 0x60, 0xad, 0x4b, 0x82, 0xd0, 0x0e, 0x23, 0xe2,
	0x46, 0x6f, 0x58, 0x2b, 0xcb, 0x72, 0xe9, 0x3d, 0xa8, 0xf6, 0x3d, 0x37, 0x32, 0x6d, 0x97, 0x04,
	0x06, 0x4b, 0xf1, 0x3c, 0xab, 0x56, 0xc6, 0xd4, 0x2e, 0x6d, 0xd8, 0x36, 0xa0, 0x10, 0xda, 0xbf,
	0x26, 0x71, 0xf3, 0x5a, 0xc1, 0x79, 0xba, 0x3c, 0x3c, 0x56, 0x9e, 0x40, 0x29, 0x55, 0x61, 0xae,
	0xd0, 0x76, 0xfd, 0x12, 0x4a, 0xfc, 0x18, 0x87, 0xde, 0x70, 0x8e, 0xe2, 0x0d, 0x90, 0x02, 0x62,
	0x5a, 0x86, 0xe7, 0x0e, 0xce, 0xc4, 0xad, 0x8a, 0x94, 0xd0, 0x71, 0x07, 0x67, 0xe8, 0x16, 0x80,
	0x43, 0x35, 0x8d, 0x54, 0x5d, 0x92, 0x18, 0x85, 0x1e, 0x58, 0xf9, 0xe7, 0x32, 0x54, 0x1a, 0xf1,
	0x15, 0xe6, 0x56, 0x8d, 0x3a, 0x14, 0x03, 0xd1, 0xc5, 0x8b, 0x7c, 0x3d, 0x3f, 0x1d, 0xa6, 0xdb,
	0x7d, 0x3c, 0x56, 0x43, 0x8f, 0x59, 0x4c, 0xf2, 0x7d, 0x44, 0x14, 0x6d, 0xec, 0xf2, 0xd1, 0x63,
	0xf4, 0x68, 0x77, 0x7c, 0x04, 0xcd, 0x7d, 0xeb, 0xe1, 0x44, 0x12, 0xed, 0x25, 0x65, 0x9d, 0xe7,
	0xe1, 0xeb, 0x69, 0x25, 0xc6, 0x60, 0x2a, 0xe3, 0x6a, 0xbf, 0x0f, 0x45, 0xf2, 0x9e, 0xb6, 0x7e,
	0x5e, 0x20, 0xda, 0xa2, 0xf5, 0x44, 0x43, 0x15, 0x1c, 0xa6, 0x32, 0x96, 0x43, 0x1d, 0xa8, 0x0e,
	0xec, 0x11, 0x71, 0x69, 0xeb, 0xc3, 0x1b, 0xaa, 0xe5, 0x4b, 0x8a, 0xd2, 0x54, 0x43, 0x85, 0x2b,
	0xb1, 0x7e, 0xdc, 0x9d, 0xad, 0xd0, 0x07, 0xb0, 0x53, 0x88, 0xf9, 0x2b, 0x22, 0x56, 0xc7, 0x00,
	0x1c, 0xf2, 0x09, 0x2c, 0xd3, 0x0e, 0x23, 0xac, 0x15, 0x58, 0xae, 0xbd, 0x3d, 0x17, 0x28, 0x2e,
	0xff, 0x98, 0xcb, 0xa3, 0x26, 0x00, 0x71, 0xa3, 0xe0, 0xcc, 0xf7, 0x68, 0x31, 0x93, 0xae, 0xd0,
	0xac, 0xa5, 0xf4, 0xd0, 0x0b, 0x28, 0xa5, 0x9a, 0xa7, 0x1a, 0xb0, 0x43, 0xcc, 0x87, 0x49, 0xf9,
	0x3a, 0x4e, 0x2b, 0x52, 0x27, 0xb7, 0x1d, 0xf3, 0x84, 0xb0, 0xa6, 0x4f, 0xc2, 0x7c, 0x81, 0x34,
	0xa8, 0xf0, 0xb1, 0xd1, 0x60, 0x9e, 0x19, 0xd6, 0xca, 0x97, 0xe0, 0xa7, 0x42, 0x02, 0x97, 0x47,
	0xc9, 0x22, 0x54, 0xfe, 0x93, 0x87, 0x42, 0xd7, 0xe3, 0x23, 0xdc, 0xe7, 0x50, 0xf4, 0x3d, 0xcb,
	0x18, 0xbb, 0xf3, 0x5c, 0x44, 0x41, 0xeb, 0x7a, 0x16, 0xed, 0x79, 0x70, 0xc1, 0xe7, 0x1f, 0xe8,
	0x19, 0xe4, 0x59, 0x16, 0xe7, 0xa3, 0xde, 0x62, 0x79, 0x5f, 0x68, 0xa0, 0x0e, 0xac, 0xd0, 0x21,
	0xc7, 0x18, 0xfb, 0x32, 0x9d, 0x67, 0xb2, 0x17, 0xf6, 0x25, 0x13, 0x81, 0x88, 0xab, 0x54, 0x7d,
	0x4c, 0x0a, 0xd1, 0x0b, 0x80, 0x14, 0x56, 0xee, 0x4a, 0x58, 0x29, 0x4d, 0xd4, 0x60, 0x38, 0x71,
	0x77, 0xc3, 0x3d, 0x7d, 0xa1, 0xd2, 0x9d, 0x52, 0xa3, 0x4d, 0x57, 0xc0, 0xf3, 0xb2, 0xe1, 0xb3,
	0x0c, 0x2b, 0x1c, 0xfc, 0xfe, 0x45, 0x79, 0x21, 0x49, 0xe3, 0xb8, 0x12, 0x4c, 0x64, 0x75, 0x15,
	0xf2, 0xfc, 0x15, 0xc5, 0x8c, 0x34, 0xbf, 0xec, 0xcf, 0xca, 0xce, 0x58, 0x28, 0xa3, 0x37, 0xb0,
	0xea, 0x8f, 0x33, 0x7f, 0x7c, 0x30, 0x9e, 0x05, 0xfe, 0x67, 0x3e, 0xe2, 0x54, 0xad, 0xc0, 0xb2,
	0x3f, 0x5d, 0x3d, 0x3e, 0xe4, 0xa6, 0x0f, 0xbc, 0xc1, 0x80, 0x04, 0x2c, 0x86, 0x8a, 0x38, 0x45,
	0x41, 0x9f, 0xc1, 0x26, 0xab, 0x2e, 0x27, 0x81, 0xd9, 0x27, 0x86, 0x4f, 0x02, 0xdb, 0xb3, 0xe8,
	0x90, 0xe9, 0xb9, 0x56, 0xc8, 0xe6, 0xa3, 0x0a, 0x5e, 0xa7, 0x02, 0x2f, 0x29, 0xbf, 0xcb, 0xd8,
	0x3d, 0xce, 0x45, 0x37, 0x69, 0xf2, 0x1e, 0x79, 0x7d, 0x3a, 0x36, 0xb3, 0xa0, 0x28, 0xe2, 0x84,
	0x80, 0xbe, 0x80, 0x02, 0xbf, 0x5a, 0x1c, 0x12, 0xb3, 0xed, 0x2b, 0xfe, 0xe6, 0x92, 0xb2, 0x48,
	0xac, 0x86, 0x5e, 0x01, 0xb0, 0xf4, 0x67, 0x84, 0x3e, 0xe9, 0xd7, 0x2a, 0xcc, 0x16, 0x1f, 0xcf,
	0xb5, 0x45, 0xfa, 0x2f, 0x42, 0x22, 0x8a, 0xb0, 0xc4, 0x96, 0xf4, 0x53, 0x39, 0x86, 0x32, 0xcf,
	0x53, 0xbd, 0xc8, 0x8c, 0x86, 0x21, 0x7a, 0x06, 0xcb, 0x61, 0x64, 0x46, 0xf1, 0x38, 0x70, 0xf7,
	0x92, 0xec, 0x46, 0xb5, 0x08, 0xe6, 0x2a, 0x74, 0xac, 0xf2, 0x86, 0x91, 0x3f, 0x8c, 0x44, 0xbd,
	0x13, 0x2b, 0xe5, 0x4f, 0x39, 0x58, 0xd5, 0x49, 0xe0, 0xd8, 0xae, 0x49, 0x5f, 0x40, 0xec, 0xa4,
	0x41, 0x3e, 0x20, 0x66, 0xe8, 0xb9, 0x62, 0xab, 0x47, 0x73, 0xb7, 0x3a, 0xa7, 0xbb, 0x8b, 0x99,
	0x22, 0x16, 0x00, 0xb4, 0x5c, 0x92, 0xf7, 0x2c, 0x30, 0xad, 0x78, 0x0c, 0x2a, 0x52, 0x42, 0xc3,
	0xb3, 0xd8, 0xa9, 0x42, 0xfb, 0xc4, 0x35, 0x07, 0xa2, 0x54, 0x8a, 0x95, 0xf2, 0xbb, 0x2c, 0xe4,
	0x39, 0x0e, 0xba, 0x07, 0xb7, 0x75, 0x15, 0x1f, 0x6a, 0xed, 0x3a, 0x6b, 0x8d, 0x7a, 0x7a, 0x5d,
	0x3f, 0xea, 0x19, 0x58, 0xad, 0xf7, 0x26, 0x1a, 0xb4, 0x3d, 0xf8, 0x68, 0xbe, 0xd8, 0x2b, 0xad,
	0xd5, 0x52, 0x9b, 0x46, 0xa7, 0x6d, 0x60, 0xf5, 0xf5, 0x91, 0xda, 0xd3, 0x79, 0x9f, 0x36, 0x5f,
	0xe1, 0x45, 0x5d, 0x6b, 0xa9, 0xb4, 0xf3, 0x7f, 0x0c, 0x8f, 0x2e, 0x85, 0xa5, 0xbd, 0x93, 0x71,
	0x48, 0x7b, 0x29, 0xb5, 0x5d, 0x6f, 0x37, 0x54, 0x39, 0x8b, 0x1e, 0xc1, 0x27, 0xf3, 0xd5, 0xba,
	0x58, 0x55, 0x0f, 0xbb, 0xba, 0xda, 0x34, 0xb0, 0xda, 0xeb, 0x1c, 0xe1, 0x86, 0xda, 0x93, 0x73,
	0xe8, 0x09, 0x7c, 0x3a, 0x5f, 0xa5, 0xa9, 0xd6, 0x9b, 0x2d, 0xad, 0xad, 0x1a, 0xba, 0x76, 0xa8,
	0x76, 0x8e, 0x74, 0x43, 0xfd, 0xb2, 0xa1, 0xaa, 0x4d, 0xb5, 0x29, 0x2f, 0x2f, 0x74, 0xf3, 0x17,
	0x1d, 0x6c, 0x1c, 0x75, 0x9b, 0x75, 0x5d, 0x95, 0xf3, 0xe8, 0x7f, 0xe1, 0xe3, 0x85, 0x14, 0xb0,
	0xda, 0xd3, 0xeb, 0x58, 0x97, 0x0b, 0xca, 0x3f, 0x72, 0xb0, 0x92, 0x64, 0x38, 0xee, 0x22, 0xb3,
	0x1a, 0x97, 0x1f, 0xc7, 0x0e, 0xca, 0xa7, 0x80, 0x07, 0x0b, 0xa4, 0xcb, 0xb4, 0x8f, 0x6a, 0x71,
	0xd1, 0xe5, 0x99, 0xfb, 0xd3, 0xc5, 0xd4, 0x87, 0x21, 0x2b, 0xc2, 0xa1, 0x4a, 0xcb, 0x67, 0x5c,
	0x86, 0x6b, 0x50, 0x70, 0x48, 0x18, 0xd2, 0xd2, 0x97, 0xe3, 0x13, 0xb6, 0x58, 0x52, 0x97, 0x13,
	0xae, 0xbd, 0xcc, 0x5d, 0x4e, 0xf8, 0xe9, 0x1d, 0xa8, 0x88, 0x2e, 0xd7, 0xe8, 0xd3, 0xda, 0xc6,
	0x32, 0x6c, 0x05, 0x97, 0x05, 0xb1, 0xc1, 0xfa, 0xc1, 0xcf, 0xa1, 0x70, 0xca, 0x62, 0xeb, 0x4c,
	0x64, 0xce, 0x7b, 0x0b, 0xc4, 0xe0, 0x30, 0xc4, 0xb1, 0x56, 0x52, 0x90, 0x8b, 0xe9, 0x82, 0x7c,
	0x0b, 0x80, 0x27, 0xf7, 0xc8, 0x76, 0x08, 0x4b, 0x78, 0x12, 0x96, 0x18, 0x45, 0xb7, 0x1d, 0x82,
	0x1e, 0xc0, 0x4a, 0xdf, 0x73, 0xfc, 0x01, 0x61, 0x79, 0x96, 0xc9, 0x00, 0x93, 0xa9, 0x26, 0x64,
	0x26, 0xf8, 0x25, 0xac, 0x46, 0xd3, 0xf1, 0x28, 0xfe, 0xde, 0xf3, 0x70, 0xf1, 0x08, 0xc6, 0xe7,
	0x41, 0xb6, 0x9e, 0x02, 0x24, 0x46, 0x46, 0x32, 0x64, 0xdf, 0x91, 0x33, 0xf1, 0xf4, 0xf4, 0x73,
	0xf6, 0x1f, 0x3a, 0x9e, 0x2d, 0x3d, 0xcd, 0x28, 0xdf, 0x4a, 0x20, 0xd1, 0xdc, 0xc6, 0xbd, 0xe6,
	0xc9, 0x64, 0x0a, 0xbb, 0xa8, 0xaf, 0xb2, 0x26, 0x7c, 0xe3, 0x33, 0xc8, 0xd3, 0xe6, 0xc2, 0xb6,
	0x44, 0x47, 0xac, 0x5c, 0xd6, 0x5a, 0x68, 0x4d, 0xea, 0x0b, 0x96, 0x66, 0x4d, 0x59, 0x37, 0xbb,
	0x80, 0x75, 0x73, 0x33, 0xad, 0x8b, 0x20, 0x77, 0xea, 0x85, 0x91, 0xf0, 0x1b, 0xf6, 0x8d, 0x7e,
	0x05, 0xeb, 0x53, 0x6d, 0x87, 0x11, 0x72, 0xb3, 0xe7, 0x99, 0x0f, 0xef, 0x2c, 0xea, 0xc3, 0x78,
	0x6d, 0xb2, 0xff, 0x10, 0xf6, 0x3a, 0x82, 0xd5, 0xf3, 0xd0, 0x85, 0x2b, 0x42, 0xcb, 0xfd, 0x69,
	0xd8, 0x17, 0x50, 0xb1, 0x48, 0x68, 0x07, 0xc4, 0x32, 0xf8, 0x73, 0x14, 0x17, 0x7d, 0x8e, 0xb2,
	0xd0, 0x63, 0xab, 0x74, 0x98, 0x49, 0xf3, 0xc2, 0x0c, 0x2e, 0x0e, 0xb3, 0xd2, 0x8c, 0x30, 0x7b,
	0x0e, 0x92, 0x68, 0x50, 0x6d, 0xab, 0x56, 0xbe, 0x28, 0xd0, 0x04, 0x8d, 0x97, 0x62, 0xad, 0x89,
	0x8b, 0x5c, 0x4f, 0xb3, 0x50, 0x13, 0x0a, 0x23, 0xda, 0xbc, 0x78, 0xae, 0x28, 0xc3, 0x0f, 0x2f,
	0x44, 0x50, 0xdd, 0xc8, 0x8e, 0xce, 0xde, 0x70, 0x0d, 0x1c, 0xab, 0xa2, 0x1e, 0xac, 0xc4, 0x86,
	0x8a, 0xd1, 0xaa, 0x57, 0x46, 0xab, 0x0a, 0x08, 0xb1, 0x46, 0x1f, 0x43, 0xd1, 0x3c, 0x21, 0x6e,
	0x44, 0x6f, 0xb7, 0xc2, 0xd0, 0x56, 0x93, 0xa1, 0xa9, 0x4e, 0x39, 0x5a, 0x13, 0x17, 0x98, 0x88,
	0x66, 0xf1, 0x69, 0x70, 0x64, 0xb3, 0xbd, 0xe5, 0x05, 0x6c, 0x81, 0x85, 0x30, 0x1e, 0xab, 0xa1,
	0xe7, 0x50, 0xf2, 0x03, 0x32, 0x32, 0x44, 0x04, 0xad, 0x2e, 0x1c, 0x41, 0x12, 0x55, 0xeb, 0xb2,
	0x28, 0xfa, 0x05, 0x6b, 0x41, 0xd9, 0x74, 0x69, 0x0c, 0xd9, 0x8b, 0x23, 0xe6, 0x86, 0x8f, 0x2f,
	0xf3, 0x19, 0xd6, 0x12, 0x70, 0xc5, 0x23, 0xaa, 0xc7, 0xf3, 0x74, 0x25, 0x48, 0xd3, 0xd0, 0x01,
	0xc4, 0x46, 0x8a, 0x0f, 0x79, 0x6d, 0xe1, 0x43, 0xc6, 0x2e, 0xc9, 0xcf, 0xb9, 0x0d, 0x25, 0xb1,
	0x3e, 0xa0, 0xc1, 0xba, 0xc6, 0xbc, 0x2f, 0x4d, 0x42, 0x1b, 0x50, 0xa0, 0xb1, 0x4b, 0x37, 0xb9,
	0xce, 0x7d, 0x93, 0x2e, 0x35, 0x6b, 0xeb, 0x0b, 0x40, 0xe7, 0x4f, 0x7a, 0x59, 0xb2, 0xcb, 0xa4,
	0x93, 0xdd, 0x6f, 0xd8, 0x34, 0x44, 0xe7, 0x5d, 0xf4, 0x7f, 0x90, 0x63, 0x3d, 0x20, 0x9f, 0x84,
	0xb6, 0x2f, 0xb4, 0x12, 0xed, 0xfb, 0x98, 0x34, 0x1d, 0x81, 0x44, 0x90, 0x5f, 0x98, 0xe6, 0xd2,
	0xd6, 0xc5, 0x42, 0x43, 0xf9, 0x6d, 0x86, 0x26, 0x69, 0xab, 0x37, 0x74, 0x1c, 0x33, 0x38, 0xfb,
	0x41, 0xc6, 0x31, 0x71, 0x96, 0xec, 0x95, 0xcf, 0xf2, 0x18, 0x56, 0x34, 0x37, 0x8c, 0x4c, 0xb7,
	0x4f, 0xa3, 0xd2, 0x74, 0x4f, 0x58, 0xfa, 0x7c, 0x1b, 0x78, 0x8e, 0xf8, 0x13, 0x12, 0xfb, 0x46,
	0x55, 0x58, 0x8a, 0x3c, 0x51, 0x33, 0x96, 0x22, 0x4f, 0xf9, 0x36, 0x03, 0xd2, 0xeb, 0x21, 0x09,
	0xce, 0xd8, 0x40, 0xa9, 0x01, 0xf8, 0xe6, 0x89, 0x28, 0x44, 0xe2, 0x0e, 0xb3, 0x07, 0x0b, 0xfe,
	0x6b, 0x69, 0x77, 0x2c, 0xcc, 0xa7, 0xb0, 0x44, 0x19, 0x7d, 0x01, 0x40, 0x8d, 0xc1, 0x92, 0x1d,
	0x1f, 0x2f, 0x17, 0xca, 0x76, 0x92, 0x2f, 0xbe, 0x58, 0xf3, 0x4d, 0x4d, 0x19, 0x37, 0x27, 0x8b,
	0xd9, 0x92, 0xab, 0x50, 0x87, 0xa1, 0x2e, 0xc6, 0xc7, 0x48, 0x09, 0xf3, 0x85, 0xf2, 0xaf, 0x1c,
	0x14, 0xbb, 0x9e, 0xa5, 0x8e, 0xe8, 0xa4, 0x9e, 0xd4, 0xb7, 0xcc, 0x55, 0xeb, 0xdb, 0x6d, 0x28,
	0x9b, 0xfd, 0x68, 0x68, 0x0e, 0x8c, 0xa4, 0xf9, 0x92, 0x70, 0x89, 0xd3, 0x78, 0x9e, 0xbe, 0x33,
	0x9d, 0xef, 0x79, 0x15, 0x9c, 0x4c, 0xe6, 0x37, 0x41, 0xa2, 0xd5, 0x2f, 0x8c, 0x4c, 0xc7, 0x17,
	0x25, 0x30, 0x21, 0xa4, 0xf3, 0xe9, 0xf2, 0x0f, 0x9a, 0x4f, 0xf3, 0xdf, 0x3b, 0x9f, 0x6e, 0xa6,
	0xf2, 0x69, 0x81, 0x97, 0xa1, 0x38, 0x79, 0x6e, 0x41, 0x91, 0x1a, 0x9b, 0x05, 0x01, 0x6f, 0xb9,
	0xc6, 0xeb, 0xef, 0x50, 0xbc, 0xa6, 0xf2, 0x68, 0xe9, 0xbb, 0xe4, 0xd1, 0x5a, 0xd2, 0x42, 0x96,
	0xf9, 0xae, 0x71, 0x6f, 0x78, 0x3e, 0x07, 0x56, 0xbe, 0x5b, 0x0e, 0x7c, 0xf8, 0x87, 0x25, 0xa8,
	0x4e, 0xb6, 0xd8, 0xe2, 0x37, 0x11, 0xbd, 0xae, 0xb5, 0x55, 0xcc, 0x5a, 0xfe, 0xf4, 0x6f, 0x22,
	0x33, 0x98, 0x5d, 0xb5, 0xdd, 0xd4, 0xda, 0x2f, 0xe5, 0x0c, 0xba, 0x09, 0xb5, 0x69, 0x66, 0xab,
	0x7e, 0xd4, 0x6e, 0x1c, 0xb0, 0x01, 0x69, 0x06, 0x97, 0x4d, 0x0d, 0x54, 0x37, 0x3b, 0x0b, 0x18,
	0x1f, 0xb5, 0xdb, 0x94, 0x99, 0x43, 0xb7, 0x60, 0xf3, 0x9c, 0xea, 0x51, 0x63, 0x3c, 0xd7, 0x6c,
	0xc1, 0xfa, 0x34, 0x5b, 0x8c, 0x65, 0xf9, 0x59, 0xb8, 0x74, 0x70, 0xa1, 0xb8, 0x85, 0x59, 0x8a,
	0x7c, 0xaa, 0x91, 0x8b, 0x0f, 0x7f, 0x9f, 0x81, 0x52, 0x6a, 0x3a, 0x46, 0x35, 0x58, 0x13, 0x3f,
	0xee, 0x4d, 0xdb, 0x64, 0x13, 0xae, 0x4f, 0x70, 0x9a, 0x5a, 0xaf, 0xfe, 0x9c, 0x82, 0x64, 0xce,
	0x29, 0xc5, 0x3f, 0x25, 0x2e, 0x9d, 0xe3, 0xf0, 0xc5, 0x57, 0x72, 0x36, 0xf5, 0x2b, 0x62, 0xac,
	0x13, 0xf3, 0x72, 0x0f, 0xff, 0x96, 0x65, 0x89, 0x80, 0x9f, 0xe8, 0x3a, 0xac, 0x76, 0x3b, 0xcd,
	0x59, 0xc7, 0x49, 0x93, 0x35, 0x5d, 0xab, 0xb7, 0xb4, 0xaf, 0xd9, 0x71, 0x26, 0x34, 0xe2, 0x77,
	0x5b, 0x42, 0xd7, 0x60, 0x25, 0x21, 0x63, 0xb5, 0xde, 0xa4, 0xc7, 0x98, 0x94, 0x6d, 0xd5, 0x1b,
	0xfc, 0x29, 0xd6, 0x40, 0x9e, 0x24, 0xb3, 0x17, 0xd8, 0x80, 0x6b, 0x09, 0x95, 0xbf, 0x39, 0x15,
	0xcf, 0xa3, 0x75, 0x40, 0xd3, 0x0c, 0xb5, 0x29, 0x17, 0x26, 0xe9, 0x63, 0x37, 0x28, 0x4e, 0xee,
	0x1a, 0x3b, 0x80, 0x34, 0x89, 0x9f, 0x3c, 0x3d, 0x4c, 0x1e, 0x47, 0x3c, 0x7a, 0x09, 0x21, 0xa8,
	0xa6, 0x76, 0xed, 0xf4, 0x74, 0xb9, 0x3c, 0x89, 0x1c, 0xbb, 0x40, 0x65, 0x12, 0x40, 0x3c, 0x7e,
	0x95, 0xbe, 0x4e, 0xea, 0x96, 0x7c, 0x0a, 0xa7, 0xf2, 0x2b, 0x93, 0x30, 0x4d, 0xb5, 0xa5, 0xea,
	0x6a, 0x53, 0x96, 0x27, 0xef, 0x83, 0xd5, 0x9e, 0x8a, 0xdf, 0xa8, 0x4d, 0x79, 0xf5, 0xf9, 0x3e,
	0xcc, 0xfb, 0x27, 0x44, 0x5f, 0x6f, 0xcc, 0xf9, 0x97, 0x40, 0xc7, 0x79, 0xf6, 0x4f, 0x74, 0x3e,
	0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0xaf, 0x64, 0x92, 0xa0, 0x24, 0x00, 0x00,
}
