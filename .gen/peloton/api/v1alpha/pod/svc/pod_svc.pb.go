// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v1alpha/pod/svc/pod_svc.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	peloton "github.com/uber/peloton/.gen/peloton/api/v1alpha/peloton"
	pod "github.com/uber/peloton/.gen/peloton/api/v1alpha/pod"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for PodService.StartPod method
type StartPodRequest struct {
	// The pod name.
	PodName              *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StartPodRequest) Reset()         { *m = StartPodRequest{} }
func (m *StartPodRequest) String() string { return proto.CompactTextString(m) }
func (*StartPodRequest) ProtoMessage()    {}
func (*StartPodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{0}
}

func (m *StartPodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartPodRequest.Unmarshal(m, b)
}
func (m *StartPodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartPodRequest.Marshal(b, m, deterministic)
}
func (m *StartPodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartPodRequest.Merge(m, src)
}
func (m *StartPodRequest) XXX_Size() int {
	return xxx_messageInfo_StartPodRequest.Size(m)
}
func (m *StartPodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartPodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartPodRequest proto.InternalMessageInfo

func (m *StartPodRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

// Response message for PodService.StartPod method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type StartPodResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartPodResponse) Reset()         { *m = StartPodResponse{} }
func (m *StartPodResponse) String() string { return proto.CompactTextString(m) }
func (*StartPodResponse) ProtoMessage()    {}
func (*StartPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{1}
}

func (m *StartPodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartPodResponse.Unmarshal(m, b)
}
func (m *StartPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartPodResponse.Marshal(b, m, deterministic)
}
func (m *StartPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartPodResponse.Merge(m, src)
}
func (m *StartPodResponse) XXX_Size() int {
	return xxx_messageInfo_StartPodResponse.Size(m)
}
func (m *StartPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartPodResponse proto.InternalMessageInfo

// Request message for PodService.StopPod method
type StopPodRequest struct {
	// The pod name.
	PodName              *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StopPodRequest) Reset()         { *m = StopPodRequest{} }
func (m *StopPodRequest) String() string { return proto.CompactTextString(m) }
func (*StopPodRequest) ProtoMessage()    {}
func (*StopPodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{2}
}

func (m *StopPodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopPodRequest.Unmarshal(m, b)
}
func (m *StopPodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopPodRequest.Marshal(b, m, deterministic)
}
func (m *StopPodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopPodRequest.Merge(m, src)
}
func (m *StopPodRequest) XXX_Size() int {
	return xxx_messageInfo_StopPodRequest.Size(m)
}
func (m *StopPodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopPodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopPodRequest proto.InternalMessageInfo

func (m *StopPodRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

// Response message for PodService.StopPod method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type StopPodResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopPodResponse) Reset()         { *m = StopPodResponse{} }
func (m *StopPodResponse) String() string { return proto.CompactTextString(m) }
func (*StopPodResponse) ProtoMessage()    {}
func (*StopPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{3}
}

func (m *StopPodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopPodResponse.Unmarshal(m, b)
}
func (m *StopPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopPodResponse.Marshal(b, m, deterministic)
}
func (m *StopPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopPodResponse.Merge(m, src)
}
func (m *StopPodResponse) XXX_Size() int {
	return xxx_messageInfo_StopPodResponse.Size(m)
}
func (m *StopPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopPodResponse proto.InternalMessageInfo

// Request message for PodService.RestartPod method
type RestartPodRequest struct {
	// The pod name.
	PodName              *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RestartPodRequest) Reset()         { *m = RestartPodRequest{} }
func (m *RestartPodRequest) String() string { return proto.CompactTextString(m) }
func (*RestartPodRequest) ProtoMessage()    {}
func (*RestartPodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{4}
}

func (m *RestartPodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartPodRequest.Unmarshal(m, b)
}
func (m *RestartPodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartPodRequest.Marshal(b, m, deterministic)
}
func (m *RestartPodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartPodRequest.Merge(m, src)
}
func (m *RestartPodRequest) XXX_Size() int {
	return xxx_messageInfo_RestartPodRequest.Size(m)
}
func (m *RestartPodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartPodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartPodRequest proto.InternalMessageInfo

func (m *RestartPodRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

// Response message for PodService.RestartPod method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type RestartPodResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartPodResponse) Reset()         { *m = RestartPodResponse{} }
func (m *RestartPodResponse) String() string { return proto.CompactTextString(m) }
func (*RestartPodResponse) ProtoMessage()    {}
func (*RestartPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{5}
}

func (m *RestartPodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartPodResponse.Unmarshal(m, b)
}
func (m *RestartPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartPodResponse.Marshal(b, m, deterministic)
}
func (m *RestartPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartPodResponse.Merge(m, src)
}
func (m *RestartPodResponse) XXX_Size() int {
	return xxx_messageInfo_RestartPodResponse.Size(m)
}
func (m *RestartPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestartPodResponse proto.InternalMessageInfo

// Request message for PodService.GetPod method
type GetPodRequest struct {
	// The pod name.
	PodName *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// If set to true, only return the pod status and not the configuration.
	StatusOnly bool `protobuf:"varint,2,opt,name=status_only,json=statusOnly,proto3" json:"status_only,omitempty"`
	// If set to true, only return current run of the pod.
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPodRequest) Reset()         { *m = GetPodRequest{} }
func (m *GetPodRequest) String() string { return proto.CompactTextString(m) }
func (*GetPodRequest) ProtoMessage()    {}
func (*GetPodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{6}
}

func (m *GetPodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodRequest.Unmarshal(m, b)
}
func (m *GetPodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodRequest.Marshal(b, m, deterministic)
}
func (m *GetPodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodRequest.Merge(m, src)
}
func (m *GetPodRequest) XXX_Size() int {
	return xxx_messageInfo_GetPodRequest.Size(m)
}
func (m *GetPodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodRequest proto.InternalMessageInfo

func (m *GetPodRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

func (m *GetPodRequest) GetStatusOnly() bool {
	if m != nil {
		return m.StatusOnly
	}
	return false
}

func (m *GetPodRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Response message for PodService.GetPod method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type GetPodResponse struct {
	// Returns the status and configuration (if requested)
	// for the current run of the pod.
	Current *pod.PodInfo `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	// Returns the status and configuration (if requested)
	// for previous runs of the pod.
	Previous             []*pod.PodInfo `protobuf:"bytes,2,rep,name=previous,proto3" json:"previous,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetPodResponse) Reset()         { *m = GetPodResponse{} }
func (m *GetPodResponse) String() string { return proto.CompactTextString(m) }
func (*GetPodResponse) ProtoMessage()    {}
func (*GetPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{7}
}

func (m *GetPodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodResponse.Unmarshal(m, b)
}
func (m *GetPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodResponse.Marshal(b, m, deterministic)
}
func (m *GetPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodResponse.Merge(m, src)
}
func (m *GetPodResponse) XXX_Size() int {
	return xxx_messageInfo_GetPodResponse.Size(m)
}
func (m *GetPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodResponse proto.InternalMessageInfo

func (m *GetPodResponse) GetCurrent() *pod.PodInfo {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *GetPodResponse) GetPrevious() []*pod.PodInfo {
	if m != nil {
		return m.Previous
	}
	return nil
}

// Request message for PodService.GetPodEvents method
type GetPodEventsRequest struct {
	// The pod name.
	PodName *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Get the events of a particular pod identified using the pod identifier.
	// If not provided, events for the latest pod are returned.
	PodId                *peloton.PodID `protobuf:"bytes,2,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetPodEventsRequest) Reset()         { *m = GetPodEventsRequest{} }
func (m *GetPodEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsRequest) ProtoMessage()    {}
func (*GetPodEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{8}
}

func (m *GetPodEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsRequest.Unmarshal(m, b)
}
func (m *GetPodEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsRequest.Marshal(b, m, deterministic)
}
func (m *GetPodEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsRequest.Merge(m, src)
}
func (m *GetPodEventsRequest) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsRequest.Size(m)
}
func (m *GetPodEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsRequest proto.InternalMessageInfo

func (m *GetPodEventsRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

func (m *GetPodEventsRequest) GetPodId() *peloton.PodID {
	if m != nil {
		return m.PodId
	}
	return nil
}

// Response message for PodService.GetPodEvents method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type GetPodEventsResponse struct {
	Events               []*pod.PodEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetPodEventsResponse) Reset()         { *m = GetPodEventsResponse{} }
func (m *GetPodEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPodEventsResponse) ProtoMessage()    {}
func (*GetPodEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{9}
}

func (m *GetPodEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodEventsResponse.Unmarshal(m, b)
}
func (m *GetPodEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodEventsResponse.Marshal(b, m, deterministic)
}
func (m *GetPodEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodEventsResponse.Merge(m, src)
}
func (m *GetPodEventsResponse) XXX_Size() int {
	return xxx_messageInfo_GetPodEventsResponse.Size(m)
}
func (m *GetPodEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodEventsResponse proto.InternalMessageInfo

func (m *GetPodEventsResponse) GetEvents() []*pod.PodEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

// Request message for PodService.BrowsePodSandbox method
type BrowsePodSandboxRequest struct {
	// The pod name.
	PodName *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Get the sandbox path of a particular pod identified using the pod identifier.
	// If not provided, the sandbox path for the latest pod is returned.
	PodId                *peloton.PodID `protobuf:"bytes,2,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BrowsePodSandboxRequest) Reset()         { *m = BrowsePodSandboxRequest{} }
func (m *BrowsePodSandboxRequest) String() string { return proto.CompactTextString(m) }
func (*BrowsePodSandboxRequest) ProtoMessage()    {}
func (*BrowsePodSandboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{10}
}

func (m *BrowsePodSandboxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowsePodSandboxRequest.Unmarshal(m, b)
}
func (m *BrowsePodSandboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowsePodSandboxRequest.Marshal(b, m, deterministic)
}
func (m *BrowsePodSandboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowsePodSandboxRequest.Merge(m, src)
}
func (m *BrowsePodSandboxRequest) XXX_Size() int {
	return xxx_messageInfo_BrowsePodSandboxRequest.Size(m)
}
func (m *BrowsePodSandboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowsePodSandboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrowsePodSandboxRequest proto.InternalMessageInfo

func (m *BrowsePodSandboxRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

func (m *BrowsePodSandboxRequest) GetPodId() *peloton.PodID {
	if m != nil {
		return m.PodId
	}
	return nil
}

// Response message for PodService.BrowsePodSandbox method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
//   ABORT:       if the pod has not been run.
type BrowsePodSandboxResponse struct {
	// The hostname of the sandbox.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port of the sandbox.
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// The list of sandbox file paths.
	// TODO: distinguish files and directories in the sandbox
	Paths []string `protobuf:"bytes,3,rep,name=paths,proto3" json:"paths,omitempty"`
	// Mesos Master hostname and port.
	MesosMasterHostname  string   `protobuf:"bytes,4,opt,name=mesos_master_hostname,json=mesosMasterHostname,proto3" json:"mesos_master_hostname,omitempty"`
	MesosMasterPort      string   `protobuf:"bytes,5,opt,name=mesos_master_port,json=mesosMasterPort,proto3" json:"mesos_master_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrowsePodSandboxResponse) Reset()         { *m = BrowsePodSandboxResponse{} }
func (m *BrowsePodSandboxResponse) String() string { return proto.CompactTextString(m) }
func (*BrowsePodSandboxResponse) ProtoMessage()    {}
func (*BrowsePodSandboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{11}
}

func (m *BrowsePodSandboxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrowsePodSandboxResponse.Unmarshal(m, b)
}
func (m *BrowsePodSandboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrowsePodSandboxResponse.Marshal(b, m, deterministic)
}
func (m *BrowsePodSandboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrowsePodSandboxResponse.Merge(m, src)
}
func (m *BrowsePodSandboxResponse) XXX_Size() int {
	return xxx_messageInfo_BrowsePodSandboxResponse.Size(m)
}
func (m *BrowsePodSandboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BrowsePodSandboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BrowsePodSandboxResponse proto.InternalMessageInfo

func (m *BrowsePodSandboxResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *BrowsePodSandboxResponse) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *BrowsePodSandboxResponse) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *BrowsePodSandboxResponse) GetMesosMasterHostname() string {
	if m != nil {
		return m.MesosMasterHostname
	}
	return ""
}

func (m *BrowsePodSandboxResponse) GetMesosMasterPort() string {
	if m != nil {
		return m.MesosMasterPort
	}
	return ""
}

// Request message for PodService.RefreshPod method
type RefreshPodRequest struct {
	// The pod name.
	PodName              *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RefreshPodRequest) Reset()         { *m = RefreshPodRequest{} }
func (m *RefreshPodRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshPodRequest) ProtoMessage()    {}
func (*RefreshPodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{12}
}

func (m *RefreshPodRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshPodRequest.Unmarshal(m, b)
}
func (m *RefreshPodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshPodRequest.Marshal(b, m, deterministic)
}
func (m *RefreshPodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshPodRequest.Merge(m, src)
}
func (m *RefreshPodRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshPodRequest.Size(m)
}
func (m *RefreshPodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshPodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshPodRequest proto.InternalMessageInfo

func (m *RefreshPodRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

// Response message for PodService.RefreshPod method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type RefreshPodResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshPodResponse) Reset()         { *m = RefreshPodResponse{} }
func (m *RefreshPodResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshPodResponse) ProtoMessage()    {}
func (*RefreshPodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{13}
}

func (m *RefreshPodResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshPodResponse.Unmarshal(m, b)
}
func (m *RefreshPodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshPodResponse.Marshal(b, m, deterministic)
}
func (m *RefreshPodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshPodResponse.Merge(m, src)
}
func (m *RefreshPodResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshPodResponse.Size(m)
}
func (m *RefreshPodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshPodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshPodResponse proto.InternalMessageInfo

// Request message for PodService.GetPodCache method
type GetPodCacheRequest struct {
	// The pod name.
	PodName              *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetPodCacheRequest) Reset()         { *m = GetPodCacheRequest{} }
func (m *GetPodCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetPodCacheRequest) ProtoMessage()    {}
func (*GetPodCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{14}
}

func (m *GetPodCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodCacheRequest.Unmarshal(m, b)
}
func (m *GetPodCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetPodCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodCacheRequest.Merge(m, src)
}
func (m *GetPodCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetPodCacheRequest.Size(m)
}
func (m *GetPodCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodCacheRequest proto.InternalMessageInfo

func (m *GetPodCacheRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

// Response message for PodService.GetPodCache method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type GetPodCacheResponse struct {
	// The runtime status of the pod.
	Status *pod.PodStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The labels of the pod.
	Labels               []*peloton.Label `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetPodCacheResponse) Reset()         { *m = GetPodCacheResponse{} }
func (m *GetPodCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetPodCacheResponse) ProtoMessage()    {}
func (*GetPodCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{15}
}

func (m *GetPodCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodCacheResponse.Unmarshal(m, b)
}
func (m *GetPodCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetPodCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodCacheResponse.Merge(m, src)
}
func (m *GetPodCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetPodCacheResponse.Size(m)
}
func (m *GetPodCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodCacheResponse proto.InternalMessageInfo

func (m *GetPodCacheResponse) GetStatus() *pod.PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetPodCacheResponse) GetLabels() []*peloton.Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Request message for PodService.DeletePodEvents method
type DeletePodEventsRequest struct {
	// The pod name.
	PodName *peloton.PodName `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Delete the events of a particular pod identified using the pod identifier.
	PodId                *peloton.PodID `protobuf:"bytes,2,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeletePodEventsRequest) Reset()         { *m = DeletePodEventsRequest{} }
func (m *DeletePodEventsRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePodEventsRequest) ProtoMessage()    {}
func (*DeletePodEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{16}
}

func (m *DeletePodEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePodEventsRequest.Unmarshal(m, b)
}
func (m *DeletePodEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePodEventsRequest.Marshal(b, m, deterministic)
}
func (m *DeletePodEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePodEventsRequest.Merge(m, src)
}
func (m *DeletePodEventsRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePodEventsRequest.Size(m)
}
func (m *DeletePodEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePodEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePodEventsRequest proto.InternalMessageInfo

func (m *DeletePodEventsRequest) GetPodName() *peloton.PodName {
	if m != nil {
		return m.PodName
	}
	return nil
}

func (m *DeletePodEventsRequest) GetPodId() *peloton.PodID {
	if m != nil {
		return m.PodId
	}
	return nil
}

// Response message for PodService.DeletePodEvents method
// Return errors:
//   NOT_FOUND:   if the pod is not found.
type DeletePodEventsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePodEventsResponse) Reset()         { *m = DeletePodEventsResponse{} }
func (m *DeletePodEventsResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePodEventsResponse) ProtoMessage()    {}
func (*DeletePodEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a633546a966c764c, []int{17}
}

func (m *DeletePodEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePodEventsResponse.Unmarshal(m, b)
}
func (m *DeletePodEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePodEventsResponse.Marshal(b, m, deterministic)
}
func (m *DeletePodEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePodEventsResponse.Merge(m, src)
}
func (m *DeletePodEventsResponse) XXX_Size() int {
	return xxx_messageInfo_DeletePodEventsResponse.Size(m)
}
func (m *DeletePodEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePodEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePodEventsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StartPodRequest)(nil), "peloton.api.v1alpha.pod.svc.StartPodRequest")
	proto.RegisterType((*StartPodResponse)(nil), "peloton.api.v1alpha.pod.svc.StartPodResponse")
	proto.RegisterType((*StopPodRequest)(nil), "peloton.api.v1alpha.pod.svc.StopPodRequest")
	proto.RegisterType((*StopPodResponse)(nil), "peloton.api.v1alpha.pod.svc.StopPodResponse")
	proto.RegisterType((*RestartPodRequest)(nil), "peloton.api.v1alpha.pod.svc.RestartPodRequest")
	proto.RegisterType((*RestartPodResponse)(nil), "peloton.api.v1alpha.pod.svc.RestartPodResponse")
	proto.RegisterType((*GetPodRequest)(nil), "peloton.api.v1alpha.pod.svc.GetPodRequest")
	proto.RegisterType((*GetPodResponse)(nil), "peloton.api.v1alpha.pod.svc.GetPodResponse")
	proto.RegisterType((*GetPodEventsRequest)(nil), "peloton.api.v1alpha.pod.svc.GetPodEventsRequest")
	proto.RegisterType((*GetPodEventsResponse)(nil), "peloton.api.v1alpha.pod.svc.GetPodEventsResponse")
	proto.RegisterType((*BrowsePodSandboxRequest)(nil), "peloton.api.v1alpha.pod.svc.BrowsePodSandboxRequest")
	proto.RegisterType((*BrowsePodSandboxResponse)(nil), "peloton.api.v1alpha.pod.svc.BrowsePodSandboxResponse")
	proto.RegisterType((*RefreshPodRequest)(nil), "peloton.api.v1alpha.pod.svc.RefreshPodRequest")
	proto.RegisterType((*RefreshPodResponse)(nil), "peloton.api.v1alpha.pod.svc.RefreshPodResponse")
	proto.RegisterType((*GetPodCacheRequest)(nil), "peloton.api.v1alpha.pod.svc.GetPodCacheRequest")
	proto.RegisterType((*GetPodCacheResponse)(nil), "peloton.api.v1alpha.pod.svc.GetPodCacheResponse")
	proto.RegisterType((*DeletePodEventsRequest)(nil), "peloton.api.v1alpha.pod.svc.DeletePodEventsRequest")
	proto.RegisterType((*DeletePodEventsResponse)(nil), "peloton.api.v1alpha.pod.svc.DeletePodEventsResponse")
}

func init() {
	proto.RegisterFile("peloton/api/v1alpha/pod/svc/pod_svc.proto", fileDescriptor_a633546a966c764c)
}

var fileDescriptor_a633546a966c764c = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x49, 0x6f, 0xd3, 0x4e,
	0x14, 0x97, 0xbb, 0xa4, 0xe9, 0xcb, 0xbf, 0xdb, 0xb4, 0x7f, 0x6a, 0xdc, 0x03, 0xa9, 0xc5, 0x21,
	0xb4, 0xc5, 0x69, 0xd3, 0x72, 0x68, 0x85, 0x84, 0x54, 0x8a, 0xa0, 0x12, 0x4b, 0x3a, 0x81, 0x0b,
	0x97, 0x68, 0x1a, 0x4f, 0x89, 0x25, 0xc7, 0x33, 0x78, 0x26, 0x86, 0x4a, 0x48, 0x48, 0x5c, 0x90,
	0x90, 0x38, 0x20, 0xc1, 0xf7, 0xe1, 0xa3, 0x21, 0x8f, 0x27, 0xa9, 0x93, 0xb6, 0x8e, 0x2b, 0xe5,
	0xd0, 0x43, 0x14, 0x2f, 0xbf, 0xe5, 0xcd, 0xcc, 0x5b, 0x0c, 0x0f, 0x38, 0xf5, 0x99, 0x64, 0x41,
	0x95, 0x70, 0xaf, 0x1a, 0xed, 0x10, 0x9f, 0xb7, 0x49, 0x95, 0x33, 0xb7, 0x2a, 0xa2, 0x56, 0xfc,
	0xdf, 0x14, 0x51, 0xcb, 0xe1, 0x21, 0x93, 0x0c, 0xad, 0x69, 0xa8, 0x43, 0xb8, 0xe7, 0x68, 0xa8,
	0xc3, 0x99, 0xeb, 0x88, 0xa8, 0x65, 0xad, 0x5f, 0xa9, 0xa3, 0x09, 0x8a, 0x7f, 0x0d, 0x84, 0xb9,
	0xf1, 0x2f, 0x81, 0xd8, 0x18, 0x16, 0x1a, 0x92, 0x84, 0xb2, 0xce, 0x5c, 0x4c, 0x3f, 0x76, 0xa9,
	0x90, 0xe8, 0x09, 0x14, 0xe3, 0x30, 0x02, 0xd2, 0xa1, 0xa6, 0x51, 0x36, 0x2a, 0xa5, 0xda, 0x7d,
	0xe7, 0xca, 0x40, 0xf4, 0xb3, 0x3a, 0x73, 0x5f, 0x93, 0x0e, 0xc5, 0x33, 0x3c, 0xb9, 0xb0, 0x11,
	0x2c, 0x5e, 0x68, 0x0a, 0xce, 0x02, 0x41, 0xed, 0x13, 0x98, 0x6f, 0x48, 0xc6, 0xc7, 0x69, 0xb3,
	0x14, 0x87, 0xae, 0x25, 0xb5, 0xcb, 0x5b, 0x58, 0xc2, 0x54, 0x8c, 0x7b, 0x3d, 0x2b, 0x80, 0xd2,
	0xaa, 0xda, 0xeb, 0xbb, 0x01, 0x73, 0xcf, 0xe9, 0x38, 0x8d, 0xd0, 0x3d, 0x28, 0x09, 0x49, 0x64,
	0x57, 0x34, 0x59, 0xe0, 0x9f, 0x9b, 0x13, 0x65, 0xa3, 0x52, 0xc4, 0x90, 0x3c, 0x7a, 0x13, 0xf8,
	0xe7, 0x68, 0x05, 0xa6, 0x7d, 0xaf, 0xe3, 0x49, 0x73, 0xaa, 0x6c, 0x54, 0xe6, 0x70, 0x72, 0x63,
	0xff, 0x30, 0x60, 0xbe, 0x17, 0x49, 0x12, 0x1c, 0x3a, 0x80, 0x99, 0x56, 0x37, 0x0c, 0x69, 0x20,
	0x75, 0x24, 0x65, 0xe7, 0xba, 0x5c, 0xaa, 0x33, 0xf7, 0x38, 0x38, 0x63, 0xb8, 0x47, 0x40, 0x8f,
	0xa1, 0xc8, 0x43, 0x1a, 0x79, 0xac, 0x2b, 0xcc, 0x89, 0xf2, 0x64, 0x2e, 0x72, 0x9f, 0x61, 0xff,
	0x32, 0x60, 0x39, 0x09, 0xe6, 0x59, 0x44, 0x03, 0x29, 0xc6, 0xb6, 0x39, 0xfb, 0x50, 0x88, 0x05,
	0x3c, 0x57, 0xed, 0x4b, 0xa9, 0x66, 0x8f, 0xa2, 0x1f, 0x1f, 0xe1, 0x69, 0xce, 0xdc, 0x63, 0xd7,
	0x3e, 0x81, 0x95, 0xc1, 0x90, 0xf4, 0x2e, 0xed, 0x43, 0x81, 0xaa, 0x27, 0xa6, 0xa1, 0xd6, 0xb9,
	0x9e, 0xb5, 0x4e, 0xc5, 0xc5, 0x9a, 0x60, 0xff, 0x31, 0x60, 0xf5, 0x30, 0x64, 0x9f, 0x04, 0xad,
	0x33, 0xb7, 0x41, 0x02, 0xf7, 0x94, 0x7d, 0xbe, 0x0d, 0x4b, 0xfd, 0x6b, 0x80, 0x79, 0x39, 0x2e,
	0xbd, 0x5e, 0x0b, 0x8a, 0x6d, 0x26, 0x64, 0x3f, 0xb0, 0x59, 0xdc, 0xbf, 0x47, 0x08, 0xa6, 0x38,
	0x0b, 0xa5, 0x72, 0x9c, 0xc5, 0xea, 0x3a, 0x4e, 0x37, 0x4e, 0x64, 0x5b, 0x98, 0x93, 0xe5, 0xc9,
	0xca, 0x2c, 0x4e, 0x6e, 0x50, 0x0d, 0xfe, 0xef, 0x50, 0xc1, 0x44, 0xb3, 0x43, 0x84, 0xa4, 0x61,
	0xb3, 0x2f, 0x39, 0xa5, 0xa8, 0xcb, 0xea, 0xe5, 0x2b, 0xf5, 0xee, 0x45, 0x4f, 0x7d, 0x03, 0x96,
	0x06, 0x38, 0xca, 0x6a, 0x5a, 0xe1, 0x17, 0x52, 0xf8, 0x3a, 0x0b, 0x65, 0x52, 0xc4, 0x67, 0x21,
	0x15, 0xed, 0xb1, 0x17, 0xf1, 0x85, 0xaa, 0x2e, 0xe2, 0x77, 0x80, 0x92, 0xcc, 0x78, 0x4a, 0x5a,
	0x6d, 0x3a, 0x36, 0xb3, 0x9f, 0xfd, 0x22, 0xd0, 0xba, 0xfd, 0xb2, 0x2c, 0x24, 0xd5, 0xac, 0x65,
	0xed, 0xac, 0x84, 0x6b, 0x28, 0x24, 0xd6, 0x8c, 0x98, 0xeb, 0x93, 0x53, 0xea, 0xf7, 0x8a, 0x32,
	0x3b, 0x29, 0x5e, 0xc6, 0x50, 0xac, 0x19, 0xf6, 0x6f, 0x03, 0xee, 0x1c, 0x51, 0x9f, 0x4a, 0x7a,
	0xab, 0xea, 0xf2, 0x2e, 0xac, 0x5e, 0x8a, 0x2a, 0xd9, 0xa9, 0xda, 0xb7, 0x22, 0x40, 0xbc, 0x07,
	0x34, 0x8c, 0xbc, 0x16, 0x45, 0x1f, 0xa0, 0xd8, 0x1b, 0x29, 0x68, 0xcb, 0xc9, 0x18, 0x8b, 0xce,
	0xd0, 0x34, 0xb3, 0x1e, 0xe6, 0x44, 0xeb, 0x13, 0x72, 0x61, 0x46, 0x0f, 0x15, 0xb4, 0x39, 0x82,
	0x99, 0x9e, 0x66, 0xd6, 0x56, 0x3e, 0xb0, 0x76, 0xe9, 0x00, 0x5c, 0x4c, 0x14, 0xe4, 0x64, 0x72,
	0x2f, 0x0d, 0x34, 0xab, 0x9a, 0x1b, 0xaf, 0xed, 0x08, 0x14, 0x92, 0x6c, 0x44, 0x1b, 0x99, 0xd4,
	0x81, 0x71, 0x66, 0x6d, 0xe6, 0xc2, 0x6a, 0x0b, 0x01, 0xff, 0xa5, 0x5b, 0x2c, 0xda, 0xce, 0x41,
	0x1e, 0x48, 0x44, 0x6b, 0xe7, 0x06, 0x0c, 0x6d, 0xfa, 0x15, 0x16, 0x87, 0x7b, 0x1d, 0xda, 0xcb,
	0x94, 0xb9, 0xa6, 0x65, 0x5b, 0x8f, 0x6e, 0xc8, 0x4a, 0x9f, 0x63, 0xaf, 0xa9, 0x8c, 0x3c, 0xc7,
	0xa1, 0x9e, 0x36, 0xf2, 0x1c, 0x87, 0xbb, 0x15, 0xe2, 0x50, 0x4a, 0x75, 0x15, 0x54, 0xcd, 0xb1,
	0x63, 0xe9, 0xbe, 0x66, 0x6d, 0xe7, 0x27, 0x68, 0xc7, 0x2f, 0xb0, 0x30, 0x54, 0xa1, 0x68, 0x37,
	0x53, 0xe4, 0xea, 0x2e, 0x63, 0xed, 0xdd, 0x8c, 0x94, 0xb8, 0x1f, 0x1e, 0x40, 0xd6, 0x17, 0xf0,
	0xfb, 0xb5, 0x8c, 0x2f, 0xe9, 0xd3, 0x82, 0xfa, 0xbe, 0xdd, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x15, 0xeb, 0x83, 0x02, 0x6f, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PodServiceClient is the client API for PodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PodServiceClient interface {
	// Start the pod. Will be a no-op for pod that is currently running.
	// The pod is started asynchronously after the API call returns.
	StartPod(ctx context.Context, in *StartPodRequest, opts ...grpc.CallOption) (*StartPodResponse, error)
	// Stop the pod. Will be no-op for a pod that is currently stopped.
	// The pod is stopped asynchronously after the API call returns.
	StopPod(ctx context.Context, in *StopPodRequest, opts ...grpc.CallOption) (*StopPodResponse, error)
	// Restart a the pod. Will start a pod that is currently stopped.
	// Will first stop the pod that is currently running and then start it again.
	// This is an asynchronous call.
	RestartPod(ctx context.Context, in *RestartPodRequest, opts ...grpc.CallOption) (*RestartPodResponse, error)
	// Get the info of a pod in a job. Return the current run as well as the
	// terminal state of previous runs.
	GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error)
	// Get the state transitions for a pod (pod events) for a
	// given run of the pod.
	GetPodEvents(ctx context.Context, in *GetPodEventsRequest, opts ...grpc.CallOption) (*GetPodEventsResponse, error)
	// Return the list of file paths inside the sandbox for a given
	// run of a pod. The client can use the Mesos Agent HTTP endpoints to read
	// and download the files. http://mesos.apache.org/documentation/latest/endpoints/
	BrowsePodSandbox(ctx context.Context, in *BrowsePodSandboxRequest, opts ...grpc.CallOption) (*BrowsePodSandboxResponse, error)
	// Allows user to load pod runtime state from DB
	// and re-execute the action associated with current state.
	RefreshPod(ctx context.Context, in *RefreshPodRequest, opts ...grpc.CallOption) (*RefreshPodResponse, error)
	// Get the cache of a pod stored in Peloton.
	GetPodCache(ctx context.Context, in *GetPodCacheRequest, opts ...grpc.CallOption) (*GetPodCacheResponse, error)
	// Delete the events of a given run of a pod.
	// This is used to prevent the events for a given pod from growing without bounds.
	DeletePodEvents(ctx context.Context, in *DeletePodEventsRequest, opts ...grpc.CallOption) (*DeletePodEventsResponse, error)
}

type podServiceClient struct {
	cc *grpc.ClientConn
}

func NewPodServiceClient(cc *grpc.ClientConn) PodServiceClient {
	return &podServiceClient{cc}
}

func (c *podServiceClient) StartPod(ctx context.Context, in *StartPodRequest, opts ...grpc.CallOption) (*StartPodResponse, error) {
	out := new(StartPodResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/StartPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) StopPod(ctx context.Context, in *StopPodRequest, opts ...grpc.CallOption) (*StopPodResponse, error) {
	out := new(StopPodResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/StopPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) RestartPod(ctx context.Context, in *RestartPodRequest, opts ...grpc.CallOption) (*RestartPodResponse, error) {
	out := new(RestartPodResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/RestartPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error) {
	out := new(GetPodResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/GetPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) GetPodEvents(ctx context.Context, in *GetPodEventsRequest, opts ...grpc.CallOption) (*GetPodEventsResponse, error) {
	out := new(GetPodEventsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/GetPodEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) BrowsePodSandbox(ctx context.Context, in *BrowsePodSandboxRequest, opts ...grpc.CallOption) (*BrowsePodSandboxResponse, error) {
	out := new(BrowsePodSandboxResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/BrowsePodSandbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) RefreshPod(ctx context.Context, in *RefreshPodRequest, opts ...grpc.CallOption) (*RefreshPodResponse, error) {
	out := new(RefreshPodResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/RefreshPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) GetPodCache(ctx context.Context, in *GetPodCacheRequest, opts ...grpc.CallOption) (*GetPodCacheResponse, error) {
	out := new(GetPodCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/GetPodCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) DeletePodEvents(ctx context.Context, in *DeletePodEventsRequest, opts ...grpc.CallOption) (*DeletePodEventsResponse, error) {
	out := new(DeletePodEventsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.pod.svc.PodService/DeletePodEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServiceServer is the server API for PodService service.
type PodServiceServer interface {
	// Start the pod. Will be a no-op for pod that is currently running.
	// The pod is started asynchronously after the API call returns.
	StartPod(context.Context, *StartPodRequest) (*StartPodResponse, error)
	// Stop the pod. Will be no-op for a pod that is currently stopped.
	// The pod is stopped asynchronously after the API call returns.
	StopPod(context.Context, *StopPodRequest) (*StopPodResponse, error)
	// Restart a the pod. Will start a pod that is currently stopped.
	// Will first stop the pod that is currently running and then start it again.
	// This is an asynchronous call.
	RestartPod(context.Context, *RestartPodRequest) (*RestartPodResponse, error)
	// Get the info of a pod in a job. Return the current run as well as the
	// terminal state of previous runs.
	GetPod(context.Context, *GetPodRequest) (*GetPodResponse, error)
	// Get the state transitions for a pod (pod events) for a
	// given run of the pod.
	GetPodEvents(context.Context, *GetPodEventsRequest) (*GetPodEventsResponse, error)
	// Return the list of file paths inside the sandbox for a given
	// run of a pod. The client can use the Mesos Agent HTTP endpoints to read
	// and download the files. http://mesos.apache.org/documentation/latest/endpoints/
	BrowsePodSandbox(context.Context, *BrowsePodSandboxRequest) (*BrowsePodSandboxResponse, error)
	// Allows user to load pod runtime state from DB
	// and re-execute the action associated with current state.
	RefreshPod(context.Context, *RefreshPodRequest) (*RefreshPodResponse, error)
	// Get the cache of a pod stored in Peloton.
	GetPodCache(context.Context, *GetPodCacheRequest) (*GetPodCacheResponse, error)
	// Delete the events of a given run of a pod.
	// This is used to prevent the events for a given pod from growing without bounds.
	DeletePodEvents(context.Context, *DeletePodEventsRequest) (*DeletePodEventsResponse, error)
}

func RegisterPodServiceServer(s *grpc.Server, srv PodServiceServer) {
	s.RegisterService(&_PodService_serviceDesc, srv)
}

func _PodService_StartPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).StartPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/StartPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).StartPod(ctx, req.(*StartPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_StopPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).StopPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/StopPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).StopPod(ctx, req.(*StopPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_RestartPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).RestartPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/RestartPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).RestartPod(ctx, req.(*RestartPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).GetPod(ctx, req.(*GetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_GetPodEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).GetPodEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/GetPodEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).GetPodEvents(ctx, req.(*GetPodEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_BrowsePodSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowsePodSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).BrowsePodSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/BrowsePodSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).BrowsePodSandbox(ctx, req.(*BrowsePodSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_RefreshPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).RefreshPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/RefreshPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).RefreshPod(ctx, req.(*RefreshPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_GetPodCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).GetPodCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/GetPodCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).GetPodCache(ctx, req.(*GetPodCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_DeletePodEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).DeletePodEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.pod.svc.PodService/DeletePodEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).DeletePodEvents(ctx, req.(*DeletePodEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PodService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.v1alpha.pod.svc.PodService",
	HandlerType: (*PodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartPod",
			Handler:    _PodService_StartPod_Handler,
		},
		{
			MethodName: "StopPod",
			Handler:    _PodService_StopPod_Handler,
		},
		{
			MethodName: "RestartPod",
			Handler:    _PodService_RestartPod_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _PodService_GetPod_Handler,
		},
		{
			MethodName: "GetPodEvents",
			Handler:    _PodService_GetPodEvents_Handler,
		},
		{
			MethodName: "BrowsePodSandbox",
			Handler:    _PodService_BrowsePodSandbox_Handler,
		},
		{
			MethodName: "RefreshPod",
			Handler:    _PodService_RefreshPod_Handler,
		},
		{
			MethodName: "GetPodCache",
			Handler:    _PodService_GetPodCache_Handler,
		},
		{
			MethodName: "DeletePodEvents",
			Handler:    _PodService_DeletePodEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peloton/api/v1alpha/pod/svc/pod_svc.proto",
}
