// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v1alpha/respool/respool.proto

package respool

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	peloton "github.com/uber/peloton/.gen/peloton/api/v1alpha/peloton"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ReservationType indicates reservation type for the resourcepool
type ReservationType int32

const (
	ReservationType_RESERVATION_TYPE_INVALID ReservationType = 0
	// ELASTIC reservation enables resource pool to be elastic
	// in reservation , which means other resource pool
	// can take resources from this resource pool as well
	// as this resource pool also can take resources from
	// any other resource pool. This is the by default behavior
	// for the resource pool
	ReservationType_RESERVATION_TYPE_ELASTIC ReservationType = 1
	// STATIC reservation enables resource pool to be static
	// in reservation , which means irrespective of the demand
	// this resource pool will have atleast reservation as entitlement
	// value. No other resource pool can take resources from this
	// resource pool. If demand for this resource pool is high
	// it can take resources from other resource pools.
	// By default value for reservation type ELASTIC.
	ReservationType_RESERVATION_TYPE_STATIC ReservationType = 2
)

var ReservationType_name = map[int32]string{
	0: "RESERVATION_TYPE_INVALID",
	1: "RESERVATION_TYPE_ELASTIC",
	2: "RESERVATION_TYPE_STATIC",
}

var ReservationType_value = map[string]int32{
	"RESERVATION_TYPE_INVALID": 0,
	"RESERVATION_TYPE_ELASTIC": 1,
	"RESERVATION_TYPE_STATIC":  2,
}

func (x ReservationType) String() string {
	return proto.EnumName(ReservationType_name, int32(x))
}

func (ReservationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{0}
}

// Scheduling policy for Resource Pool.
type SchedulingPolicy int32

const (
	SchedulingPolicy_SCHEDULING_POLICY_INVALID SchedulingPolicy = 0
	// This scheduling policy will return item for highest priority in FIFO order
	SchedulingPolicy_SCHEDULING_POLICY_PRIORITY_FIFO SchedulingPolicy = 1
)

var SchedulingPolicy_name = map[int32]string{
	0: "SCHEDULING_POLICY_INVALID",
	1: "SCHEDULING_POLICY_PRIORITY_FIFO",
}

var SchedulingPolicy_value = map[string]int32{
	"SCHEDULING_POLICY_INVALID":       0,
	"SCHEDULING_POLICY_PRIORITY_FIFO": 1,
}

func (x SchedulingPolicy) String() string {
	return proto.EnumName(SchedulingPolicy_name, int32(x))
}

func (SchedulingPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{1}
}

// A fully qualified path to a resource pool in a resource pool hierrarchy.
// The path to a resource pool can be defined as an absolute path,
// starting from the root node and separated by a slash.
//
// The resource hierarchy is anchored at a node called the root,
// designated by a slash "/".
//
// For the below resource hierarchy ; the "compute" resource pool would be
// desgignated by path: /infrastructure/compute
//               root
//                ├─ infrastructure
//                │  └─ compute
//                └─ marketplace
//
type ResourcePoolPath struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourcePoolPath) Reset()         { *m = ResourcePoolPath{} }
func (m *ResourcePoolPath) String() string { return proto.CompactTextString(m) }
func (*ResourcePoolPath) ProtoMessage()    {}
func (*ResourcePoolPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{0}
}

func (m *ResourcePoolPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourcePoolPath.Unmarshal(m, b)
}
func (m *ResourcePoolPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourcePoolPath.Marshal(b, m, deterministic)
}
func (m *ResourcePoolPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcePoolPath.Merge(m, src)
}
func (m *ResourcePoolPath) XXX_Size() int {
	return xxx_messageInfo_ResourcePoolPath.Size(m)
}
func (m *ResourcePoolPath) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcePoolPath.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcePoolPath proto.InternalMessageInfo

func (m *ResourcePoolPath) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Resource configuration for a resource
type ResourceSpec struct {
	// Type of the resource
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Reservation/min of the resource
	Reservation float64 `protobuf:"fixed64,2,opt,name=reservation,proto3" json:"reservation,omitempty"`
	// Limit of the resource
	Limit float64 `protobuf:"fixed64,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Share on the resource pool
	Share float64 `protobuf:"fixed64,4,opt,name=share,proto3" json:"share,omitempty"`
	// ReservationType indicates the the type of reservation
	// There are two kind of reservation
	// 1. ELASTIC
	// 2. STATIC
	Type                 ReservationType `protobuf:"varint,5,opt,name=type,proto3,enum=peloton.api.v1alpha.respool.ReservationType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResourceSpec) Reset()         { *m = ResourceSpec{} }
func (m *ResourceSpec) String() string { return proto.CompactTextString(m) }
func (*ResourceSpec) ProtoMessage()    {}
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{1}
}

func (m *ResourceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceSpec.Unmarshal(m, b)
}
func (m *ResourceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceSpec.Marshal(b, m, deterministic)
}
func (m *ResourceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSpec.Merge(m, src)
}
func (m *ResourceSpec) XXX_Size() int {
	return xxx_messageInfo_ResourceSpec.Size(m)
}
func (m *ResourceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSpec proto.InternalMessageInfo

func (m *ResourceSpec) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ResourceSpec) GetReservation() float64 {
	if m != nil {
		return m.Reservation
	}
	return 0
}

func (m *ResourceSpec) GetLimit() float64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ResourceSpec) GetShare() float64 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *ResourceSpec) GetType() ReservationType {
	if m != nil {
		return m.Type
	}
	return ReservationType_RESERVATION_TYPE_INVALID
}

// Resource Pool configuration
type ResourcePoolSpec struct {
	// Revision of the Resource Pool config
	Revision *peloton.Revision `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// Name of the resource pool
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Owning team of the pool
	OwningTeam string `protobuf:"bytes,3,opt,name=owning_team,json=owningTeam,proto3" json:"owning_team,omitempty"`
	// LDAP groups of the pool
	LdapGroups []string `protobuf:"bytes,4,rep,name=ldap_groups,json=ldapGroups,proto3" json:"ldap_groups,omitempty"`
	// Description of the resource pool
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Resource config of the Resource Pool
	Resources []*ResourceSpec `protobuf:"bytes,6,rep,name=resources,proto3" json:"resources,omitempty"`
	// Resource Pool's parent
	Parent *peloton.ResourcePoolID `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent,omitempty"`
	// Task Scheduling policy
	Policy SchedulingPolicy `protobuf:"varint,8,opt,name=policy,proto3,enum=peloton.api.v1alpha.respool.SchedulingPolicy" json:"policy,omitempty"`
	// The controller limit for this resource pool
	ControllerLimit *ControllerLimit `protobuf:"bytes,9,opt,name=controller_limit,json=controllerLimit,proto3" json:"controller_limit,omitempty"`
	// Cap on max non-slack resources[mem,disk] in percentage
	// that can be used by revocable task.
	SlackLimit           *SlackLimit `protobuf:"bytes,10,opt,name=slack_limit,json=slackLimit,proto3" json:"slack_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResourcePoolSpec) Reset()         { *m = ResourcePoolSpec{} }
func (m *ResourcePoolSpec) String() string { return proto.CompactTextString(m) }
func (*ResourcePoolSpec) ProtoMessage()    {}
func (*ResourcePoolSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{2}
}

func (m *ResourcePoolSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourcePoolSpec.Unmarshal(m, b)
}
func (m *ResourcePoolSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourcePoolSpec.Marshal(b, m, deterministic)
}
func (m *ResourcePoolSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcePoolSpec.Merge(m, src)
}
func (m *ResourcePoolSpec) XXX_Size() int {
	return xxx_messageInfo_ResourcePoolSpec.Size(m)
}
func (m *ResourcePoolSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcePoolSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcePoolSpec proto.InternalMessageInfo

func (m *ResourcePoolSpec) GetRevision() *peloton.Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *ResourcePoolSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourcePoolSpec) GetOwningTeam() string {
	if m != nil {
		return m.OwningTeam
	}
	return ""
}

func (m *ResourcePoolSpec) GetLdapGroups() []string {
	if m != nil {
		return m.LdapGroups
	}
	return nil
}

func (m *ResourcePoolSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ResourcePoolSpec) GetResources() []*ResourceSpec {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ResourcePoolSpec) GetParent() *peloton.ResourcePoolID {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ResourcePoolSpec) GetPolicy() SchedulingPolicy {
	if m != nil {
		return m.Policy
	}
	return SchedulingPolicy_SCHEDULING_POLICY_INVALID
}

func (m *ResourcePoolSpec) GetControllerLimit() *ControllerLimit {
	if m != nil {
		return m.ControllerLimit
	}
	return nil
}

func (m *ResourcePoolSpec) GetSlackLimit() *SlackLimit {
	if m != nil {
		return m.SlackLimit
	}
	return nil
}

// The max limit of resources `CONTROLLER`(see TaskType) tasks can use in
// this resource pool. This is defined as a percentage of the resource pool's
// reservation. If undefined there is no maximum limit for controller tasks
// i.e. controller tasks will not be treated differently. For eg if the
// resource pool's reservation is defined as:
//
//      cpu:100
//      mem:1000
//      disk:1000
//      gpu:10
//
// And the ControllerLimit = 10 ,Then the maximum resources the controller
// tasks can use is 10% of the reservation, i.e.
//
//      cpu:10
//      mem:100
//      disk:100
//      gpu:1
//
type ControllerLimit struct {
	MaxPercent           float64  `protobuf:"fixed64,1,opt,name=max_percent,json=maxPercent,proto3" json:"max_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControllerLimit) Reset()         { *m = ControllerLimit{} }
func (m *ControllerLimit) String() string { return proto.CompactTextString(m) }
func (*ControllerLimit) ProtoMessage()    {}
func (*ControllerLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{3}
}

func (m *ControllerLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerLimit.Unmarshal(m, b)
}
func (m *ControllerLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerLimit.Marshal(b, m, deterministic)
}
func (m *ControllerLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerLimit.Merge(m, src)
}
func (m *ControllerLimit) XXX_Size() int {
	return xxx_messageInfo_ControllerLimit.Size(m)
}
func (m *ControllerLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerLimit.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerLimit proto.InternalMessageInfo

func (m *ControllerLimit) GetMaxPercent() float64 {
	if m != nil {
		return m.MaxPercent
	}
	return 0
}

// The max limit of resources `REVOCABLE`(see TaskType) tasks can use in
// this resource pool. This is defined as a percentage of the resource pool's
// reservation. If undefined there is no maximum limit for revocable tasks
// i.e. revocable tasks will not be treated differently. For eg if the
// resource pool's reservation is defined as:
//
//      cpu:100
//      mem:1000
//      disk:1000
//
// And the SlackLimit = 10 ,Then the maximum resources the revocable
// tasks can use is 10% of the reservation, i.e.
//
//      mem:100
//      disk:100
//
// For cpu, it will use revocable resources.
type SlackLimit struct {
	MaxPercent           float64  `protobuf:"fixed64,1,opt,name=maxPercent,proto3" json:"maxPercent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlackLimit) Reset()         { *m = SlackLimit{} }
func (m *SlackLimit) String() string { return proto.CompactTextString(m) }
func (*SlackLimit) ProtoMessage()    {}
func (*SlackLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{4}
}

func (m *SlackLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlackLimit.Unmarshal(m, b)
}
func (m *SlackLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlackLimit.Marshal(b, m, deterministic)
}
func (m *SlackLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlackLimit.Merge(m, src)
}
func (m *SlackLimit) XXX_Size() int {
	return xxx_messageInfo_SlackLimit.Size(m)
}
func (m *SlackLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SlackLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SlackLimit proto.InternalMessageInfo

func (m *SlackLimit) GetMaxPercent() float64 {
	if m != nil {
		return m.MaxPercent
	}
	return 0
}

type ResourceUsage struct {
	// Type of the resource
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Allocation of the resource
	Allocation float64 `protobuf:"fixed64,2,opt,name=allocation,proto3" json:"allocation,omitempty"`
	// slack is the resource which is allocated
	// but not used and mesos will give those resources as
	// revocable offers
	Slack                float64  `protobuf:"fixed64,3,opt,name=slack,proto3" json:"slack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceUsage) Reset()         { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string { return proto.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()    {}
func (*ResourceUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{5}
}

func (m *ResourceUsage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceUsage.Unmarshal(m, b)
}
func (m *ResourceUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceUsage.Marshal(b, m, deterministic)
}
func (m *ResourceUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceUsage.Merge(m, src)
}
func (m *ResourceUsage) XXX_Size() int {
	return xxx_messageInfo_ResourceUsage.Size(m)
}
func (m *ResourceUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceUsage.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceUsage proto.InternalMessageInfo

func (m *ResourceUsage) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ResourceUsage) GetAllocation() float64 {
	if m != nil {
		return m.Allocation
	}
	return 0
}

func (m *ResourceUsage) GetSlack() float64 {
	if m != nil {
		return m.Slack
	}
	return 0
}

type ResourcePoolInfo struct {
	// Resource Pool Id
	RespoolId *peloton.ResourcePoolID `protobuf:"bytes,1,opt,name=respool_id,json=respoolId,proto3" json:"respool_id,omitempty"`
	// ResourcePool spec
	Spec *ResourcePoolSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Resource Pool's parent
	//TODO: parent duplicated from ResourcePoolConfig
	Parent *peloton.ResourcePoolID `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// Resource Pool's children
	Children []*peloton.ResourcePoolID `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	// Resource usage for each resource kind
	Usages []*ResourceUsage `protobuf:"bytes,5,rep,name=usages,proto3" json:"usages,omitempty"`
	// Resource Pool Path
	Path                 *ResourcePoolPath `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResourcePoolInfo) Reset()         { *m = ResourcePoolInfo{} }
func (m *ResourcePoolInfo) String() string { return proto.CompactTextString(m) }
func (*ResourcePoolInfo) ProtoMessage()    {}
func (*ResourcePoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23de514a9985b0b3, []int{6}
}

func (m *ResourcePoolInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourcePoolInfo.Unmarshal(m, b)
}
func (m *ResourcePoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourcePoolInfo.Marshal(b, m, deterministic)
}
func (m *ResourcePoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcePoolInfo.Merge(m, src)
}
func (m *ResourcePoolInfo) XXX_Size() int {
	return xxx_messageInfo_ResourcePoolInfo.Size(m)
}
func (m *ResourcePoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcePoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcePoolInfo proto.InternalMessageInfo

func (m *ResourcePoolInfo) GetRespoolId() *peloton.ResourcePoolID {
	if m != nil {
		return m.RespoolId
	}
	return nil
}

func (m *ResourcePoolInfo) GetSpec() *ResourcePoolSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ResourcePoolInfo) GetParent() *peloton.ResourcePoolID {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ResourcePoolInfo) GetChildren() []*peloton.ResourcePoolID {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *ResourcePoolInfo) GetUsages() []*ResourceUsage {
	if m != nil {
		return m.Usages
	}
	return nil
}

func (m *ResourcePoolInfo) GetPath() *ResourcePoolPath {
	if m != nil {
		return m.Path
	}
	return nil
}

func init() {
	proto.RegisterEnum("peloton.api.v1alpha.respool.ReservationType", ReservationType_name, ReservationType_value)
	proto.RegisterEnum("peloton.api.v1alpha.respool.SchedulingPolicy", SchedulingPolicy_name, SchedulingPolicy_value)
	proto.RegisterType((*ResourcePoolPath)(nil), "peloton.api.v1alpha.respool.ResourcePoolPath")
	proto.RegisterType((*ResourceSpec)(nil), "peloton.api.v1alpha.respool.ResourceSpec")
	proto.RegisterType((*ResourcePoolSpec)(nil), "peloton.api.v1alpha.respool.ResourcePoolSpec")
	proto.RegisterType((*ControllerLimit)(nil), "peloton.api.v1alpha.respool.ControllerLimit")
	proto.RegisterType((*SlackLimit)(nil), "peloton.api.v1alpha.respool.SlackLimit")
	proto.RegisterType((*ResourceUsage)(nil), "peloton.api.v1alpha.respool.ResourceUsage")
	proto.RegisterType((*ResourcePoolInfo)(nil), "peloton.api.v1alpha.respool.ResourcePoolInfo")
}

func init() {
	proto.RegisterFile("peloton/api/v1alpha/respool/respool.proto", fileDescriptor_23de514a9985b0b3)
}

var fileDescriptor_23de514a9985b0b3 = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x72, 0x12, 0x4b,
	0x10, 0x3e, 0x1b, 0x7e, 0x4e, 0x68, 0xce, 0x31, 0xd4, 0x94, 0x55, 0xae, 0x46, 0x13, 0xc4, 0xb2,
	0x24, 0x31, 0x92, 0x12, 0xef, 0xbc, 0x92, 0x10, 0x42, 0xd6, 0xa2, 0x02, 0x35, 0x6c, 0x62, 0xe1,
	0xcd, 0xd6, 0xb8, 0x3b, 0xc2, 0x9a, 0x61, 0x67, 0x6a, 0x76, 0xc1, 0xe4, 0xb5, 0xbc, 0xf0, 0x0d,
	0x7c, 0x2f, 0x6b, 0x66, 0x17, 0xd8, 0x10, 0x8a, 0x18, 0xaf, 0xd8, 0xf9, 0xba, 0xbf, 0x9e, 0xee,
	0xaf, 0xbb, 0x19, 0xd8, 0x13, 0x94, 0xf1, 0x88, 0x07, 0x87, 0x44, 0xf8, 0x87, 0xd3, 0xb7, 0x84,
	0x89, 0x11, 0x39, 0x94, 0x34, 0x14, 0x9c, 0xb3, 0xd9, 0x6f, 0x4d, 0x48, 0x1e, 0x71, 0xb4, 0x9d,
	0xb8, 0xd6, 0x88, 0xf0, 0x6b, 0x89, 0x6b, 0x2d, 0x71, 0x79, 0xf2, 0x7c, 0x55, 0x9c, 0x19, 0x41,
	0xf3, 0x2b, 0x55, 0x28, 0x61, 0x1a, 0xf2, 0x89, 0x74, 0x69, 0x8f, 0x73, 0xd6, 0x23, 0xd1, 0x08,
	0x3d, 0x84, 0xdc, 0x94, 0xb0, 0x09, 0x35, 0x8d, 0xb2, 0x51, 0x2d, 0xe0, 0xf8, 0x50, 0xf9, 0x61,
	0xc0, 0x7f, 0x33, 0xd7, 0xbe, 0xa0, 0x2e, 0x42, 0x90, 0xbd, 0xf4, 0x03, 0x2f, 0xf1, 0xd2, 0xdf,
	0xa8, 0x0c, 0x45, 0x49, 0x43, 0x2a, 0xa7, 0x24, 0xf2, 0x79, 0x60, 0x6e, 0x94, 0x8d, 0xaa, 0x81,
	0xd3, 0x90, 0x0a, 0xce, 0xfc, 0xb1, 0x1f, 0x99, 0x19, 0x6d, 0x8b, 0x0f, 0x0a, 0x0d, 0x47, 0x44,
	0x52, 0x33, 0x1b, 0xa3, 0xfa, 0x80, 0x3e, 0x40, 0x36, 0xba, 0x16, 0xd4, 0xcc, 0x95, 0x8d, 0xea,
	0x83, 0xfa, 0x41, 0x6d, 0x4d, 0xad, 0x35, 0xbc, 0xb8, 0xc3, 0xbe, 0x16, 0x14, 0x6b, 0x66, 0xe5,
	0x57, 0xf6, 0x66, 0x7d, 0x3a, 0xf1, 0x06, 0x6c, 0x4a, 0x3a, 0xf5, 0x43, 0x95, 0xa1, 0x4a, 0xbe,
	0x58, 0x7f, 0xb9, 0x32, 0xf4, 0x0c, 0xc3, 0x89, 0x33, 0x9e, 0xd3, 0x54, 0xed, 0x01, 0x19, 0x53,
	0x5d, 0x60, 0x01, 0xeb, 0x6f, 0xb4, 0x0b, 0x45, 0xfe, 0x3d, 0xf0, 0x83, 0xa1, 0x13, 0x51, 0x32,
	0xd6, 0xf5, 0x15, 0x30, 0xc4, 0x90, 0x4d, 0xc9, 0x58, 0x39, 0x30, 0x8f, 0x08, 0x67, 0x28, 0xf9,
	0x44, 0x84, 0x66, 0xb6, 0x9c, 0x51, 0x0e, 0x0a, 0x6a, 0x6b, 0x44, 0xa9, 0xe7, 0xd1, 0xd0, 0x95,
	0xbe, 0xd0, 0xea, 0xe5, 0x74, 0x84, 0x34, 0x84, 0xda, 0x50, 0x90, 0x49, 0x39, 0xa1, 0x99, 0x2f,
	0x67, 0xaa, 0xc5, 0xfa, 0xde, 0x5d, 0xb2, 0xcc, 0x3b, 0x86, 0x17, 0x5c, 0xd4, 0x84, 0xbc, 0x20,
	0x92, 0x06, 0x91, 0xf9, 0xaf, 0x56, 0xe0, 0xf5, 0x1d, 0x0a, 0x2c, 0x24, 0xb4, 0x8e, 0x71, 0x42,
	0x45, 0x2d, 0xc8, 0x0b, 0xce, 0x7c, 0xf7, 0xda, 0xdc, 0xd4, 0x1d, 0x7a, 0xb3, 0x36, 0x95, 0xbe,
	0x3b, 0xa2, 0xde, 0x84, 0xf9, 0xc1, 0xb0, 0xa7, 0x49, 0x38, 0x21, 0xa3, 0x4f, 0x50, 0x72, 0x79,
	0x10, 0x49, 0xce, 0x18, 0x95, 0x4e, 0x3c, 0x1d, 0x05, 0x9d, 0xd5, 0xfa, 0x96, 0x37, 0xe7, 0xa4,
	0x8e, 0xe2, 0xe0, 0x2d, 0xf7, 0x26, 0x80, 0x4e, 0xa1, 0x18, 0x32, 0xe2, 0x5e, 0x26, 0x31, 0x41,
	0xc7, 0x7c, 0xb5, 0x3e, 0x49, 0xe5, 0x1f, 0x87, 0x83, 0x70, 0xfe, 0x5d, 0xa9, 0xc3, 0xd6, 0xd2,
	0x6d, 0xaa, 0x9b, 0x63, 0x72, 0xe5, 0x08, 0x2a, 0x5d, 0x25, 0xa3, 0xa1, 0x07, 0x17, 0xc6, 0xe4,
	0xaa, 0x17, 0x23, 0x95, 0x03, 0x80, 0x45, 0x34, 0xb4, 0x03, 0x29, 0xdb, 0x0a, 0xef, 0x01, 0xfc,
	0x3f, 0x53, 0xf9, 0x3c, 0x24, 0x43, 0xba, 0x72, 0xbd, 0x76, 0x00, 0x08, 0x63, 0xdc, 0x4d, 0x6f,
	0x57, 0x0a, 0xd1, 0x6b, 0xa4, 0xae, 0x9c, 0x2d, 0x97, 0x3e, 0x54, 0x7e, 0x66, 0x6e, 0x2e, 0x81,
	0x15, 0x7c, 0xe5, 0xe8, 0x23, 0x40, 0x52, 0xb3, 0xe3, 0x7b, 0xc9, 0x1a, 0xdc, 0x6b, 0x08, 0x0a,
	0x09, 0xdd, 0xf2, 0x50, 0x03, 0xb2, 0xa1, 0xa0, 0xae, 0x4e, 0xa8, 0x78, 0xc7, 0x14, 0x2c, 0x6f,
	0x23, 0xd6, 0xd4, 0xd4, 0x3c, 0x66, 0xfe, 0x7e, 0x1e, 0xdb, 0xb0, 0xe9, 0x8e, 0x7c, 0xe6, 0x49,
	0x1a, 0xe8, 0xed, 0xba, 0x67, 0x98, 0x39, 0x19, 0x1d, 0x41, 0x7e, 0xa2, 0x9a, 0x10, 0x9a, 0x39,
	0x1d, 0x66, 0xff, 0x8f, 0x4a, 0xd2, 0x7d, 0xc3, 0x09, 0x53, 0x89, 0x22, 0x48, 0x34, 0x32, 0xf3,
	0xf7, 0x14, 0x45, 0xfd, 0x05, 0x63, 0x4d, 0xdd, 0xff, 0x06, 0x5b, 0x4b, 0x7f, 0x6b, 0xe8, 0x29,
	0x98, 0xb8, 0xd5, 0x6f, 0xe1, 0x8b, 0x86, 0x6d, 0x75, 0xcf, 0x1c, 0x7b, 0xd0, 0x6b, 0x39, 0xd6,
	0xd9, 0x45, 0xa3, 0x63, 0x1d, 0x97, 0xfe, 0x59, 0x69, 0x6d, 0x75, 0x1a, 0x7d, 0xdb, 0x6a, 0x96,
	0x0c, 0xb4, 0x0d, 0x8f, 0x6e, 0x59, 0xfb, 0x76, 0x43, 0x19, 0x37, 0xf6, 0x2f, 0xa0, 0xb4, 0xbc,
	0xa0, 0xe8, 0x19, 0x3c, 0xee, 0x37, 0x4f, 0x5b, 0xc7, 0xe7, 0x1d, 0xeb, 0xac, 0xed, 0xf4, 0xba,
	0x1d, 0xab, 0x39, 0x48, 0xdd, 0xf6, 0x02, 0x76, 0x6f, 0x9b, 0x7b, 0xd8, 0xea, 0x62, 0xcb, 0x1e,
	0x38, 0x27, 0xd6, 0x49, 0xb7, 0x64, 0x1c, 0xbd, 0x87, 0x75, 0x4f, 0xd4, 0xe7, 0xed, 0x35, 0x4f,
	0xdd, 0x97, 0xbc, 0x7e, 0xa3, 0xde, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xb1, 0xac, 0x7d,
	0x10, 0x07, 0x00, 0x00,
}
