// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peloton/api/v1alpha/job/stateless/svc/stateless_svc.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	stateless "github.com/uber/peloton/.gen/peloton/api/v1alpha/job/stateless"
	peloton "github.com/uber/peloton/.gen/peloton/api/v1alpha/peloton"
	pod "github.com/uber/peloton/.gen/peloton/api/v1alpha/pod"
	query "github.com/uber/peloton/.gen/peloton/api/v1alpha/query"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for JobService.CreateJob method.
type CreateJobRequest struct {
	// The unique job UUID specified by the client. This can be used by
	// the client to re-create a deleted job.
	// If unset, the server will create a new UUID for the job for each invocation.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The configuration of the job to be created.
	Spec *stateless.JobSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Experimental: This is a batch feature. The implementation
	// is subject to change (or removal) from stateless.
	// The list of secrets for this job
	Secrets []*peloton.Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// The creation SLA specification.
	CreateSpec *stateless.CreateSpec `protobuf:"bytes,4,opt,name=create_spec,json=createSpec,proto3" json:"create_spec,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,5,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CreateJobRequest) Reset()         { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()    {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{0}
}

func (m *CreateJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateJobRequest.Unmarshal(m, b)
}
func (m *CreateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateJobRequest.Marshal(b, m, deterministic)
}
func (m *CreateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJobRequest.Merge(m, src)
}
func (m *CreateJobRequest) XXX_Size() int {
	return xxx_messageInfo_CreateJobRequest.Size(m)
}
func (m *CreateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJobRequest proto.InternalMessageInfo

func (m *CreateJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *CreateJobRequest) GetSpec() *stateless.JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateJobRequest) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *CreateJobRequest) GetCreateSpec() *stateless.CreateSpec {
	if m != nil {
		return m.CreateSpec
	}
	return nil
}

func (m *CreateJobRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

// Response message for JobService.CreateJob method.
// Return errors:
//   ALREADY_EXISTS:    if the job ID already exists
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the resource pool is not found.
type CreateJobResponse struct {
	// The job ID of the newly created job. Will be the same as the
	// one in CreateJobRequest if provided. Otherwise, a new job ID
	//  will be generated by the server.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateJobResponse) Reset()         { *m = CreateJobResponse{} }
func (m *CreateJobResponse) String() string { return proto.CompactTextString(m) }
func (*CreateJobResponse) ProtoMessage()    {}
func (*CreateJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{1}
}

func (m *CreateJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateJobResponse.Unmarshal(m, b)
}
func (m *CreateJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateJobResponse.Marshal(b, m, deterministic)
}
func (m *CreateJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJobResponse.Merge(m, src)
}
func (m *CreateJobResponse) XXX_Size() int {
	return xxx_messageInfo_CreateJobResponse.Size(m)
}
func (m *CreateJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJobResponse proto.InternalMessageInfo

func (m *CreateJobResponse) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *CreateJobResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.ReplaceJob method.
type ReplaceJobRequest struct {
	// The job ID to be updated.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	// It is used to implement optimistic concurrency control.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The new job configuration to be applied.
	Spec *stateless.JobSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// The list of secrets for this job
	Secrets []*peloton.Secret `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// The update SLA specification.
	UpdateSpec *stateless.UpdateSpec `protobuf:"bytes,5,opt,name=update_spec,json=updateSpec,proto3" json:"update_spec,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,6,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReplaceJobRequest) Reset()         { *m = ReplaceJobRequest{} }
func (m *ReplaceJobRequest) String() string { return proto.CompactTextString(m) }
func (*ReplaceJobRequest) ProtoMessage()    {}
func (*ReplaceJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{2}
}

func (m *ReplaceJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceJobRequest.Unmarshal(m, b)
}
func (m *ReplaceJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceJobRequest.Marshal(b, m, deterministic)
}
func (m *ReplaceJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceJobRequest.Merge(m, src)
}
func (m *ReplaceJobRequest) XXX_Size() int {
	return xxx_messageInfo_ReplaceJobRequest.Size(m)
}
func (m *ReplaceJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceJobRequest proto.InternalMessageInfo

func (m *ReplaceJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *ReplaceJobRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ReplaceJobRequest) GetSpec() *stateless.JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplaceJobRequest) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *ReplaceJobRequest) GetUpdateSpec() *stateless.UpdateSpec {
	if m != nil {
		return m.UpdateSpec
	}
	return nil
}

func (m *ReplaceJobRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

// Response message for JobService.ReplaceJob method.
// Return errors:
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type ReplaceJobResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReplaceJobResponse) Reset()         { *m = ReplaceJobResponse{} }
func (m *ReplaceJobResponse) String() string { return proto.CompactTextString(m) }
func (*ReplaceJobResponse) ProtoMessage()    {}
func (*ReplaceJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{3}
}

func (m *ReplaceJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceJobResponse.Unmarshal(m, b)
}
func (m *ReplaceJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceJobResponse.Marshal(b, m, deterministic)
}
func (m *ReplaceJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceJobResponse.Merge(m, src)
}
func (m *ReplaceJobResponse) XXX_Size() int {
	return xxx_messageInfo_ReplaceJobResponse.Size(m)
}
func (m *ReplaceJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceJobResponse proto.InternalMessageInfo

func (m *ReplaceJobResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.PatchJob method.
type PatchJobRequest struct {
	// The job ID to be updated.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	// It is used to implement optimistic concurrency control.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The new job configuration to be patched.
	Spec *stateless.JobSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// The list of secrets for this job
	Secrets []*peloton.Secret `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// The update SLA specification.
	UpdateSpec *stateless.UpdateSpec `protobuf:"bytes,5,opt,name=update_spec,json=updateSpec,proto3" json:"update_spec,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,6,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PatchJobRequest) Reset()         { *m = PatchJobRequest{} }
func (m *PatchJobRequest) String() string { return proto.CompactTextString(m) }
func (*PatchJobRequest) ProtoMessage()    {}
func (*PatchJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{4}
}

func (m *PatchJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchJobRequest.Unmarshal(m, b)
}
func (m *PatchJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchJobRequest.Marshal(b, m, deterministic)
}
func (m *PatchJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchJobRequest.Merge(m, src)
}
func (m *PatchJobRequest) XXX_Size() int {
	return xxx_messageInfo_PatchJobRequest.Size(m)
}
func (m *PatchJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PatchJobRequest proto.InternalMessageInfo

func (m *PatchJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *PatchJobRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *PatchJobRequest) GetSpec() *stateless.JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PatchJobRequest) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *PatchJobRequest) GetUpdateSpec() *stateless.UpdateSpec {
	if m != nil {
		return m.UpdateSpec
	}
	return nil
}

func (m *PatchJobRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

// Response message for JobService.PatchJob method.
// Return errors:
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type PatchJobResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PatchJobResponse) Reset()         { *m = PatchJobResponse{} }
func (m *PatchJobResponse) String() string { return proto.CompactTextString(m) }
func (*PatchJobResponse) ProtoMessage()    {}
func (*PatchJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{5}
}

func (m *PatchJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PatchJobResponse.Unmarshal(m, b)
}
func (m *PatchJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PatchJobResponse.Marshal(b, m, deterministic)
}
func (m *PatchJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchJobResponse.Merge(m, src)
}
func (m *PatchJobResponse) XXX_Size() int {
	return xxx_messageInfo_PatchJobResponse.Size(m)
}
func (m *PatchJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PatchJobResponse proto.InternalMessageInfo

func (m *PatchJobResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.RestartJob method.
type RestartJobRequest struct {
	// The job to restart.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	// It is used to implement optimistic concurrency control.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The restart specification.
	RestartSpec *stateless.RestartSpec `protobuf:"bytes,3,opt,name=restart_spec,json=restartSpec,proto3" json:"restart_spec,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,5,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RestartJobRequest) Reset()         { *m = RestartJobRequest{} }
func (m *RestartJobRequest) String() string { return proto.CompactTextString(m) }
func (*RestartJobRequest) ProtoMessage()    {}
func (*RestartJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{6}
}

func (m *RestartJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartJobRequest.Unmarshal(m, b)
}
func (m *RestartJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartJobRequest.Marshal(b, m, deterministic)
}
func (m *RestartJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartJobRequest.Merge(m, src)
}
func (m *RestartJobRequest) XXX_Size() int {
	return xxx_messageInfo_RestartJobRequest.Size(m)
}
func (m *RestartJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartJobRequest proto.InternalMessageInfo

func (m *RestartJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *RestartJobRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *RestartJobRequest) GetRestartSpec() *stateless.RestartSpec {
	if m != nil {
		return m.RestartSpec
	}
	return nil
}

func (m *RestartJobRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type RestartJobResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RestartJobResponse) Reset()         { *m = RestartJobResponse{} }
func (m *RestartJobResponse) String() string { return proto.CompactTextString(m) }
func (*RestartJobResponse) ProtoMessage()    {}
func (*RestartJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{7}
}

func (m *RestartJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartJobResponse.Unmarshal(m, b)
}
func (m *RestartJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartJobResponse.Marshal(b, m, deterministic)
}
func (m *RestartJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartJobResponse.Merge(m, src)
}
func (m *RestartJobResponse) XXX_Size() int {
	return xxx_messageInfo_RestartJobResponse.Size(m)
}
func (m *RestartJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RestartJobResponse proto.InternalMessageInfo

func (m *RestartJobResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.PauseJobWorkflow method.
type PauseJobWorkflowRequest struct {
	// The job identifier.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,3,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PauseJobWorkflowRequest) Reset()         { *m = PauseJobWorkflowRequest{} }
func (m *PauseJobWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*PauseJobWorkflowRequest) ProtoMessage()    {}
func (*PauseJobWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{8}
}

func (m *PauseJobWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PauseJobWorkflowRequest.Unmarshal(m, b)
}
func (m *PauseJobWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PauseJobWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *PauseJobWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseJobWorkflowRequest.Merge(m, src)
}
func (m *PauseJobWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_PauseJobWorkflowRequest.Size(m)
}
func (m *PauseJobWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseJobWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PauseJobWorkflowRequest proto.InternalMessageInfo

func (m *PauseJobWorkflowRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *PauseJobWorkflowRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *PauseJobWorkflowRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

// Response message for JobService.PauseJobWorkflow method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type PauseJobWorkflowResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PauseJobWorkflowResponse) Reset()         { *m = PauseJobWorkflowResponse{} }
func (m *PauseJobWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*PauseJobWorkflowResponse) ProtoMessage()    {}
func (*PauseJobWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{9}
}

func (m *PauseJobWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PauseJobWorkflowResponse.Unmarshal(m, b)
}
func (m *PauseJobWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PauseJobWorkflowResponse.Marshal(b, m, deterministic)
}
func (m *PauseJobWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseJobWorkflowResponse.Merge(m, src)
}
func (m *PauseJobWorkflowResponse) XXX_Size() int {
	return xxx_messageInfo_PauseJobWorkflowResponse.Size(m)
}
func (m *PauseJobWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseJobWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PauseJobWorkflowResponse proto.InternalMessageInfo

func (m *PauseJobWorkflowResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.ResumeJobWorkflow method.
type ResumeJobWorkflowRequest struct {
	// The job identifier.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,3,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ResumeJobWorkflowRequest) Reset()         { *m = ResumeJobWorkflowRequest{} }
func (m *ResumeJobWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*ResumeJobWorkflowRequest) ProtoMessage()    {}
func (*ResumeJobWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{10}
}

func (m *ResumeJobWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeJobWorkflowRequest.Unmarshal(m, b)
}
func (m *ResumeJobWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeJobWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *ResumeJobWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeJobWorkflowRequest.Merge(m, src)
}
func (m *ResumeJobWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_ResumeJobWorkflowRequest.Size(m)
}
func (m *ResumeJobWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeJobWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeJobWorkflowRequest proto.InternalMessageInfo

func (m *ResumeJobWorkflowRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *ResumeJobWorkflowRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ResumeJobWorkflowRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

// Response message for JobService.ResumeJobWorkflow method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type ResumeJobWorkflowResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ResumeJobWorkflowResponse) Reset()         { *m = ResumeJobWorkflowResponse{} }
func (m *ResumeJobWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*ResumeJobWorkflowResponse) ProtoMessage()    {}
func (*ResumeJobWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{11}
}

func (m *ResumeJobWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeJobWorkflowResponse.Unmarshal(m, b)
}
func (m *ResumeJobWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeJobWorkflowResponse.Marshal(b, m, deterministic)
}
func (m *ResumeJobWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeJobWorkflowResponse.Merge(m, src)
}
func (m *ResumeJobWorkflowResponse) XXX_Size() int {
	return xxx_messageInfo_ResumeJobWorkflowResponse.Size(m)
}
func (m *ResumeJobWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeJobWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeJobWorkflowResponse proto.InternalMessageInfo

func (m *ResumeJobWorkflowResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.AbortJobWorkflow method.
type AbortJobWorkflowRequest struct {
	// The job identifier.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Opaque data supplied by the client
	OpaqueData           *peloton.OpaqueData `protobuf:"bytes,3,opt,name=opaque_data,json=opaqueData,proto3" json:"opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AbortJobWorkflowRequest) Reset()         { *m = AbortJobWorkflowRequest{} }
func (m *AbortJobWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*AbortJobWorkflowRequest) ProtoMessage()    {}
func (*AbortJobWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{12}
}

func (m *AbortJobWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortJobWorkflowRequest.Unmarshal(m, b)
}
func (m *AbortJobWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortJobWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *AbortJobWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortJobWorkflowRequest.Merge(m, src)
}
func (m *AbortJobWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_AbortJobWorkflowRequest.Size(m)
}
func (m *AbortJobWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortJobWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortJobWorkflowRequest proto.InternalMessageInfo

func (m *AbortJobWorkflowRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *AbortJobWorkflowRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *AbortJobWorkflowRequest) GetOpaqueData() *peloton.OpaqueData {
	if m != nil {
		return m.OpaqueData
	}
	return nil
}

// Response message for JobService.AbortJobWorkflow method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type AbortJobWorkflowResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AbortJobWorkflowResponse) Reset()         { *m = AbortJobWorkflowResponse{} }
func (m *AbortJobWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*AbortJobWorkflowResponse) ProtoMessage()    {}
func (*AbortJobWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{13}
}

func (m *AbortJobWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortJobWorkflowResponse.Unmarshal(m, b)
}
func (m *AbortJobWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortJobWorkflowResponse.Marshal(b, m, deterministic)
}
func (m *AbortJobWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortJobWorkflowResponse.Merge(m, src)
}
func (m *AbortJobWorkflowResponse) XXX_Size() int {
	return xxx_messageInfo_AbortJobWorkflowResponse.Size(m)
}
func (m *AbortJobWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortJobWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AbortJobWorkflowResponse proto.InternalMessageInfo

func (m *AbortJobWorkflowResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.StartJob method.
type StartJobRequest struct {
	// The job to start
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	// It is used to implement optimistic concurrency control.
	Version              *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StartJobRequest) Reset()         { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()    {}
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{14}
}

func (m *StartJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartJobRequest.Unmarshal(m, b)
}
func (m *StartJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartJobRequest.Marshal(b, m, deterministic)
}
func (m *StartJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartJobRequest.Merge(m, src)
}
func (m *StartJobRequest) XXX_Size() int {
	return xxx_messageInfo_StartJobRequest.Size(m)
}
func (m *StartJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartJobRequest proto.InternalMessageInfo

func (m *StartJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *StartJobRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Response message for JobService.StartJob method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type StartJobResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StartJobResponse) Reset()         { *m = StartJobResponse{} }
func (m *StartJobResponse) String() string { return proto.CompactTextString(m) }
func (*StartJobResponse) ProtoMessage()    {}
func (*StartJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{15}
}

func (m *StartJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartJobResponse.Unmarshal(m, b)
}
func (m *StartJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartJobResponse.Marshal(b, m, deterministic)
}
func (m *StartJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartJobResponse.Merge(m, src)
}
func (m *StartJobResponse) XXX_Size() int {
	return xxx_messageInfo_StartJobResponse.Size(m)
}
func (m *StartJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartJobResponse proto.InternalMessageInfo

func (m *StartJobResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.StopJob method.
type StopJobRequest struct {
	// The job to stop
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	// It is used to implement optimistic concurrency control.
	Version              *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StopJobRequest) Reset()         { *m = StopJobRequest{} }
func (m *StopJobRequest) String() string { return proto.CompactTextString(m) }
func (*StopJobRequest) ProtoMessage()    {}
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{16}
}

func (m *StopJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopJobRequest.Unmarshal(m, b)
}
func (m *StopJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopJobRequest.Marshal(b, m, deterministic)
}
func (m *StopJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopJobRequest.Merge(m, src)
}
func (m *StopJobRequest) XXX_Size() int {
	return xxx_messageInfo_StopJobRequest.Size(m)
}
func (m *StopJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopJobRequest proto.InternalMessageInfo

func (m *StopJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *StopJobRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Response message for JobService.StopJob method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type StopJobResponse struct {
	// The new version of the job.
	Version              *peloton.EntityVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StopJobResponse) Reset()         { *m = StopJobResponse{} }
func (m *StopJobResponse) String() string { return proto.CompactTextString(m) }
func (*StopJobResponse) ProtoMessage()    {}
func (*StopJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{17}
}

func (m *StopJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopJobResponse.Unmarshal(m, b)
}
func (m *StopJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopJobResponse.Marshal(b, m, deterministic)
}
func (m *StopJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopJobResponse.Merge(m, src)
}
func (m *StopJobResponse) XXX_Size() int {
	return xxx_messageInfo_StopJobResponse.Size(m)
}
func (m *StopJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopJobResponse proto.InternalMessageInfo

func (m *StopJobResponse) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Request message for JobService.DeleteJob method.
type DeleteJobRequest struct {
	// The job to be deleted.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	// It is used to implement optimistic concurrency control.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// If set to true, it will force a delete of the job even if it is running.
	// The job will be first stopped and deleted. This step cannot be undone,
	// and the job cannot be re-created (with same uuid) till the delete is complete.
	// So, it is recommended to not set force to true.
	Force                bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteJobRequest) Reset()         { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()    {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{18}
}

func (m *DeleteJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteJobRequest.Unmarshal(m, b)
}
func (m *DeleteJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteJobRequest.Marshal(b, m, deterministic)
}
func (m *DeleteJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteJobRequest.Merge(m, src)
}
func (m *DeleteJobRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteJobRequest.Size(m)
}
func (m *DeleteJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteJobRequest proto.InternalMessageInfo

func (m *DeleteJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *DeleteJobRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *DeleteJobRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

// Response message for JobService.DeleteJob method.
// Response message for JobService.RestartJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid or job is still running.
//   FailedPrecondition:  if the job has not been stopped before delete.
type DeleteJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteJobResponse) Reset()         { *m = DeleteJobResponse{} }
func (m *DeleteJobResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteJobResponse) ProtoMessage()    {}
func (*DeleteJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{19}
}

func (m *DeleteJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteJobResponse.Unmarshal(m, b)
}
func (m *DeleteJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteJobResponse.Marshal(b, m, deterministic)
}
func (m *DeleteJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteJobResponse.Merge(m, src)
}
func (m *DeleteJobResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteJobResponse.Size(m)
}
func (m *DeleteJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteJobResponse proto.InternalMessageInfo

// Request message for JobService.GetJob method.
type GetJobRequest struct {
	// The job ID to look up the job.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The version of the job object to fetch.
	// If not provided, then the latest job configuration
	// specification and runtime status are returned.
	// If provided, only the job configuration specification
	// (and no runtime) at a given version is returned.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// If set to true, only return the job summary.
	SummaryOnly          bool     `protobuf:"varint,3,opt,name=summary_only,json=summaryOnly,proto3" json:"summary_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{20}
}

func (m *GetJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobRequest.Unmarshal(m, b)
}
func (m *GetJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobRequest.Marshal(b, m, deterministic)
}
func (m *GetJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobRequest.Merge(m, src)
}
func (m *GetJobRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobRequest.Size(m)
}
func (m *GetJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobRequest proto.InternalMessageInfo

func (m *GetJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetJobRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *GetJobRequest) GetSummaryOnly() bool {
	if m != nil {
		return m.SummaryOnly
	}
	return false
}

// Response message for JobService.GetJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type GetJobResponse struct {
	// The configuration specification and runtime status of the job.
	JobInfo *stateless.JobInfo `protobuf:"bytes,1,opt,name=job_info,json=jobInfo,proto3" json:"job_info,omitempty"`
	// The job summary.
	Summary *stateless.JobSummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// The list of secrets for this job, secret.Value will be empty.
	// SecretID and path will be populated, so that caller
	// can identify which secret is associated with this job.
	Secrets []*peloton.Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// Information about the current/last completed workflow
	// including its state and specification.
	WorkflowInfo         *stateless.WorkflowInfo `protobuf:"bytes,4,opt,name=workflow_info,json=workflowInfo,proto3" json:"workflow_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetJobResponse) Reset()         { *m = GetJobResponse{} }
func (m *GetJobResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobResponse) ProtoMessage()    {}
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{21}
}

func (m *GetJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobResponse.Unmarshal(m, b)
}
func (m *GetJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobResponse.Marshal(b, m, deterministic)
}
func (m *GetJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobResponse.Merge(m, src)
}
func (m *GetJobResponse) XXX_Size() int {
	return xxx_messageInfo_GetJobResponse.Size(m)
}
func (m *GetJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobResponse proto.InternalMessageInfo

func (m *GetJobResponse) GetJobInfo() *stateless.JobInfo {
	if m != nil {
		return m.JobInfo
	}
	return nil
}

func (m *GetJobResponse) GetSummary() *stateless.JobSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *GetJobResponse) GetSecrets() []*peloton.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *GetJobResponse) GetWorkflowInfo() *stateless.WorkflowInfo {
	if m != nil {
		return m.WorkflowInfo
	}
	return nil
}

// Request message for JobService.GetJobIDFromJobName method.
type GetJobIDFromJobNameRequest struct {
	// Job name to lookup for job UUID.
	JobName              string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobIDFromJobNameRequest) Reset()         { *m = GetJobIDFromJobNameRequest{} }
func (m *GetJobIDFromJobNameRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobIDFromJobNameRequest) ProtoMessage()    {}
func (*GetJobIDFromJobNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{22}
}

func (m *GetJobIDFromJobNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobIDFromJobNameRequest.Unmarshal(m, b)
}
func (m *GetJobIDFromJobNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobIDFromJobNameRequest.Marshal(b, m, deterministic)
}
func (m *GetJobIDFromJobNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobIDFromJobNameRequest.Merge(m, src)
}
func (m *GetJobIDFromJobNameRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobIDFromJobNameRequest.Size(m)
}
func (m *GetJobIDFromJobNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobIDFromJobNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobIDFromJobNameRequest proto.InternalMessageInfo

func (m *GetJobIDFromJobNameRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

// Response message for JobService.GetJobIDFromJobName method.
// Return errors:
//   NOT_FOUND:         if the job name is not found.
type GetJobIDFromJobNameResponse struct {
	// The job UUIDs for the job name.
	// Job UUIDs are sorted by descending create timestamp.
	JobId                []*peloton.JobID `protobuf:"bytes,1,rep,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetJobIDFromJobNameResponse) Reset()         { *m = GetJobIDFromJobNameResponse{} }
func (m *GetJobIDFromJobNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobIDFromJobNameResponse) ProtoMessage()    {}
func (*GetJobIDFromJobNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{23}
}

func (m *GetJobIDFromJobNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobIDFromJobNameResponse.Unmarshal(m, b)
}
func (m *GetJobIDFromJobNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobIDFromJobNameResponse.Marshal(b, m, deterministic)
}
func (m *GetJobIDFromJobNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobIDFromJobNameResponse.Merge(m, src)
}
func (m *GetJobIDFromJobNameResponse) XXX_Size() int {
	return xxx_messageInfo_GetJobIDFromJobNameResponse.Size(m)
}
func (m *GetJobIDFromJobNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobIDFromJobNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobIDFromJobNameResponse proto.InternalMessageInfo

func (m *GetJobIDFromJobNameResponse) GetJobId() []*peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

// Request message for JobService.GetWorkflowEvents
type GetWorkflowEventsRequest struct {
	// The job ID to look up the job.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The instance to get workflow events.
	InstanceId uint32 `protobuf:"varint,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Limits the number of workflow events.
	// If limit is 0, then all events are fetched.
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkflowEventsRequest) Reset()         { *m = GetWorkflowEventsRequest{} }
func (m *GetWorkflowEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowEventsRequest) ProtoMessage()    {}
func (*GetWorkflowEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{24}
}

func (m *GetWorkflowEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowEventsRequest.Unmarshal(m, b)
}
func (m *GetWorkflowEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowEventsRequest.Marshal(b, m, deterministic)
}
func (m *GetWorkflowEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowEventsRequest.Merge(m, src)
}
func (m *GetWorkflowEventsRequest) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowEventsRequest.Size(m)
}
func (m *GetWorkflowEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowEventsRequest proto.InternalMessageInfo

func (m *GetWorkflowEventsRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetWorkflowEventsRequest) GetInstanceId() uint32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *GetWorkflowEventsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Response message for JobService.GetWorkflowEvents
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type GetWorkflowEventsResponse struct {
	// Workflow events for the given workflow
	Events               []*stateless.WorkflowEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetWorkflowEventsResponse) Reset()         { *m = GetWorkflowEventsResponse{} }
func (m *GetWorkflowEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GetWorkflowEventsResponse) ProtoMessage()    {}
func (*GetWorkflowEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{25}
}

func (m *GetWorkflowEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkflowEventsResponse.Unmarshal(m, b)
}
func (m *GetWorkflowEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkflowEventsResponse.Marshal(b, m, deterministic)
}
func (m *GetWorkflowEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkflowEventsResponse.Merge(m, src)
}
func (m *GetWorkflowEventsResponse) XXX_Size() int {
	return xxx_messageInfo_GetWorkflowEventsResponse.Size(m)
}
func (m *GetWorkflowEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkflowEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkflowEventsResponse proto.InternalMessageInfo

func (m *GetWorkflowEventsResponse) GetEvents() []*stateless.WorkflowEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

// Request message for JobService.ListPods method.
type ListPodsRequest struct {
	// The job identifier of the pods to list.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The instance ID range of the pods to list. If unset, all pods
	// in the job will be returned.
	Range                *pod.InstanceIDRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListPodsRequest) Reset()         { *m = ListPodsRequest{} }
func (m *ListPodsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPodsRequest) ProtoMessage()    {}
func (*ListPodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{26}
}

func (m *ListPodsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPodsRequest.Unmarshal(m, b)
}
func (m *ListPodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPodsRequest.Marshal(b, m, deterministic)
}
func (m *ListPodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPodsRequest.Merge(m, src)
}
func (m *ListPodsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPodsRequest.Size(m)
}
func (m *ListPodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPodsRequest proto.InternalMessageInfo

func (m *ListPodsRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *ListPodsRequest) GetRange() *pod.InstanceIDRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// Response message for JobService.ListPods method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type ListPodsResponse struct {
	// Pod summary for all matching pods.
	Pods                 []*pod.PodSummary `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListPodsResponse) Reset()         { *m = ListPodsResponse{} }
func (m *ListPodsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPodsResponse) ProtoMessage()    {}
func (*ListPodsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{27}
}

func (m *ListPodsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPodsResponse.Unmarshal(m, b)
}
func (m *ListPodsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPodsResponse.Marshal(b, m, deterministic)
}
func (m *ListPodsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPodsResponse.Merge(m, src)
}
func (m *ListPodsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPodsResponse.Size(m)
}
func (m *ListPodsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPodsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPodsResponse proto.InternalMessageInfo

func (m *ListPodsResponse) GetPods() []*pod.PodSummary {
	if m != nil {
		return m.Pods
	}
	return nil
}

// Request message for JobService.QueryPods method.
type QueryPodsRequest struct {
	// The job identifier of the pods to query.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The spec of query criteria for the pods.
	Spec *pod.QuerySpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// The spec of how to do pagination for the query results.
	Pagination *query.PaginationSpec `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// If set to true, only return the pod status and not the configuration.
	SummaryOnly          bool     `protobuf:"varint,4,opt,name=summary_only,json=summaryOnly,proto3" json:"summary_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryPodsRequest) Reset()         { *m = QueryPodsRequest{} }
func (m *QueryPodsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPodsRequest) ProtoMessage()    {}
func (*QueryPodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{28}
}

func (m *QueryPodsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPodsRequest.Unmarshal(m, b)
}
func (m *QueryPodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPodsRequest.Marshal(b, m, deterministic)
}
func (m *QueryPodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPodsRequest.Merge(m, src)
}
func (m *QueryPodsRequest) XXX_Size() int {
	return xxx_messageInfo_QueryPodsRequest.Size(m)
}
func (m *QueryPodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPodsRequest proto.InternalMessageInfo

func (m *QueryPodsRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *QueryPodsRequest) GetSpec() *pod.QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QueryPodsRequest) GetPagination() *query.PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryPodsRequest) GetSummaryOnly() bool {
	if m != nil {
		return m.SummaryOnly
	}
	return false
}

// Response message for JobService.QueryPods method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type QueryPodsResponse struct {
	// List of pods that match the pod query criteria.
	Pods []*pod.PodInfo `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
	// Pagination result of the pod query.
	Pagination           *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *QueryPodsResponse) Reset()         { *m = QueryPodsResponse{} }
func (m *QueryPodsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPodsResponse) ProtoMessage()    {}
func (*QueryPodsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{29}
}

func (m *QueryPodsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPodsResponse.Unmarshal(m, b)
}
func (m *QueryPodsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPodsResponse.Marshal(b, m, deterministic)
}
func (m *QueryPodsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPodsResponse.Merge(m, src)
}
func (m *QueryPodsResponse) XXX_Size() int {
	return xxx_messageInfo_QueryPodsResponse.Size(m)
}
func (m *QueryPodsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPodsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPodsResponse proto.InternalMessageInfo

func (m *QueryPodsResponse) GetPods() []*pod.PodInfo {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *QueryPodsResponse) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Request message for JobService.QueryJobs method.
type QueryJobsRequest struct {
	// The spec of query criteria for the jobs.
	Spec                 *stateless.QuerySpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryJobsRequest) Reset()         { *m = QueryJobsRequest{} }
func (m *QueryJobsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryJobsRequest) ProtoMessage()    {}
func (*QueryJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{30}
}

func (m *QueryJobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobsRequest.Unmarshal(m, b)
}
func (m *QueryJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobsRequest.Marshal(b, m, deterministic)
}
func (m *QueryJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobsRequest.Merge(m, src)
}
func (m *QueryJobsRequest) XXX_Size() int {
	return xxx_messageInfo_QueryJobsRequest.Size(m)
}
func (m *QueryJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobsRequest proto.InternalMessageInfo

func (m *QueryJobsRequest) GetSpec() *stateless.QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Response message for JobService.QueryJobs method.
// Return errors:
//   INVALID_ARGUMENT:  if the resource pool path or job states are invalid.
type QueryJobsResponse struct {
	// List of jobs that match the job query criteria.
	Records []*stateless.JobSummary `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// Pagination result of the job query.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Return the spec of query criteria from the request.
	Spec                 *stateless.QuerySpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryJobsResponse) Reset()         { *m = QueryJobsResponse{} }
func (m *QueryJobsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryJobsResponse) ProtoMessage()    {}
func (*QueryJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{31}
}

func (m *QueryJobsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryJobsResponse.Unmarshal(m, b)
}
func (m *QueryJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryJobsResponse.Marshal(b, m, deterministic)
}
func (m *QueryJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryJobsResponse.Merge(m, src)
}
func (m *QueryJobsResponse) XXX_Size() int {
	return xxx_messageInfo_QueryJobsResponse.Size(m)
}
func (m *QueryJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryJobsResponse proto.InternalMessageInfo

func (m *QueryJobsResponse) GetRecords() []*stateless.JobSummary {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryJobsResponse) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryJobsResponse) GetSpec() *stateless.QuerySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Request message for JobService.ListJobWorkflows method.
type ListJobWorkflowsRequest struct {
	// The job identifier.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Limits the number of updates to list for a job.
	UpdatesLimit uint32 `protobuf:"varint,2,opt,name=updates_limit,json=updatesLimit,proto3" json:"updates_limit,omitempty"`
	// Flag to indicate whether to fetch instance workflow events
	// for that job update.
	InstanceEvents bool `protobuf:"varint,3,opt,name=instance_events,json=instanceEvents,proto3" json:"instance_events,omitempty"`
	// Limits the number of events per instance.
	// If limit is 0, then all events are fetched.
	InstanceEventsLimit  uint32   `protobuf:"varint,4,opt,name=instance_events_limit,json=instanceEventsLimit,proto3" json:"instance_events_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobWorkflowsRequest) Reset()         { *m = ListJobWorkflowsRequest{} }
func (m *ListJobWorkflowsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobWorkflowsRequest) ProtoMessage()    {}
func (*ListJobWorkflowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{32}
}

func (m *ListJobWorkflowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobWorkflowsRequest.Unmarshal(m, b)
}
func (m *ListJobWorkflowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobWorkflowsRequest.Marshal(b, m, deterministic)
}
func (m *ListJobWorkflowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobWorkflowsRequest.Merge(m, src)
}
func (m *ListJobWorkflowsRequest) XXX_Size() int {
	return xxx_messageInfo_ListJobWorkflowsRequest.Size(m)
}
func (m *ListJobWorkflowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobWorkflowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobWorkflowsRequest proto.InternalMessageInfo

func (m *ListJobWorkflowsRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *ListJobWorkflowsRequest) GetUpdatesLimit() uint32 {
	if m != nil {
		return m.UpdatesLimit
	}
	return 0
}

func (m *ListJobWorkflowsRequest) GetInstanceEvents() bool {
	if m != nil {
		return m.InstanceEvents
	}
	return false
}

func (m *ListJobWorkflowsRequest) GetInstanceEventsLimit() uint32 {
	if m != nil {
		return m.InstanceEventsLimit
	}
	return 0
}

// Response message for JobService.ListJobWorkflows method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type ListJobWorkflowsResponse struct {
	WorkflowInfos        []*stateless.WorkflowInfo `protobuf:"bytes,1,rep,name=workflow_infos,json=workflowInfos,proto3" json:"workflow_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListJobWorkflowsResponse) Reset()         { *m = ListJobWorkflowsResponse{} }
func (m *ListJobWorkflowsResponse) String() string { return proto.CompactTextString(m) }
func (*ListJobWorkflowsResponse) ProtoMessage()    {}
func (*ListJobWorkflowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{33}
}

func (m *ListJobWorkflowsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobWorkflowsResponse.Unmarshal(m, b)
}
func (m *ListJobWorkflowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobWorkflowsResponse.Marshal(b, m, deterministic)
}
func (m *ListJobWorkflowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobWorkflowsResponse.Merge(m, src)
}
func (m *ListJobWorkflowsResponse) XXX_Size() int {
	return xxx_messageInfo_ListJobWorkflowsResponse.Size(m)
}
func (m *ListJobWorkflowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobWorkflowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobWorkflowsResponse proto.InternalMessageInfo

func (m *ListJobWorkflowsResponse) GetWorkflowInfos() []*stateless.WorkflowInfo {
	if m != nil {
		return m.WorkflowInfos
	}
	return nil
}

// Request message for JobService.GetReplaceJobDiffRequest method.
type GetReplaceJobDiffRequest struct {
	// The job ID to be updated.
	JobId *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The current version of the job.
	Version *peloton.EntityVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The new job configuration to be applied.
	Spec                 *stateless.JobSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetReplaceJobDiffRequest) Reset()         { *m = GetReplaceJobDiffRequest{} }
func (m *GetReplaceJobDiffRequest) String() string { return proto.CompactTextString(m) }
func (*GetReplaceJobDiffRequest) ProtoMessage()    {}
func (*GetReplaceJobDiffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{34}
}

func (m *GetReplaceJobDiffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReplaceJobDiffRequest.Unmarshal(m, b)
}
func (m *GetReplaceJobDiffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReplaceJobDiffRequest.Marshal(b, m, deterministic)
}
func (m *GetReplaceJobDiffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplaceJobDiffRequest.Merge(m, src)
}
func (m *GetReplaceJobDiffRequest) XXX_Size() int {
	return xxx_messageInfo_GetReplaceJobDiffRequest.Size(m)
}
func (m *GetReplaceJobDiffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplaceJobDiffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplaceJobDiffRequest proto.InternalMessageInfo

func (m *GetReplaceJobDiffRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *GetReplaceJobDiffRequest) GetVersion() *peloton.EntityVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *GetReplaceJobDiffRequest) GetSpec() *stateless.JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Response message for JobService.GetReplaceJobDiff method.
// Return errors:
//   INVALID_ARGUMENT:  if the job ID or job config is invalid.
//   NOT_FOUND:         if the job ID is not found.
//   ABORTED:           if the job version is invalid.
type GetReplaceJobDiffResponse struct {
	// Instances which are being added
	InstancesAdded []*pod.InstanceIDRange `protobuf:"bytes,1,rep,name=instances_added,json=instancesAdded,proto3" json:"instances_added,omitempty"`
	// Instances which are being removed
	InstancesRemoved []*pod.InstanceIDRange `protobuf:"bytes,2,rep,name=instances_removed,json=instancesRemoved,proto3" json:"instances_removed,omitempty"`
	// Instances which are being updated
	InstancesUpdated []*pod.InstanceIDRange `protobuf:"bytes,3,rep,name=instances_updated,json=instancesUpdated,proto3" json:"instances_updated,omitempty"`
	// Instances which are unchanged
	InstancesUnchanged   []*pod.InstanceIDRange `protobuf:"bytes,4,rep,name=instances_unchanged,json=instancesUnchanged,proto3" json:"instances_unchanged,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetReplaceJobDiffResponse) Reset()         { *m = GetReplaceJobDiffResponse{} }
func (m *GetReplaceJobDiffResponse) String() string { return proto.CompactTextString(m) }
func (*GetReplaceJobDiffResponse) ProtoMessage()    {}
func (*GetReplaceJobDiffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{35}
}

func (m *GetReplaceJobDiffResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReplaceJobDiffResponse.Unmarshal(m, b)
}
func (m *GetReplaceJobDiffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReplaceJobDiffResponse.Marshal(b, m, deterministic)
}
func (m *GetReplaceJobDiffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplaceJobDiffResponse.Merge(m, src)
}
func (m *GetReplaceJobDiffResponse) XXX_Size() int {
	return xxx_messageInfo_GetReplaceJobDiffResponse.Size(m)
}
func (m *GetReplaceJobDiffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplaceJobDiffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplaceJobDiffResponse proto.InternalMessageInfo

func (m *GetReplaceJobDiffResponse) GetInstancesAdded() []*pod.InstanceIDRange {
	if m != nil {
		return m.InstancesAdded
	}
	return nil
}

func (m *GetReplaceJobDiffResponse) GetInstancesRemoved() []*pod.InstanceIDRange {
	if m != nil {
		return m.InstancesRemoved
	}
	return nil
}

func (m *GetReplaceJobDiffResponse) GetInstancesUpdated() []*pod.InstanceIDRange {
	if m != nil {
		return m.InstancesUpdated
	}
	return nil
}

func (m *GetReplaceJobDiffResponse) GetInstancesUnchanged() []*pod.InstanceIDRange {
	if m != nil {
		return m.InstancesUnchanged
	}
	return nil
}

// Request message for JobService.RefreshJob method.
type RefreshJobRequest struct {
	// The job ID to look up the job.
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RefreshJobRequest) Reset()         { *m = RefreshJobRequest{} }
func (m *RefreshJobRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshJobRequest) ProtoMessage()    {}
func (*RefreshJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{36}
}

func (m *RefreshJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshJobRequest.Unmarshal(m, b)
}
func (m *RefreshJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshJobRequest.Marshal(b, m, deterministic)
}
func (m *RefreshJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshJobRequest.Merge(m, src)
}
func (m *RefreshJobRequest) XXX_Size() int {
	return xxx_messageInfo_RefreshJobRequest.Size(m)
}
func (m *RefreshJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshJobRequest proto.InternalMessageInfo

func (m *RefreshJobRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

// Response message for JobService.RefreshJob method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type RefreshJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshJobResponse) Reset()         { *m = RefreshJobResponse{} }
func (m *RefreshJobResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshJobResponse) ProtoMessage()    {}
func (*RefreshJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{37}
}

func (m *RefreshJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefreshJobResponse.Unmarshal(m, b)
}
func (m *RefreshJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefreshJobResponse.Marshal(b, m, deterministic)
}
func (m *RefreshJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshJobResponse.Merge(m, src)
}
func (m *RefreshJobResponse) XXX_Size() int {
	return xxx_messageInfo_RefreshJobResponse.Size(m)
}
func (m *RefreshJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshJobResponse proto.InternalMessageInfo

// Request message for JobService.GetJobCache method.
type GetJobCacheRequest struct {
	// The job ID to look up the job.
	JobId                *peloton.JobID `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetJobCacheRequest) Reset()         { *m = GetJobCacheRequest{} }
func (m *GetJobCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobCacheRequest) ProtoMessage()    {}
func (*GetJobCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{38}
}

func (m *GetJobCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobCacheRequest.Unmarshal(m, b)
}
func (m *GetJobCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetJobCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobCacheRequest.Merge(m, src)
}
func (m *GetJobCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobCacheRequest.Size(m)
}
func (m *GetJobCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobCacheRequest proto.InternalMessageInfo

func (m *GetJobCacheRequest) GetJobId() *peloton.JobID {
	if m != nil {
		return m.JobId
	}
	return nil
}

// Response message for JobService.GetJobCache method.
// Return errors:
//   NOT_FOUND:         if the job ID is not found.
type GetJobCacheResponse struct {
	// The job configuration in cache of the matching job.
	Spec *stateless.JobSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// The job runtime in cache of the matching job.
	Status               *stateless.JobStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetJobCacheResponse) Reset()         { *m = GetJobCacheResponse{} }
func (m *GetJobCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetJobCacheResponse) ProtoMessage()    {}
func (*GetJobCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{39}
}

func (m *GetJobCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobCacheResponse.Unmarshal(m, b)
}
func (m *GetJobCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetJobCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobCacheResponse.Merge(m, src)
}
func (m *GetJobCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetJobCacheResponse.Size(m)
}
func (m *GetJobCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobCacheResponse proto.InternalMessageInfo

func (m *GetJobCacheResponse) GetSpec() *stateless.JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *GetJobCacheResponse) GetStatus() *stateless.JobStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Request message for JobService.ListJobs method.
type ListJobsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsRequest) Reset()         { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()    {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{40}
}

func (m *ListJobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobsRequest.Unmarshal(m, b)
}
func (m *ListJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobsRequest.Marshal(b, m, deterministic)
}
func (m *ListJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsRequest.Merge(m, src)
}
func (m *ListJobsRequest) XXX_Size() int {
	return xxx_messageInfo_ListJobsRequest.Size(m)
}
func (m *ListJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsRequest proto.InternalMessageInfo

// Response message for JobService.ListJobs method.
type ListJobsResponse struct {
	// List of all jobs.
	Jobs                 []*stateless.JobSummary `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ListJobsResponse) Reset()         { *m = ListJobsResponse{} }
func (m *ListJobsResponse) String() string { return proto.CompactTextString(m) }
func (*ListJobsResponse) ProtoMessage()    {}
func (*ListJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d3806a61f788527, []int{41}
}

func (m *ListJobsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobsResponse.Unmarshal(m, b)
}
func (m *ListJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobsResponse.Marshal(b, m, deterministic)
}
func (m *ListJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsResponse.Merge(m, src)
}
func (m *ListJobsResponse) XXX_Size() int {
	return xxx_messageInfo_ListJobsResponse.Size(m)
}
func (m *ListJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsResponse proto.InternalMessageInfo

func (m *ListJobsResponse) GetJobs() []*stateless.JobSummary {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.CreateJobRequest")
	proto.RegisterType((*CreateJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.CreateJobResponse")
	proto.RegisterType((*ReplaceJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.ReplaceJobRequest")
	proto.RegisterType((*ReplaceJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.ReplaceJobResponse")
	proto.RegisterType((*PatchJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.PatchJobRequest")
	proto.RegisterType((*PatchJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.PatchJobResponse")
	proto.RegisterType((*RestartJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.RestartJobRequest")
	proto.RegisterType((*RestartJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.RestartJobResponse")
	proto.RegisterType((*PauseJobWorkflowRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.PauseJobWorkflowRequest")
	proto.RegisterType((*PauseJobWorkflowResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.PauseJobWorkflowResponse")
	proto.RegisterType((*ResumeJobWorkflowRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.ResumeJobWorkflowRequest")
	proto.RegisterType((*ResumeJobWorkflowResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.ResumeJobWorkflowResponse")
	proto.RegisterType((*AbortJobWorkflowRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.AbortJobWorkflowRequest")
	proto.RegisterType((*AbortJobWorkflowResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.AbortJobWorkflowResponse")
	proto.RegisterType((*StartJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.StartJobRequest")
	proto.RegisterType((*StartJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.StartJobResponse")
	proto.RegisterType((*StopJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.StopJobRequest")
	proto.RegisterType((*StopJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.StopJobResponse")
	proto.RegisterType((*DeleteJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.DeleteJobRequest")
	proto.RegisterType((*DeleteJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.DeleteJobResponse")
	proto.RegisterType((*GetJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.GetJobRequest")
	proto.RegisterType((*GetJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.GetJobResponse")
	proto.RegisterType((*GetJobIDFromJobNameRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.GetJobIDFromJobNameRequest")
	proto.RegisterType((*GetJobIDFromJobNameResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.GetJobIDFromJobNameResponse")
	proto.RegisterType((*GetWorkflowEventsRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.GetWorkflowEventsRequest")
	proto.RegisterType((*GetWorkflowEventsResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.GetWorkflowEventsResponse")
	proto.RegisterType((*ListPodsRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.ListPodsRequest")
	proto.RegisterType((*ListPodsResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.ListPodsResponse")
	proto.RegisterType((*QueryPodsRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.QueryPodsRequest")
	proto.RegisterType((*QueryPodsResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.QueryPodsResponse")
	proto.RegisterType((*QueryJobsRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.QueryJobsRequest")
	proto.RegisterType((*QueryJobsResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.QueryJobsResponse")
	proto.RegisterType((*ListJobWorkflowsRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.ListJobWorkflowsRequest")
	proto.RegisterType((*ListJobWorkflowsResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.ListJobWorkflowsResponse")
	proto.RegisterType((*GetReplaceJobDiffRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.GetReplaceJobDiffRequest")
	proto.RegisterType((*GetReplaceJobDiffResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.GetReplaceJobDiffResponse")
	proto.RegisterType((*RefreshJobRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.RefreshJobRequest")
	proto.RegisterType((*RefreshJobResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.RefreshJobResponse")
	proto.RegisterType((*GetJobCacheRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.GetJobCacheRequest")
	proto.RegisterType((*GetJobCacheResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.GetJobCacheResponse")
	proto.RegisterType((*ListJobsRequest)(nil), "peloton.api.v1alpha.job.stateless.svc.ListJobsRequest")
	proto.RegisterType((*ListJobsResponse)(nil), "peloton.api.v1alpha.job.stateless.svc.ListJobsResponse")
}

func init() {
	proto.RegisterFile("peloton/api/v1alpha/job/stateless/svc/stateless_svc.proto", fileDescriptor_5d3806a61f788527)
}

var fileDescriptor_5d3806a61f788527 = []byte{
	// 1671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x5b, 0x6f, 0x1b, 0xc5,
	0x17, 0xd7, 0xc6, 0xb9, 0xf5, 0x38, 0x37, 0x4f, 0xfa, 0xff, 0xd7, 0x35, 0x0f, 0xb4, 0x5b, 0x45,
	0x2d, 0xa8, 0x75, 0xda, 0xd0, 0x36, 0x04, 0x89, 0xb6, 0x69, 0x1d, 0x52, 0x87, 0x2a, 0x4d, 0x37,
	0xbd, 0xd1, 0x17, 0xb3, 0xde, 0x1d, 0x37, 0x0e, 0xf6, 0xce, 0x76, 0x67, 0xed, 0x12, 0x55, 0x54,
	0x42, 0xe2, 0x91, 0x07, 0x6e, 0xe2, 0x05, 0xbe, 0x00, 0x42, 0x3c, 0x20, 0xe0, 0xab, 0xf0, 0xc2,
	0x2b, 0xf0, 0x05, 0x78, 0xe0, 0x15, 0xed, 0xcc, 0xec, 0x7a, 0x77, 0xbd, 0x0e, 0xb3, 0xce, 0x22,
	0x85, 0x8a, 0x87, 0x56, 0xde, 0xcd, 0x9c, 0x33, 0xe7, 0xf2, 0x9b, 0x33, 0xe7, 0xfc, 0x6c, 0x58,
	0xb1, 0x71, 0x8b, 0xb8, 0xc4, 0x5a, 0xd4, 0xed, 0xe6, 0x62, 0xf7, 0x82, 0xde, 0xb2, 0x77, 0xf4,
	0xc5, 0x5d, 0x52, 0x5f, 0xa4, 0xae, 0xee, 0xe2, 0x16, 0xa6, 0x74, 0x91, 0x76, 0x8d, 0xde, 0x53,
	0x8d, 0x76, 0x8d, 0xb2, 0xed, 0x10, 0x97, 0xa0, 0x05, 0x21, 0x5a, 0xd6, 0xed, 0x66, 0x59, 0x88,
	0x96, 0x77, 0x49, 0xbd, 0x1c, 0x2c, 0x2e, 0xd3, 0xae, 0x51, 0x3a, 0x99, 0xb4, 0x83, 0x2f, 0xca,
	0x34, 0x95, 0x16, 0x92, 0x96, 0x3c, 0xe9, 0x60, 0x67, 0x8f, 0xff, 0x2f, 0x96, 0x5d, 0x90, 0xb0,
	0x35, 0xd8, 0x9a, 0x8b, 0x24, 0x6f, 0x4e, 0x4c, 0xef, 0x1f, 0x5f, 0xa2, 0xfe, 0x3e, 0x02, 0x73,
	0x37, 0x1c, 0xac, 0xbb, 0x78, 0x83, 0xd4, 0x35, 0xfc, 0xa4, 0x83, 0xa9, 0x8b, 0x56, 0x60, 0x7c,
	0x97, 0xd4, 0x6b, 0x4d, 0xb3, 0xa8, 0x9c, 0x50, 0xce, 0xe4, 0x97, 0xd4, 0x72, 0x92, 0xb3, 0xfe,
	0xbb, 0x0d, 0x52, 0xaf, 0x56, 0xb4, 0xb1, 0x5d, 0x52, 0xaf, 0x9a, 0xe8, 0x0a, 0x8c, 0x52, 0x1b,
	0x1b, 0xc5, 0x11, 0x26, 0xf8, 0x6a, 0xf9, 0xef, 0xa3, 0xb4, 0x41, 0xea, 0xdb, 0x36, 0x36, 0x34,
	0x26, 0x87, 0xde, 0x84, 0x09, 0x8a, 0x0d, 0x07, 0xbb, 0xb4, 0x98, 0x3b, 0x91, 0x3b, 0x93, 0x5f,
	0x3a, 0xb5, 0xef, 0xde, 0xdb, 0x6c, 0xad, 0xe6, 0xcb, 0xa0, 0x4d, 0xc8, 0x1b, 0xcc, 0x9b, 0x1a,
	0xb3, 0x62, 0x94, 0x59, 0x71, 0x4e, 0xc2, 0x0a, 0x1e, 0x03, 0x66, 0x08, 0x18, 0xc1, 0x67, 0x74,
	0x13, 0xf2, 0xc4, 0xd6, 0x9f, 0x74, 0x70, 0xcd, 0xd4, 0x5d, 0xbd, 0x38, 0xc6, 0xf4, 0x9d, 0xde,
	0xd7, 0xa4, 0xdb, 0x6c, 0x7d, 0x45, 0x77, 0x75, 0x0d, 0x48, 0xf0, 0x59, 0xfd, 0x42, 0x81, 0x42,
	0x28, 0xd0, 0xd4, 0x26, 0x16, 0xc5, 0x07, 0x89, 0x74, 0x05, 0x26, 0xba, 0xd8, 0xa1, 0x4d, 0x62,
	0xed, 0x1b, 0x6c, 0xff, 0xdd, 0x9a, 0xe5, 0x36, 0xdd, 0xbd, 0xfb, 0x5c, 0x42, 0xf3, 0x45, 0xd5,
	0xef, 0x72, 0x50, 0xd0, 0xb0, 0xdd, 0xd2, 0x8d, 0x8c, 0x00, 0x90, 0x89, 0x59, 0x01, 0x8c, 0x72,
	0x07, 0x87, 0xd1, 0xe8, 0x70, 0x30, 0xea, 0xd8, 0x66, 0x00, 0xa3, 0x31, 0x69, 0x18, 0xdd, 0x63,
	0x52, 0x1c, 0x46, 0x9d, 0xe0, 0x73, 0x1c, 0x46, 0xe3, 0xc3, 0xc3, 0xe8, 0x11, 0xa0, 0x70, 0xba,
	0x04, 0x8c, 0x42, 0x41, 0x57, 0x86, 0xc7, 0xc2, 0xb7, 0x39, 0x98, 0xdd, 0xd2, 0x5d, 0x63, 0xe7,
	0x3f, 0x24, 0xfc, 0x0b, 0x90, 0xf0, 0x10, 0xe6, 0x7a, 0xc9, 0xca, 0x14, 0x07, 0xdf, 0x8f, 0x78,
	0x35, 0x81, 0xba, 0xba, 0xe3, 0x1e, 0x26, 0x24, 0xdc, 0x81, 0x29, 0x87, 0x5b, 0x55, 0x0b, 0x21,
	0xa2, 0x2c, 0x91, 0x0b, 0xe1, 0x0c, 0x4b, 0x46, 0xde, 0xe9, 0x3d, 0x64, 0x58, 0xde, 0xd9, 0xb9,
	0xec, 0x85, 0x2c, 0xd3, 0x7c, 0xfc, 0xaa, 0xc0, 0xb1, 0x2d, 0xbd, 0x43, 0xbd, 0x23, 0xff, 0x80,
	0x38, 0xef, 0x35, 0x5a, 0xe4, 0xe9, 0xa1, 0xc9, 0x4a, 0x2c, 0x84, 0xb9, 0xe1, 0x43, 0xf8, 0x2e,
	0x14, 0xfb, 0xbd, 0xcc, 0x34, 0x90, 0xbf, 0x29, 0x50, 0xd4, 0x30, 0xed, 0xb4, 0x5f, 0xf0, 0x48,
	0xea, 0x70, 0x3c, 0xc1, 0xcd, 0xcc, 0x31, 0xb9, 0x5a, 0x27, 0x0c, 0xee, 0x2f, 0x36, 0x26, 0xfb,
	0xbd, 0xcc, 0x34, 0x90, 0x9f, 0x29, 0x30, 0xbb, 0x7d, 0xc8, 0x4a, 0xad, 0x77, 0xb7, 0x6c, 0xff,
	0x33, 0xb5, 0xec, 0x53, 0x05, 0x66, 0xb6, 0x5d, 0x62, 0x1f, 0x26, 0x6f, 0x1f, 0x78, 0x19, 0x10,
	0x26, 0x65, 0xea, 0xec, 0x37, 0x0a, 0xcc, 0x55, 0x70, 0x0b, 0xbb, 0x87, 0xaa, 0xb7, 0x3e, 0x0a,
	0x63, 0x0d, 0xe2, 0x18, 0x98, 0x9d, 0x8b, 0x49, 0x8d, 0x3f, 0xa8, 0xf3, 0x50, 0x08, 0x99, 0xca,
	0xc3, 0xa0, 0xfe, 0xa0, 0xc0, 0xf4, 0x3a, 0x3e, 0x54, 0x5d, 0xc0, 0x49, 0x98, 0xa2, 0x9d, 0x76,
	0x5b, 0x77, 0xf6, 0x6a, 0xc4, 0x6a, 0xed, 0x09, 0x27, 0xf2, 0xe2, 0xdd, 0x6d, 0xab, 0xb5, 0xa7,
	0xfe, 0x34, 0x02, 0x33, 0xbe, 0xd5, 0x22, 0x9f, 0x6b, 0x30, 0xc9, 0xcc, 0xb6, 0x1a, 0x64, 0xdf,
	0x84, 0xf6, 0x75, 0x92, 0x55, 0xab, 0x41, 0xb4, 0x89, 0x5d, 0xfe, 0x01, 0xad, 0xc3, 0x84, 0xd8,
	0x48, 0xb8, 0x70, 0x4e, 0xb2, 0x1f, 0xe5, 0x42, 0x9a, 0x2f, 0x7d, 0xd0, 0x31, 0xf7, 0x2e, 0x4c,
	0x3f, 0x15, 0xe5, 0x88, 0xfb, 0xc4, 0x07, 0xdd, 0x45, 0x09, 0x6b, 0xfc, 0x32, 0xc6, 0x1c, 0x9b,
	0x7a, 0x1a, 0x7a, 0x52, 0x97, 0xa1, 0xc4, 0xc3, 0x56, 0xad, 0xbc, 0xe5, 0x90, 0xf6, 0x06, 0xa9,
	0x6f, 0xea, 0x6d, 0xec, 0x67, 0xfe, 0x38, 0x0f, 0xa1, 0xa5, 0xb7, 0x31, 0x0b, 0xe1, 0x11, 0x16,
	0x16, 0x6f, 0x85, 0xfa, 0x10, 0x5e, 0x4a, 0x14, 0x4c, 0x18, 0x72, 0x73, 0xa9, 0x30, 0xa3, 0x7e,
	0xac, 0x40, 0x71, 0x1d, 0xbb, 0xbe, 0xd1, 0x6b, 0x5d, 0x6c, 0xb9, 0x34, 0x03, 0x2c, 0xbe, 0x0c,
	0xf9, 0xa6, 0x45, 0x5d, 0xdd, 0x32, 0xb0, 0x27, 0xef, 0x25, 0x73, 0x5a, 0x03, 0xff, 0x55, 0xd5,
	0xf4, 0x0e, 0x49, 0xab, 0xd9, 0x6e, 0xba, 0x0c, 0x5f, 0xd3, 0x1a, 0x7f, 0x50, 0x31, 0x1c, 0x4f,
	0xb0, 0x46, 0xb8, 0x79, 0x13, 0xc6, 0x31, 0x7b, 0x23, 0xdc, 0x3c, 0x9f, 0x22, 0x1b, 0x4c, 0x95,
	0x26, 0xe4, 0x3d, 0xaf, 0x67, 0x6f, 0x35, 0xa9, 0xbb, 0x45, 0x4c, 0x9a, 0x09, 0x27, 0x33, 0xe6,
	0xe8, 0xd6, 0x63, 0x2c, 0x30, 0x7b, 0x26, 0x59, 0x92, 0x98, 0xe5, 0xaa, 0xef, 0x7f, 0x45, 0xf3,
	0xd6, 0x6b, 0x5c, 0x4c, 0x7d, 0x1b, 0xe6, 0x7a, 0xd6, 0x08, 0x67, 0x97, 0x61, 0xd4, 0x26, 0xa6,
	0xef, 0xea, 0xa9, 0x81, 0x2a, 0xb7, 0x88, 0xe9, 0x83, 0x9f, 0x09, 0xa8, 0x7f, 0x28, 0x30, 0x77,
	0xa7, 0x83, 0x9d, 0xbd, 0x8c, 0x9c, 0xbb, 0x1c, 0x21, 0x9c, 0xd4, 0x81, 0x86, 0xb0, 0x3d, 0x43,
	0x73, 0x61, 0x15, 0xc0, 0xd6, 0x1f, 0x37, 0x2d, 0xdd, 0xf5, 0x0a, 0x12, 0x6f, 0x11, 0x5e, 0x49,
	0x94, 0xe6, 0x24, 0xdc, 0x56, 0xb0, 0x98, 0xcf, 0x74, 0x3d, 0xe1, 0xbe, 0x92, 0x34, 0xda, 0x5f,
	0x92, 0x3e, 0x51, 0xa0, 0x10, 0xf2, 0x5a, 0x04, 0xf1, 0x62, 0x24, 0x88, 0x27, 0xf6, 0x0b, 0x22,
	0x3b, 0xae, 0x6c, 0x35, 0x5a, 0x8b, 0x58, 0xce, 0xfd, 0x5e, 0x90, 0xb2, 0x3c, 0x6c, 0xb5, 0x7a,
	0x57, 0xe4, 0x61, 0x83, 0xd4, 0x83, 0x3c, 0x5c, 0x13, 0xc1, 0xe4, 0x59, 0x38, 0x2b, 0x01, 0xe0,
	0x58, 0x58, 0xbd, 0x16, 0xbb, 0x10, 0x52, 0x2b, 0x1c, 0x5d, 0x87, 0x09, 0x07, 0x1b, 0xc4, 0x09,
	0x7c, 0x4d, 0x5b, 0x37, 0x85, 0x74, 0x46, 0xbe, 0x07, 0x7e, 0xe6, 0x86, 0xf6, 0xf3, 0x67, 0x05,
	0x8e, 0x79, 0x87, 0x22, 0xd4, 0x18, 0x66, 0x81, 0xe6, 0x53, 0x30, 0xcd, 0xc9, 0x02, 0x5a, 0xe3,
	0xe5, 0x87, 0x57, 0xa6, 0x29, 0xf1, 0xf2, 0x96, 0xf7, 0x0e, 0x9d, 0x86, 0xd9, 0xa0, 0x78, 0x89,
	0x8a, 0xc3, 0x6f, 0xc1, 0x19, 0xff, 0x35, 0xaf, 0x4c, 0x68, 0x09, 0xfe, 0x17, 0x5b, 0x28, 0xb4,
	0x8e, 0x32, 0xad, 0xf3, 0xd1, 0xe5, 0x4c, 0xb9, 0xea, 0x40, 0xb1, 0xdf, 0x2f, 0x91, 0xc6, 0xfb,
	0x30, 0x13, 0xb9, 0x76, 0xfc, 0x6c, 0xa6, 0xbe, 0x77, 0xa6, 0xc3, 0xf7, 0x0e, 0x55, 0x7f, 0xe1,
	0x55, 0xbe, 0x47, 0x6c, 0x55, 0x9a, 0x8d, 0xc6, 0x8b, 0xc2, 0x40, 0xa9, 0x7f, 0x8e, 0xb0, 0x5b,
	0x23, 0xee, 0x9d, 0x88, 0xe9, 0x9d, 0x5e, 0x32, 0x69, 0x4d, 0x37, 0x4d, 0xec, 0xdf, 0x92, 0xf2,
	0x65, 0x3a, 0x48, 0x3b, 0x5d, 0xf5, 0xe4, 0xd1, 0x3d, 0x28, 0xf4, 0x54, 0x3a, 0xb8, 0x4d, 0xba,
	0xd8, 0xbb, 0xe2, 0xd2, 0x29, 0x9d, 0x0b, 0x54, 0x68, 0x5c, 0x43, 0x54, 0x2d, 0x07, 0xa4, 0x29,
	0xba, 0x97, 0x61, 0xd4, 0x72, 0x82, 0xcc, 0x44, 0xef, 0xc0, 0x7c, 0x48, 0xad, 0x65, 0xec, 0x78,
	0xeb, 0x4c, 0x41, 0xd6, 0xc9, 0x2b, 0x46, 0x3d, 0xc5, 0xbe, 0x0e, 0x75, 0x13, 0x0a, 0x1a, 0x6e,
	0x38, 0x98, 0x66, 0xc3, 0x68, 0xaa, 0x47, 0x01, 0x85, 0xf5, 0x89, 0x26, 0xf9, 0x36, 0x20, 0xde,
	0xfd, 0xdc, 0xd0, 0x8d, 0x1d, 0x9c, 0xc1, 0x36, 0x5f, 0x29, 0x30, 0x1f, 0xd1, 0x28, 0xa0, 0x72,
	0x25, 0x52, 0x9d, 0xd3, 0x53, 0xa1, 0x15, 0x18, 0xf7, 0xfe, 0xd4, 0xa1, 0xe2, 0x34, 0x9c, 0x95,
	0xd4, 0xc0, 0x64, 0x34, 0x21, 0xab, 0x16, 0x78, 0x6f, 0x12, 0xba, 0x36, 0xd4, 0x7b, 0xbc, 0x41,
	0x88, 0x94, 0xfc, 0x55, 0x18, 0xdd, 0x25, 0xf5, 0x21, 0xeb, 0x3d, 0x13, 0x5d, 0xfa, 0xf1, 0xff,
	0x00, 0xde, 0x4b, 0xec, 0x74, 0x9b, 0x06, 0x46, 0xcf, 0xe1, 0x48, 0xf0, 0x05, 0x0a, 0x5a, 0x2e,
	0x4b, 0x7d, 0xff, 0x56, 0x8e, 0x7f, 0xb7, 0x55, 0x7a, 0x3d, 0xbd, 0xa0, 0xf0, 0xe8, 0x43, 0x05,
	0xa0, 0x77, 0x88, 0x91, 0xac, 0xa2, 0xbe, 0x6f, 0x57, 0x4a, 0x2b, 0x43, 0x48, 0x0a, 0x1b, 0x9e,
	0xc1, 0xa4, 0x4f, 0xfa, 0xa2, 0xcb, 0x92, 0x6a, 0x62, 0x94, 0x7e, 0x69, 0x39, 0xb5, 0x5c, 0x24,
	0x00, 0x3e, 0xc9, 0x99, 0x22, 0x00, 0x31, 0x2a, 0x39, 0x45, 0x00, 0xfa, 0x18, 0xd5, 0xcf, 0x15,
	0x98, 0x8b, 0xb3, 0x84, 0xe8, 0x8a, 0xb4, 0x47, 0x89, 0x24, 0x6a, 0xe9, 0xea, 0xd0, 0xf2, 0xc2,
	0xaa, 0x2f, 0x15, 0xc6, 0x98, 0x47, 0x19, 0x37, 0x74, 0x55, 0xde, 0xcd, 0x44, 0x4a, 0xb2, 0x74,
	0x6d, 0x78, 0x05, 0xa1, 0x70, 0xc5, 0x09, 0x2c, 0xe9, 0x70, 0x0d, 0xe0, 0xf7, 0xa4, 0xc3, 0x35,
	0x90, 0x39, 0x7b, 0x06, 0x93, 0x3e, 0xbd, 0x24, 0x8d, 0xe2, 0x18, 0x47, 0x26, 0x8d, 0xe2, 0x3e,
	0x1e, 0xeb, 0x7d, 0x98, 0x10, 0x6c, 0x0f, 0xba, 0x24, 0xad, 0x23, 0x4c, 0x58, 0x95, 0x2e, 0xa7,
	0x15, 0x13, 0x3b, 0x3f, 0x87, 0x23, 0x01, 0xc5, 0x22, 0x5d, 0xc0, 0xe2, 0xfc, 0x91, 0x74, 0x01,
	0xeb, 0x63, 0x73, 0x50, 0x07, 0xc6, 0xf9, 0xb5, 0x82, 0x2e, 0x4a, 0xea, 0x88, 0x70, 0x3f, 0xa5,
	0x4b, 0x29, 0xa5, 0xc4, 0xb6, 0x5f, 0x07, 0xd7, 0x59, 0x84, 0x1e, 0x40, 0xab, 0xa9, 0xd4, 0x25,
	0x71, 0x12, 0xa5, 0xeb, 0x07, 0x51, 0x11, 0x3a, 0xbb, 0x7d, 0x43, 0xbd, 0xf4, 0xd9, 0x1d, 0x44,
	0x4e, 0x48, 0x9f, 0xdd, 0xc1, 0x7c, 0xc2, 0x07, 0x30, 0xe9, 0x8f, 0xdd, 0xd2, 0xa7, 0x24, 0xc6,
	0x1a, 0x48, 0x9f, 0x92, 0xf8, 0x7c, 0x7f, 0x5e, 0xf1, 0xd0, 0x1a, 0x4c, 0xac, 0xd2, 0x68, 0x8d,
	0x4f, 0xf6, 0xd2, 0x68, 0xed, 0x1f, 0x8e, 0xfd, 0xfd, 0xbd, 0xae, 0x22, 0xdd, 0xfe, 0xa1, 0xd6,
	0x24, 0xdd, 0xfe, 0x91, 0x06, 0x46, 0x84, 0x9f, 0x6d, 0x9f, 0x26, 0xfc, 0xe1, 0xdd, 0x97, 0x53,
	0xcb, 0x05, 0xe1, 0xf7, 0x2a, 0x77, 0x7c, 0x10, 0x93, 0xae, 0xdc, 0x03, 0x26, 0x53, 0xe9, 0xca,
	0x3d, 0x70, 0x02, 0x14, 0x87, 0x25, 0x3a, 0xcb, 0xa4, 0x39, 0x2c, 0x89, 0x33, 0x5e, 0x9a, 0xc3,
	0x32, 0x60, 0x8c, 0xe2, 0xbd, 0x89, 0xdf, 0x9b, 0xa7, 0xe8, 0x4d, 0x62, 0xe3, 0x41, 0x8a, 0xde,
	0x24, 0x3e, 0x08, 0xa0, 0x8f, 0x14, 0xc8, 0x87, 0xfa, 0x76, 0xb4, 0x92, 0xaa, 0x3a, 0x85, 0xa7,
	0x87, 0xd2, 0x1b, 0xc3, 0x88, 0x72, 0x33, 0xae, 0x6f, 0x82, 0xdc, 0x6f, 0xd3, 0x1e, 0x2d, 0x48,
	0xfd, 0xfa, 0xad, 0x3e, 0xce, 0x7e, 0x29, 0xf6, 0xda, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xab,
	0xf9, 0x74, 0xdc, 0x2d, 0x27, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobServiceClient interface {
	// Create a new job with the given configuration.
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	// Replace the configuration of an existing job with the new configuration.
	// The caller is expected to provide the entire job configuration including
	// the fields which are unchanged.
	ReplaceJob(ctx context.Context, in *ReplaceJobRequest, opts ...grpc.CallOption) (*ReplaceJobResponse, error)
	// Patch the configuration of an existing job. The caller is not expected
	// to provide all the configuration fields and can provide only
	// subset (e.g. provide only the fields which have changed).
	// This is not supported yet.
	PatchJob(ctx context.Context, in *PatchJobRequest, opts ...grpc.CallOption) (*PatchJobResponse, error)
	// Restart the pods specified in the request.
	RestartJob(ctx context.Context, in *RestartJobRequest, opts ...grpc.CallOption) (*RestartJobResponse, error)
	// Pause the current running workflow.
	// If there is no current running workflow, or the current
	// workflow is already paused, then the method is a no-op.
	PauseJobWorkflow(ctx context.Context, in *PauseJobWorkflowRequest, opts ...grpc.CallOption) (*PauseJobWorkflowResponse, error)
	// Resume the current running workflow.
	// If there is no current running workflow, or the current
	// workflow is not paused, then the method is a no-op.
	ResumeJobWorkflow(ctx context.Context, in *ResumeJobWorkflowRequest, opts ...grpc.CallOption) (*ResumeJobWorkflowResponse, error)
	// Abort the current running workflow.
	// If there is no current running workflow, then the method is a no-op.
	AbortJobWorkflow(ctx context.Context, in *AbortJobWorkflowRequest, opts ...grpc.CallOption) (*AbortJobWorkflowResponse, error)
	// Start the pods specified in the request.
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	// Stop the pods specified in the request.
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error)
	// Delete a job and all related state.
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	// Get the configuration and runtime status of a job.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	// Get the job UUID from job name.
	GetJobIDFromJobName(ctx context.Context, in *GetJobIDFromJobNameRequest, opts ...grpc.CallOption) (*GetJobIDFromJobNameResponse, error)
	// Get the events of the current / last completed workflow of a job
	GetWorkflowEvents(ctx context.Context, in *GetWorkflowEventsRequest, opts ...grpc.CallOption) (*GetWorkflowEventsResponse, error)
	// List all pods in a job for a given range of pod IDs.
	ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (JobService_ListPodsClient, error)
	// Query pod info in a job using a set of filters.
	QueryPods(ctx context.Context, in *QueryPodsRequest, opts ...grpc.CallOption) (*QueryPodsResponse, error)
	// Query the jobs using a set of filters.
	// TODO find the appropriate service to put this method in.
	QueryJobs(ctx context.Context, in *QueryJobsRequest, opts ...grpc.CallOption) (*QueryJobsResponse, error)
	// Get summary for all jobs. Results are streamed back to the caller
	// in batches and the stream is closed once all results have been sent.
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (JobService_ListJobsClient, error)
	// List all workflows (including current and previously completed) for a given job.
	// Optional parameters to limit the number of updates to list and whether to include
	// instance workflow events can be set. Default is to list of all the updates and
	// do not to fetch instance workflow events.
	ListJobWorkflows(ctx context.Context, in *ListJobWorkflowsRequest, opts ...grpc.CallOption) (*ListJobWorkflowsResponse, error)
	// Get the list of instances which will be added/removed/updated if
	// the given job specification is applied via the ReplaceJob API.
	GetReplaceJobDiff(ctx context.Context, in *GetReplaceJobDiffRequest, opts ...grpc.CallOption) (*GetReplaceJobDiffResponse, error)
	// Allows user to load job runtime status from the database
	// and re-execute the action associated with current state.
	RefreshJob(ctx context.Context, in *RefreshJobRequest, opts ...grpc.CallOption) (*RefreshJobResponse, error)
	// Get the job state in the cache.
	GetJobCache(ctx context.Context, in *GetJobCacheRequest, opts ...grpc.CallOption) (*GetJobCacheResponse, error)
}

type jobServiceClient struct {
	cc *grpc.ClientConn
}

func NewJobServiceClient(cc *grpc.ClientConn) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ReplaceJob(ctx context.Context, in *ReplaceJobRequest, opts ...grpc.CallOption) (*ReplaceJobResponse, error) {
	out := new(ReplaceJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/ReplaceJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) PatchJob(ctx context.Context, in *PatchJobRequest, opts ...grpc.CallOption) (*PatchJobResponse, error) {
	out := new(PatchJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/PatchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) RestartJob(ctx context.Context, in *RestartJobRequest, opts ...grpc.CallOption) (*RestartJobResponse, error) {
	out := new(RestartJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/RestartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) PauseJobWorkflow(ctx context.Context, in *PauseJobWorkflowRequest, opts ...grpc.CallOption) (*PauseJobWorkflowResponse, error) {
	out := new(PauseJobWorkflowResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/PauseJobWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ResumeJobWorkflow(ctx context.Context, in *ResumeJobWorkflowRequest, opts ...grpc.CallOption) (*ResumeJobWorkflowResponse, error) {
	out := new(ResumeJobWorkflowResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/ResumeJobWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) AbortJobWorkflow(ctx context.Context, in *AbortJobWorkflowRequest, opts ...grpc.CallOption) (*AbortJobWorkflowResponse, error) {
	out := new(AbortJobWorkflowResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/AbortJobWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error) {
	out := new(StopJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobIDFromJobName(ctx context.Context, in *GetJobIDFromJobNameRequest, opts ...grpc.CallOption) (*GetJobIDFromJobNameResponse, error) {
	out := new(GetJobIDFromJobNameResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/GetJobIDFromJobName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetWorkflowEvents(ctx context.Context, in *GetWorkflowEventsRequest, opts ...grpc.CallOption) (*GetWorkflowEventsResponse, error) {
	out := new(GetWorkflowEventsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/GetWorkflowEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (JobService_ListPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobService_serviceDesc.Streams[0], "/peloton.api.v1alpha.job.stateless.svc.JobService/ListPods", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceListPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_ListPodsClient interface {
	Recv() (*ListPodsResponse, error)
	grpc.ClientStream
}

type jobServiceListPodsClient struct {
	grpc.ClientStream
}

func (x *jobServiceListPodsClient) Recv() (*ListPodsResponse, error) {
	m := new(ListPodsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) QueryPods(ctx context.Context, in *QueryPodsRequest, opts ...grpc.CallOption) (*QueryPodsResponse, error) {
	out := new(QueryPodsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/QueryPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) QueryJobs(ctx context.Context, in *QueryJobsRequest, opts ...grpc.CallOption) (*QueryJobsResponse, error) {
	out := new(QueryJobsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/QueryJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (JobService_ListJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobService_serviceDesc.Streams[1], "/peloton.api.v1alpha.job.stateless.svc.JobService/ListJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceListJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_ListJobsClient interface {
	Recv() (*ListJobsResponse, error)
	grpc.ClientStream
}

type jobServiceListJobsClient struct {
	grpc.ClientStream
}

func (x *jobServiceListJobsClient) Recv() (*ListJobsResponse, error) {
	m := new(ListJobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) ListJobWorkflows(ctx context.Context, in *ListJobWorkflowsRequest, opts ...grpc.CallOption) (*ListJobWorkflowsResponse, error) {
	out := new(ListJobWorkflowsResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/ListJobWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetReplaceJobDiff(ctx context.Context, in *GetReplaceJobDiffRequest, opts ...grpc.CallOption) (*GetReplaceJobDiffResponse, error) {
	out := new(GetReplaceJobDiffResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/GetReplaceJobDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) RefreshJob(ctx context.Context, in *RefreshJobRequest, opts ...grpc.CallOption) (*RefreshJobResponse, error) {
	out := new(RefreshJobResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/RefreshJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobCache(ctx context.Context, in *GetJobCacheRequest, opts ...grpc.CallOption) (*GetJobCacheResponse, error) {
	out := new(GetJobCacheResponse)
	err := c.cc.Invoke(ctx, "/peloton.api.v1alpha.job.stateless.svc.JobService/GetJobCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
type JobServiceServer interface {
	// Create a new job with the given configuration.
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	// Replace the configuration of an existing job with the new configuration.
	// The caller is expected to provide the entire job configuration including
	// the fields which are unchanged.
	ReplaceJob(context.Context, *ReplaceJobRequest) (*ReplaceJobResponse, error)
	// Patch the configuration of an existing job. The caller is not expected
	// to provide all the configuration fields and can provide only
	// subset (e.g. provide only the fields which have changed).
	// This is not supported yet.
	PatchJob(context.Context, *PatchJobRequest) (*PatchJobResponse, error)
	// Restart the pods specified in the request.
	RestartJob(context.Context, *RestartJobRequest) (*RestartJobResponse, error)
	// Pause the current running workflow.
	// If there is no current running workflow, or the current
	// workflow is already paused, then the method is a no-op.
	PauseJobWorkflow(context.Context, *PauseJobWorkflowRequest) (*PauseJobWorkflowResponse, error)
	// Resume the current running workflow.
	// If there is no current running workflow, or the current
	// workflow is not paused, then the method is a no-op.
	ResumeJobWorkflow(context.Context, *ResumeJobWorkflowRequest) (*ResumeJobWorkflowResponse, error)
	// Abort the current running workflow.
	// If there is no current running workflow, then the method is a no-op.
	AbortJobWorkflow(context.Context, *AbortJobWorkflowRequest) (*AbortJobWorkflowResponse, error)
	// Start the pods specified in the request.
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	// Stop the pods specified in the request.
	StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error)
	// Delete a job and all related state.
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	// Get the configuration and runtime status of a job.
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	// Get the job UUID from job name.
	GetJobIDFromJobName(context.Context, *GetJobIDFromJobNameRequest) (*GetJobIDFromJobNameResponse, error)
	// Get the events of the current / last completed workflow of a job
	GetWorkflowEvents(context.Context, *GetWorkflowEventsRequest) (*GetWorkflowEventsResponse, error)
	// List all pods in a job for a given range of pod IDs.
	ListPods(*ListPodsRequest, JobService_ListPodsServer) error
	// Query pod info in a job using a set of filters.
	QueryPods(context.Context, *QueryPodsRequest) (*QueryPodsResponse, error)
	// Query the jobs using a set of filters.
	// TODO find the appropriate service to put this method in.
	QueryJobs(context.Context, *QueryJobsRequest) (*QueryJobsResponse, error)
	// Get summary for all jobs. Results are streamed back to the caller
	// in batches and the stream is closed once all results have been sent.
	ListJobs(*ListJobsRequest, JobService_ListJobsServer) error
	// List all workflows (including current and previously completed) for a given job.
	// Optional parameters to limit the number of updates to list and whether to include
	// instance workflow events can be set. Default is to list of all the updates and
	// do not to fetch instance workflow events.
	ListJobWorkflows(context.Context, *ListJobWorkflowsRequest) (*ListJobWorkflowsResponse, error)
	// Get the list of instances which will be added/removed/updated if
	// the given job specification is applied via the ReplaceJob API.
	GetReplaceJobDiff(context.Context, *GetReplaceJobDiffRequest) (*GetReplaceJobDiffResponse, error)
	// Allows user to load job runtime status from the database
	// and re-execute the action associated with current state.
	RefreshJob(context.Context, *RefreshJobRequest) (*RefreshJobResponse, error)
	// Get the job state in the cache.
	GetJobCache(context.Context, *GetJobCacheRequest) (*GetJobCacheResponse, error)
}

func RegisterJobServiceServer(s *grpc.Server, srv JobServiceServer) {
	s.RegisterService(&_JobService_serviceDesc, srv)
}

func _JobService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ReplaceJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ReplaceJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/ReplaceJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ReplaceJob(ctx, req.(*ReplaceJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_PatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).PatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/PatchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).PatchJob(ctx, req.(*PatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_RestartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).RestartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/RestartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).RestartJob(ctx, req.(*RestartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_PauseJobWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseJobWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).PauseJobWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/PauseJobWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).PauseJobWorkflow(ctx, req.(*PauseJobWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ResumeJobWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeJobWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ResumeJobWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/ResumeJobWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ResumeJobWorkflow(ctx, req.(*ResumeJobWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_AbortJobWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortJobWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).AbortJobWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/AbortJobWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).AbortJobWorkflow(ctx, req.(*AbortJobWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobIDFromJobName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobIDFromJobNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobIDFromJobName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/GetJobIDFromJobName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobIDFromJobName(ctx, req.(*GetJobIDFromJobNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetWorkflowEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetWorkflowEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/GetWorkflowEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetWorkflowEvents(ctx, req.(*GetWorkflowEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPodsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).ListPods(m, &jobServiceListPodsServer{stream})
}

type JobService_ListPodsServer interface {
	Send(*ListPodsResponse) error
	grpc.ServerStream
}

type jobServiceListPodsServer struct {
	grpc.ServerStream
}

func (x *jobServiceListPodsServer) Send(m *ListPodsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _JobService_QueryPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).QueryPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/QueryPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).QueryPods(ctx, req.(*QueryPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_QueryJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).QueryJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/QueryJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).QueryJobs(ctx, req.(*QueryJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).ListJobs(m, &jobServiceListJobsServer{stream})
}

type JobService_ListJobsServer interface {
	Send(*ListJobsResponse) error
	grpc.ServerStream
}

type jobServiceListJobsServer struct {
	grpc.ServerStream
}

func (x *jobServiceListJobsServer) Send(m *ListJobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _JobService_ListJobWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListJobWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/ListJobWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListJobWorkflows(ctx, req.(*ListJobWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetReplaceJobDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplaceJobDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetReplaceJobDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/GetReplaceJobDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetReplaceJobDiff(ctx, req.(*GetReplaceJobDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_RefreshJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).RefreshJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/RefreshJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).RefreshJob(ctx, req.(*RefreshJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peloton.api.v1alpha.job.stateless.svc.JobService/GetJobCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobCache(ctx, req.(*GetJobCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peloton.api.v1alpha.job.stateless.svc.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobService_CreateJob_Handler,
		},
		{
			MethodName: "ReplaceJob",
			Handler:    _JobService_ReplaceJob_Handler,
		},
		{
			MethodName: "PatchJob",
			Handler:    _JobService_PatchJob_Handler,
		},
		{
			MethodName: "RestartJob",
			Handler:    _JobService_RestartJob_Handler,
		},
		{
			MethodName: "PauseJobWorkflow",
			Handler:    _JobService_PauseJobWorkflow_Handler,
		},
		{
			MethodName: "ResumeJobWorkflow",
			Handler:    _JobService_ResumeJobWorkflow_Handler,
		},
		{
			MethodName: "AbortJobWorkflow",
			Handler:    _JobService_AbortJobWorkflow_Handler,
		},
		{
			MethodName: "StartJob",
			Handler:    _JobService_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobService_StopJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobService_DeleteJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobService_GetJob_Handler,
		},
		{
			MethodName: "GetJobIDFromJobName",
			Handler:    _JobService_GetJobIDFromJobName_Handler,
		},
		{
			MethodName: "GetWorkflowEvents",
			Handler:    _JobService_GetWorkflowEvents_Handler,
		},
		{
			MethodName: "QueryPods",
			Handler:    _JobService_QueryPods_Handler,
		},
		{
			MethodName: "QueryJobs",
			Handler:    _JobService_QueryJobs_Handler,
		},
		{
			MethodName: "ListJobWorkflows",
			Handler:    _JobService_ListJobWorkflows_Handler,
		},
		{
			MethodName: "GetReplaceJobDiff",
			Handler:    _JobService_GetReplaceJobDiff_Handler,
		},
		{
			MethodName: "RefreshJob",
			Handler:    _JobService_RefreshJob_Handler,
		},
		{
			MethodName: "GetJobCache",
			Handler:    _JobService_GetJobCache_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPods",
			Handler:       _JobService_ListPods_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListJobs",
			Handler:       _JobService_ListJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peloton/api/v1alpha/job/stateless/svc/stateless_svc.proto",
}
