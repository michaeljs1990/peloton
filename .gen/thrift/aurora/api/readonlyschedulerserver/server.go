// Code generated by thriftrw-plugin-yarpc
// @generated

package readonlyschedulerserver

import (
	context "context"
	api "github.com/uber/peloton/.gen/thrift/aurora/api"
	wire "go.uber.org/thriftrw/wire"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
)

// Interface is the server-side interface for the ReadOnlyScheduler service.
type Interface interface {
	GetConfigSummary(
		ctx context.Context,
		Job *api.JobKey,
	) (*api.Response, error)

	GetJobSummary(
		ctx context.Context,
		Role *string,
	) (*api.Response, error)

	GetJobUpdateDetails(
		ctx context.Context,
		Key *api.JobUpdateKey,
		Query *api.JobUpdateQuery,
	) (*api.Response, error)

	GetJobUpdateDiff(
		ctx context.Context,
		Request *api.JobUpdateRequest,
	) (*api.Response, error)

	GetJobUpdateSummaries(
		ctx context.Context,
		JobUpdateQuery *api.JobUpdateQuery,
	) (*api.Response, error)

	GetJobs(
		ctx context.Context,
		OwnerRole *string,
	) (*api.Response, error)

	GetPendingReason(
		ctx context.Context,
		Query *api.TaskQuery,
	) (*api.Response, error)

	GetQuota(
		ctx context.Context,
		OwnerRole *string,
	) (*api.Response, error)

	GetRoleSummary(
		ctx context.Context,
	) (*api.Response, error)

	GetTasksStatus(
		ctx context.Context,
		Query *api.TaskQuery,
	) (*api.Response, error)

	GetTasksWithoutConfigs(
		ctx context.Context,
		Query *api.TaskQuery,
	) (*api.Response, error)

	GetTierConfigs(
		ctx context.Context,
	) (*api.Response, error)

	PopulateJobConfig(
		ctx context.Context,
		Description *api.JobConfiguration,
	) (*api.Response, error)
}

// New prepares an implementation of the ReadOnlyScheduler service for
// registration.
//
// 	handler := ReadOnlySchedulerHandler{}
// 	dispatcher.Register(readonlyschedulerserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "ReadOnlyScheduler",
		Methods: []thrift.Method{

			thrift.Method{
				Name: "getConfigSummary",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetConfigSummary),
				},
				Signature:    "GetConfigSummary(Job *api.JobKey) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getJobSummary",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetJobSummary),
				},
				Signature:    "GetJobSummary(Role *string) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getJobUpdateDetails",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetJobUpdateDetails),
				},
				Signature:    "GetJobUpdateDetails(Key *api.JobUpdateKey, Query *api.JobUpdateQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getJobUpdateDiff",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetJobUpdateDiff),
				},
				Signature:    "GetJobUpdateDiff(Request *api.JobUpdateRequest) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getJobUpdateSummaries",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetJobUpdateSummaries),
				},
				Signature:    "GetJobUpdateSummaries(JobUpdateQuery *api.JobUpdateQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getJobs",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetJobs),
				},
				Signature:    "GetJobs(OwnerRole *string) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getPendingReason",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetPendingReason),
				},
				Signature:    "GetPendingReason(Query *api.TaskQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getQuota",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetQuota),
				},
				Signature:    "GetQuota(OwnerRole *string) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getRoleSummary",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetRoleSummary),
				},
				Signature:    "GetRoleSummary() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getTasksStatus",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetTasksStatus),
				},
				Signature:    "GetTasksStatus(Query *api.TaskQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getTasksWithoutConfigs",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetTasksWithoutConfigs),
				},
				Signature:    "GetTasksWithoutConfigs(Query *api.TaskQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "getTierConfigs",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.GetTierConfigs),
				},
				Signature:    "GetTierConfigs() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "populateJobConfig",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.PopulateJobConfig),
				},
				Signature:    "PopulateJobConfig(Description *api.JobConfiguration) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},
		},
	}

	procedures := make([]transport.Procedure, 0, 13)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

func (h handler) GetConfigSummary(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetConfigSummary_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetConfigSummary(ctx, args.Job)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetConfigSummary_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetJobSummary(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetJobSummary_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetJobSummary(ctx, args.Role)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetJobSummary_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetJobUpdateDetails(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetJobUpdateDetails_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetJobUpdateDetails(ctx, args.Key, args.Query)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetJobUpdateDetails_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetJobUpdateDiff(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetJobUpdateDiff_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetJobUpdateDiff(ctx, args.Request)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetJobUpdateDiff_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetJobUpdateSummaries(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetJobUpdateSummaries_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetJobUpdateSummaries(ctx, args.JobUpdateQuery)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetJobUpdateSummaries_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetJobs(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetJobs_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetJobs(ctx, args.OwnerRole)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetJobs_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetPendingReason(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetPendingReason_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetPendingReason(ctx, args.Query)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetPendingReason_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetQuota(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetQuota_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetQuota(ctx, args.OwnerRole)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetQuota_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetRoleSummary(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetRoleSummary_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetRoleSummary(ctx)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetRoleSummary_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetTasksStatus(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetTasksStatus_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetTasksStatus(ctx, args.Query)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetTasksStatus_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetTasksWithoutConfigs(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetTasksWithoutConfigs_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetTasksWithoutConfigs(ctx, args.Query)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetTasksWithoutConfigs_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) GetTierConfigs(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_GetTierConfigs_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.GetTierConfigs(ctx)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_GetTierConfigs_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) PopulateJobConfig(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.ReadOnlyScheduler_PopulateJobConfig_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.PopulateJobConfig(ctx, args.Description)

	hadError := err != nil
	result, err := api.ReadOnlyScheduler_PopulateJobConfig_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}
