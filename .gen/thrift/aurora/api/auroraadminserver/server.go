// Code generated by thriftrw-plugin-yarpc
// @generated

package auroraadminserver

import (
	context "context"
	api "github.com/uber/peloton/.gen/thrift/aurora/api"
	auroraschedulermanagerserver "github.com/uber/peloton/.gen/thrift/aurora/api/auroraschedulermanagerserver"
	wire "go.uber.org/thriftrw/wire"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
)

// Interface is the server-side interface for the AuroraAdmin service.
type Interface interface {
	auroraschedulermanagerserver.Interface

	CommitRecovery(
		ctx context.Context,
	) (*api.Response, error)

	DeleteRecoveryTasks(
		ctx context.Context,
		Query *api.TaskQuery,
	) (*api.Response, error)

	DrainHosts(
		ctx context.Context,
		Hosts *api.Hosts,
	) (*api.Response, error)

	EndMaintenance(
		ctx context.Context,
		Hosts *api.Hosts,
	) (*api.Response, error)

	ForceTaskState(
		ctx context.Context,
		TaskId *string,
		Status *api.ScheduleStatus,
	) (*api.Response, error)

	ListBackups(
		ctx context.Context,
	) (*api.Response, error)

	MaintenanceStatus(
		ctx context.Context,
		Hosts *api.Hosts,
	) (*api.Response, error)

	PerformBackup(
		ctx context.Context,
	) (*api.Response, error)

	PruneTasks(
		ctx context.Context,
		Query *api.TaskQuery,
	) (*api.Response, error)

	QueryRecovery(
		ctx context.Context,
		Query *api.TaskQuery,
	) (*api.Response, error)

	SetQuota(
		ctx context.Context,
		OwnerRole *string,
		Quota *api.ResourceAggregate,
	) (*api.Response, error)

	Snapshot(
		ctx context.Context,
	) (*api.Response, error)

	StageRecovery(
		ctx context.Context,
		BackupId *string,
	) (*api.Response, error)

	StartMaintenance(
		ctx context.Context,
		Hosts *api.Hosts,
	) (*api.Response, error)

	TriggerExplicitTaskReconciliation(
		ctx context.Context,
		Settings *api.ExplicitReconciliationSettings,
	) (*api.Response, error)

	TriggerImplicitTaskReconciliation(
		ctx context.Context,
	) (*api.Response, error)

	UnloadRecovery(
		ctx context.Context,
	) (*api.Response, error)
}

// New prepares an implementation of the AuroraAdmin service for
// registration.
//
// 	handler := AuroraAdminHandler{}
// 	dispatcher.Register(auroraadminserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "AuroraAdmin",
		Methods: []thrift.Method{

			thrift.Method{
				Name: "commitRecovery",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.CommitRecovery),
				},
				Signature:    "CommitRecovery() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "deleteRecoveryTasks",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.DeleteRecoveryTasks),
				},
				Signature:    "DeleteRecoveryTasks(Query *api.TaskQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "drainHosts",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.DrainHosts),
				},
				Signature:    "DrainHosts(Hosts *api.Hosts) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "endMaintenance",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.EndMaintenance),
				},
				Signature:    "EndMaintenance(Hosts *api.Hosts) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "forceTaskState",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.ForceTaskState),
				},
				Signature:    "ForceTaskState(TaskId *string, Status *api.ScheduleStatus) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "listBackups",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.ListBackups),
				},
				Signature:    "ListBackups() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "maintenanceStatus",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.MaintenanceStatus),
				},
				Signature:    "MaintenanceStatus(Hosts *api.Hosts) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "performBackup",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.PerformBackup),
				},
				Signature:    "PerformBackup() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "pruneTasks",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.PruneTasks),
				},
				Signature:    "PruneTasks(Query *api.TaskQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "queryRecovery",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.QueryRecovery),
				},
				Signature:    "QueryRecovery(Query *api.TaskQuery) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "setQuota",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.SetQuota),
				},
				Signature:    "SetQuota(OwnerRole *string, Quota *api.ResourceAggregate) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "snapshot",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Snapshot),
				},
				Signature:    "Snapshot() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "stageRecovery",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.StageRecovery),
				},
				Signature:    "StageRecovery(BackupId *string) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "startMaintenance",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.StartMaintenance),
				},
				Signature:    "StartMaintenance(Hosts *api.Hosts) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "triggerExplicitTaskReconciliation",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.TriggerExplicitTaskReconciliation),
				},
				Signature:    "TriggerExplicitTaskReconciliation(Settings *api.ExplicitReconciliationSettings) (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "triggerImplicitTaskReconciliation",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.TriggerImplicitTaskReconciliation),
				},
				Signature:    "TriggerImplicitTaskReconciliation() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},

			thrift.Method{
				Name: "unloadRecovery",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.UnloadRecovery),
				},
				Signature:    "UnloadRecovery() (*api.Response)",
				ThriftModule: api.ThriftModule,
			},
		},
	}

	procedures := make([]transport.Procedure, 0, 17)

	procedures = append(
		procedures,
		auroraschedulermanagerserver.New(
			impl,
			append(
				opts,
				thrift.Named("AuroraAdmin"),
			)...,
		)...,
	)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

func (h handler) CommitRecovery(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_CommitRecovery_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.CommitRecovery(ctx)

	hadError := err != nil
	result, err := api.AuroraAdmin_CommitRecovery_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) DeleteRecoveryTasks(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_DeleteRecoveryTasks_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.DeleteRecoveryTasks(ctx, args.Query)

	hadError := err != nil
	result, err := api.AuroraAdmin_DeleteRecoveryTasks_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) DrainHosts(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_DrainHosts_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.DrainHosts(ctx, args.Hosts)

	hadError := err != nil
	result, err := api.AuroraAdmin_DrainHosts_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) EndMaintenance(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_EndMaintenance_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.EndMaintenance(ctx, args.Hosts)

	hadError := err != nil
	result, err := api.AuroraAdmin_EndMaintenance_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) ForceTaskState(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_ForceTaskState_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.ForceTaskState(ctx, args.TaskId, args.Status)

	hadError := err != nil
	result, err := api.AuroraAdmin_ForceTaskState_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) ListBackups(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_ListBackups_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.ListBackups(ctx)

	hadError := err != nil
	result, err := api.AuroraAdmin_ListBackups_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) MaintenanceStatus(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_MaintenanceStatus_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.MaintenanceStatus(ctx, args.Hosts)

	hadError := err != nil
	result, err := api.AuroraAdmin_MaintenanceStatus_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) PerformBackup(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_PerformBackup_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.PerformBackup(ctx)

	hadError := err != nil
	result, err := api.AuroraAdmin_PerformBackup_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) PruneTasks(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_PruneTasks_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.PruneTasks(ctx, args.Query)

	hadError := err != nil
	result, err := api.AuroraAdmin_PruneTasks_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) QueryRecovery(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_QueryRecovery_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.QueryRecovery(ctx, args.Query)

	hadError := err != nil
	result, err := api.AuroraAdmin_QueryRecovery_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) SetQuota(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_SetQuota_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.SetQuota(ctx, args.OwnerRole, args.Quota)

	hadError := err != nil
	result, err := api.AuroraAdmin_SetQuota_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) Snapshot(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_Snapshot_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.Snapshot(ctx)

	hadError := err != nil
	result, err := api.AuroraAdmin_Snapshot_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) StageRecovery(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_StageRecovery_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.StageRecovery(ctx, args.BackupId)

	hadError := err != nil
	result, err := api.AuroraAdmin_StageRecovery_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) StartMaintenance(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_StartMaintenance_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.StartMaintenance(ctx, args.Hosts)

	hadError := err != nil
	result, err := api.AuroraAdmin_StartMaintenance_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) TriggerExplicitTaskReconciliation(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_TriggerExplicitTaskReconciliation_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.TriggerExplicitTaskReconciliation(ctx, args.Settings)

	hadError := err != nil
	result, err := api.AuroraAdmin_TriggerExplicitTaskReconciliation_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) TriggerImplicitTaskReconciliation(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_TriggerImplicitTaskReconciliation_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.TriggerImplicitTaskReconciliation(ctx)

	hadError := err != nil
	result, err := api.AuroraAdmin_TriggerImplicitTaskReconciliation_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}

func (h handler) UnloadRecovery(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args api.AuroraAdmin_UnloadRecovery_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	success, err := h.impl.UnloadRecovery(ctx)

	hadError := err != nil
	result, err := api.AuroraAdmin_UnloadRecovery_Helper.WrapResponse(success, err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}
