// Code generated by thriftrw-plugin-yarpc
// @generated

package auroraschedulermanagerclient

import (
	context "context"
	api "github.com/uber/peloton/.gen/thrift/aurora/api"
	readonlyschedulerclient "github.com/uber/peloton/.gen/thrift/aurora/api/readonlyschedulerclient"
	wire "go.uber.org/thriftrw/wire"
	yarpc "go.uber.org/yarpc"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	reflect "reflect"
)

// Interface is a client for the AuroraSchedulerManager service.
type Interface interface {
	readonlyschedulerclient.Interface

	AbortJobUpdate(
		ctx context.Context,
		Key *api.JobUpdateKey,
		Message *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	AddInstances(
		ctx context.Context,
		Key *api.InstanceKey,
		Count *int32,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	CreateJob(
		ctx context.Context,
		Description *api.JobConfiguration,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	DescheduleCronJob(
		ctx context.Context,
		Job *api.JobKey,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	KillTasks(
		ctx context.Context,
		Job *api.JobKey,
		Instances map[int32]struct{},
		Message *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	PauseJobUpdate(
		ctx context.Context,
		Key *api.JobUpdateKey,
		Message *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	PulseJobUpdate(
		ctx context.Context,
		Key *api.JobUpdateKey,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	ReplaceCronTemplate(
		ctx context.Context,
		Config *api.JobConfiguration,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	RestartShards(
		ctx context.Context,
		Job *api.JobKey,
		ShardIds map[int32]struct{},
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	ResumeJobUpdate(
		ctx context.Context,
		Key *api.JobUpdateKey,
		Message *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	RollbackJobUpdate(
		ctx context.Context,
		Key *api.JobUpdateKey,
		Message *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	ScheduleCronJob(
		ctx context.Context,
		Description *api.JobConfiguration,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	StartCronJob(
		ctx context.Context,
		Job *api.JobKey,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	StartJobUpdate(
		ctx context.Context,
		Request *api.JobUpdateRequest,
		Message *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)
}

// New builds a new client for the AuroraSchedulerManager service.
//
// 	client := auroraschedulermanagerclient.New(dispatcher.ClientConfig("auroraschedulermanager"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "AuroraSchedulerManager",
			ClientConfig: c,
		}, opts...),

		Interface: readonlyschedulerclient.New(
			c,
			append(
				opts,
				thrift.Named("AuroraSchedulerManager"),
			)...,
		),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	readonlyschedulerclient.Interface

	c thrift.Client
}

func (c client) AbortJobUpdate(
	ctx context.Context,
	_Key *api.JobUpdateKey,
	_Message *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_AbortJobUpdate_Helper.Args(_Key, _Message)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_AbortJobUpdate_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_AbortJobUpdate_Helper.UnwrapResponse(&result)
	return
}

func (c client) AddInstances(
	ctx context.Context,
	_Key *api.InstanceKey,
	_Count *int32,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_AddInstances_Helper.Args(_Key, _Count)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_AddInstances_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_AddInstances_Helper.UnwrapResponse(&result)
	return
}

func (c client) CreateJob(
	ctx context.Context,
	_Description *api.JobConfiguration,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_CreateJob_Helper.Args(_Description)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_CreateJob_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_CreateJob_Helper.UnwrapResponse(&result)
	return
}

func (c client) DescheduleCronJob(
	ctx context.Context,
	_Job *api.JobKey,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_DescheduleCronJob_Helper.Args(_Job)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_DescheduleCronJob_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_DescheduleCronJob_Helper.UnwrapResponse(&result)
	return
}

func (c client) KillTasks(
	ctx context.Context,
	_Job *api.JobKey,
	_Instances map[int32]struct{},
	_Message *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_KillTasks_Helper.Args(_Job, _Instances, _Message)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_KillTasks_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_KillTasks_Helper.UnwrapResponse(&result)
	return
}

func (c client) PauseJobUpdate(
	ctx context.Context,
	_Key *api.JobUpdateKey,
	_Message *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_PauseJobUpdate_Helper.Args(_Key, _Message)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_PauseJobUpdate_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_PauseJobUpdate_Helper.UnwrapResponse(&result)
	return
}

func (c client) PulseJobUpdate(
	ctx context.Context,
	_Key *api.JobUpdateKey,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_PulseJobUpdate_Helper.Args(_Key)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_PulseJobUpdate_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_PulseJobUpdate_Helper.UnwrapResponse(&result)
	return
}

func (c client) ReplaceCronTemplate(
	ctx context.Context,
	_Config *api.JobConfiguration,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_ReplaceCronTemplate_Helper.Args(_Config)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_ReplaceCronTemplate_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_ReplaceCronTemplate_Helper.UnwrapResponse(&result)
	return
}

func (c client) RestartShards(
	ctx context.Context,
	_Job *api.JobKey,
	_ShardIds map[int32]struct{},
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_RestartShards_Helper.Args(_Job, _ShardIds)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_RestartShards_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_RestartShards_Helper.UnwrapResponse(&result)
	return
}

func (c client) ResumeJobUpdate(
	ctx context.Context,
	_Key *api.JobUpdateKey,
	_Message *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_ResumeJobUpdate_Helper.Args(_Key, _Message)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_ResumeJobUpdate_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_ResumeJobUpdate_Helper.UnwrapResponse(&result)
	return
}

func (c client) RollbackJobUpdate(
	ctx context.Context,
	_Key *api.JobUpdateKey,
	_Message *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_RollbackJobUpdate_Helper.Args(_Key, _Message)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_RollbackJobUpdate_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_RollbackJobUpdate_Helper.UnwrapResponse(&result)
	return
}

func (c client) ScheduleCronJob(
	ctx context.Context,
	_Description *api.JobConfiguration,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_ScheduleCronJob_Helper.Args(_Description)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_ScheduleCronJob_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_ScheduleCronJob_Helper.UnwrapResponse(&result)
	return
}

func (c client) StartCronJob(
	ctx context.Context,
	_Job *api.JobKey,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_StartCronJob_Helper.Args(_Job)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_StartCronJob_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_StartCronJob_Helper.UnwrapResponse(&result)
	return
}

func (c client) StartJobUpdate(
	ctx context.Context,
	_Request *api.JobUpdateRequest,
	_Message *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraSchedulerManager_StartJobUpdate_Helper.Args(_Request, _Message)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraSchedulerManager_StartJobUpdate_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraSchedulerManager_StartJobUpdate_Helper.UnwrapResponse(&result)
	return
}
