// Code generated by thriftrw v1.19.1. DO NOT EDIT.
// @generated

package api

import (
	errors "errors"
	fmt "fmt"
	multierr "go.uber.org/multierr"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
	strings "strings"
)

// AuroraSchedulerManager_ReplaceCronTemplate_Args represents the arguments for the AuroraSchedulerManager.replaceCronTemplate function.
//
// The arguments for replaceCronTemplate are sent and received over the wire as this struct.
type AuroraSchedulerManager_ReplaceCronTemplate_Args struct {
	Config *JobConfiguration `json:"config,omitempty"`
}

// ToWire translates a AuroraSchedulerManager_ReplaceCronTemplate_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Config != nil {
		w, err = v.Config.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a AuroraSchedulerManager_ReplaceCronTemplate_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuroraSchedulerManager_ReplaceCronTemplate_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuroraSchedulerManager_ReplaceCronTemplate_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Config, err = _JobConfiguration_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a AuroraSchedulerManager_ReplaceCronTemplate_Args
// struct.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Config != nil {
		fields[i] = fmt.Sprintf("Config: %v", v.Config)
		i++
	}

	return fmt.Sprintf("AuroraSchedulerManager_ReplaceCronTemplate_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuroraSchedulerManager_ReplaceCronTemplate_Args match the
// provided AuroraSchedulerManager_ReplaceCronTemplate_Args.
//
// This function performs a deep comparison.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) Equals(rhs *AuroraSchedulerManager_ReplaceCronTemplate_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Config == nil && rhs.Config == nil) || (v.Config != nil && rhs.Config != nil && v.Config.Equals(rhs.Config))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuroraSchedulerManager_ReplaceCronTemplate_Args.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Config != nil {
		err = multierr.Append(err, enc.AddObject("config", v.Config))
	}
	return err
}

// GetConfig returns the value of Config if it is set or its
// zero value if it is unset.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) GetConfig() (o *JobConfiguration) {
	if v != nil && v.Config != nil {
		return v.Config
	}

	return
}

// IsSetConfig returns true if Config is not nil.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) IsSetConfig() bool {
	return v != nil && v.Config != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "replaceCronTemplate" for this struct.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) MethodName() string {
	return "replaceCronTemplate"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// AuroraSchedulerManager_ReplaceCronTemplate_Helper provides functions that aid in handling the
// parameters and return values of the AuroraSchedulerManager.replaceCronTemplate
// function.
var AuroraSchedulerManager_ReplaceCronTemplate_Helper = struct {
	// Args accepts the parameters of replaceCronTemplate in-order and returns
	// the arguments struct for the function.
	Args func(
		config *JobConfiguration,
	) *AuroraSchedulerManager_ReplaceCronTemplate_Args

	// IsException returns true if the given error can be thrown
	// by replaceCronTemplate.
	//
	// An error can be thrown by replaceCronTemplate only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for replaceCronTemplate
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// replaceCronTemplate into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by replaceCronTemplate
	//
	//   value, err := replaceCronTemplate(args)
	//   result, err := AuroraSchedulerManager_ReplaceCronTemplate_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from replaceCronTemplate: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*Response, error) (*AuroraSchedulerManager_ReplaceCronTemplate_Result, error)

	// UnwrapResponse takes the result struct for replaceCronTemplate
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if replaceCronTemplate threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := AuroraSchedulerManager_ReplaceCronTemplate_Helper.UnwrapResponse(result)
	UnwrapResponse func(*AuroraSchedulerManager_ReplaceCronTemplate_Result) (*Response, error)
}{}

func init() {
	AuroraSchedulerManager_ReplaceCronTemplate_Helper.Args = func(
		config *JobConfiguration,
	) *AuroraSchedulerManager_ReplaceCronTemplate_Args {
		return &AuroraSchedulerManager_ReplaceCronTemplate_Args{
			Config: config,
		}
	}

	AuroraSchedulerManager_ReplaceCronTemplate_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	AuroraSchedulerManager_ReplaceCronTemplate_Helper.WrapResponse = func(success *Response, err error) (*AuroraSchedulerManager_ReplaceCronTemplate_Result, error) {
		if err == nil {
			return &AuroraSchedulerManager_ReplaceCronTemplate_Result{Success: success}, nil
		}

		return nil, err
	}
	AuroraSchedulerManager_ReplaceCronTemplate_Helper.UnwrapResponse = func(result *AuroraSchedulerManager_ReplaceCronTemplate_Result) (success *Response, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// AuroraSchedulerManager_ReplaceCronTemplate_Result represents the result of a AuroraSchedulerManager.replaceCronTemplate function call.
//
// The result of a replaceCronTemplate execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type AuroraSchedulerManager_ReplaceCronTemplate_Result struct {
	// Value returned by replaceCronTemplate after a successful execution.
	Success *Response `json:"success,omitempty"`
}

// ToWire translates a AuroraSchedulerManager_ReplaceCronTemplate_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("AuroraSchedulerManager_ReplaceCronTemplate_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a AuroraSchedulerManager_ReplaceCronTemplate_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuroraSchedulerManager_ReplaceCronTemplate_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuroraSchedulerManager_ReplaceCronTemplate_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _Response_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("AuroraSchedulerManager_ReplaceCronTemplate_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a AuroraSchedulerManager_ReplaceCronTemplate_Result
// struct.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("AuroraSchedulerManager_ReplaceCronTemplate_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuroraSchedulerManager_ReplaceCronTemplate_Result match the
// provided AuroraSchedulerManager_ReplaceCronTemplate_Result.
//
// This function performs a deep comparison.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) Equals(rhs *AuroraSchedulerManager_ReplaceCronTemplate_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuroraSchedulerManager_ReplaceCronTemplate_Result.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) GetSuccess() (o *Response) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "replaceCronTemplate" for this struct.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) MethodName() string {
	return "replaceCronTemplate"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *AuroraSchedulerManager_ReplaceCronTemplate_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
