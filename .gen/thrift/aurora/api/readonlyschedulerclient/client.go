// Code generated by thriftrw-plugin-yarpc
// @generated

package readonlyschedulerclient

import (
	context "context"
	api "github.com/uber/peloton/.gen/thrift/aurora/api"
	wire "go.uber.org/thriftrw/wire"
	yarpc "go.uber.org/yarpc"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	reflect "reflect"
)

// Interface is a client for the ReadOnlyScheduler service.
type Interface interface {
	GetConfigSummary(
		ctx context.Context,
		Job *api.JobKey,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetJobSummary(
		ctx context.Context,
		Role *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetJobUpdateDetails(
		ctx context.Context,
		Key *api.JobUpdateKey,
		Query *api.JobUpdateQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetJobUpdateDiff(
		ctx context.Context,
		Request *api.JobUpdateRequest,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetJobUpdateSummaries(
		ctx context.Context,
		JobUpdateQuery *api.JobUpdateQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetJobs(
		ctx context.Context,
		OwnerRole *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetPendingReason(
		ctx context.Context,
		Query *api.TaskQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetQuota(
		ctx context.Context,
		OwnerRole *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetRoleSummary(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetTasksStatus(
		ctx context.Context,
		Query *api.TaskQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetTasksWithoutConfigs(
		ctx context.Context,
		Query *api.TaskQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	GetTierConfigs(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	PopulateJobConfig(
		ctx context.Context,
		Description *api.JobConfiguration,
		opts ...yarpc.CallOption,
	) (*api.Response, error)
}

// New builds a new client for the ReadOnlyScheduler service.
//
// 	client := readonlyschedulerclient.New(dispatcher.ClientConfig("readonlyscheduler"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "ReadOnlyScheduler",
			ClientConfig: c,
		}, opts...),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	c thrift.Client
}

func (c client) GetConfigSummary(
	ctx context.Context,
	_Job *api.JobKey,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetConfigSummary_Helper.Args(_Job)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetConfigSummary_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetConfigSummary_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetJobSummary(
	ctx context.Context,
	_Role *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetJobSummary_Helper.Args(_Role)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetJobSummary_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetJobSummary_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetJobUpdateDetails(
	ctx context.Context,
	_Key *api.JobUpdateKey,
	_Query *api.JobUpdateQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetJobUpdateDetails_Helper.Args(_Key, _Query)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetJobUpdateDetails_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetJobUpdateDetails_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetJobUpdateDiff(
	ctx context.Context,
	_Request *api.JobUpdateRequest,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetJobUpdateDiff_Helper.Args(_Request)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetJobUpdateDiff_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetJobUpdateDiff_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetJobUpdateSummaries(
	ctx context.Context,
	_JobUpdateQuery *api.JobUpdateQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetJobUpdateSummaries_Helper.Args(_JobUpdateQuery)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetJobUpdateSummaries_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetJobUpdateSummaries_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetJobs(
	ctx context.Context,
	_OwnerRole *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetJobs_Helper.Args(_OwnerRole)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetJobs_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetJobs_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetPendingReason(
	ctx context.Context,
	_Query *api.TaskQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetPendingReason_Helper.Args(_Query)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetPendingReason_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetPendingReason_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetQuota(
	ctx context.Context,
	_OwnerRole *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetQuota_Helper.Args(_OwnerRole)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetQuota_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetQuota_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetRoleSummary(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetRoleSummary_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetRoleSummary_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetRoleSummary_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetTasksStatus(
	ctx context.Context,
	_Query *api.TaskQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetTasksStatus_Helper.Args(_Query)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetTasksStatus_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetTasksStatus_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetTasksWithoutConfigs(
	ctx context.Context,
	_Query *api.TaskQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetTasksWithoutConfigs_Helper.Args(_Query)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetTasksWithoutConfigs_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetTasksWithoutConfigs_Helper.UnwrapResponse(&result)
	return
}

func (c client) GetTierConfigs(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_GetTierConfigs_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_GetTierConfigs_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_GetTierConfigs_Helper.UnwrapResponse(&result)
	return
}

func (c client) PopulateJobConfig(
	ctx context.Context,
	_Description *api.JobConfiguration,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.ReadOnlyScheduler_PopulateJobConfig_Helper.Args(_Description)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.ReadOnlyScheduler_PopulateJobConfig_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.ReadOnlyScheduler_PopulateJobConfig_Helper.UnwrapResponse(&result)
	return
}
