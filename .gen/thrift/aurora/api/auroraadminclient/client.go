// Code generated by thriftrw-plugin-yarpc
// @generated

package auroraadminclient

import (
	context "context"
	api "github.com/uber/peloton/.gen/thrift/aurora/api"
	auroraschedulermanagerclient "github.com/uber/peloton/.gen/thrift/aurora/api/auroraschedulermanagerclient"
	wire "go.uber.org/thriftrw/wire"
	yarpc "go.uber.org/yarpc"
	transport "go.uber.org/yarpc/api/transport"
	thrift "go.uber.org/yarpc/encoding/thrift"
	reflect "reflect"
)

// Interface is a client for the AuroraAdmin service.
type Interface interface {
	auroraschedulermanagerclient.Interface

	CommitRecovery(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	DeleteRecoveryTasks(
		ctx context.Context,
		Query *api.TaskQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	DrainHosts(
		ctx context.Context,
		Hosts *api.Hosts,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	EndMaintenance(
		ctx context.Context,
		Hosts *api.Hosts,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	ForceTaskState(
		ctx context.Context,
		TaskId *string,
		Status *api.ScheduleStatus,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	ListBackups(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	MaintenanceStatus(
		ctx context.Context,
		Hosts *api.Hosts,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	PerformBackup(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	PruneTasks(
		ctx context.Context,
		Query *api.TaskQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	QueryRecovery(
		ctx context.Context,
		Query *api.TaskQuery,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	SetQuota(
		ctx context.Context,
		OwnerRole *string,
		Quota *api.ResourceAggregate,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	Snapshot(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	StageRecovery(
		ctx context.Context,
		BackupId *string,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	StartMaintenance(
		ctx context.Context,
		Hosts *api.Hosts,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	TriggerExplicitTaskReconciliation(
		ctx context.Context,
		Settings *api.ExplicitReconciliationSettings,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	TriggerImplicitTaskReconciliation(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)

	UnloadRecovery(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) (*api.Response, error)
}

// New builds a new client for the AuroraAdmin service.
//
// 	client := auroraadminclient.New(dispatcher.ClientConfig("auroraadmin"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "AuroraAdmin",
			ClientConfig: c,
		}, opts...),

		Interface: auroraschedulermanagerclient.New(
			c,
			append(
				opts,
				thrift.Named("AuroraAdmin"),
			)...,
		),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	auroraschedulermanagerclient.Interface

	c thrift.Client
}

func (c client) CommitRecovery(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_CommitRecovery_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_CommitRecovery_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_CommitRecovery_Helper.UnwrapResponse(&result)
	return
}

func (c client) DeleteRecoveryTasks(
	ctx context.Context,
	_Query *api.TaskQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_DeleteRecoveryTasks_Helper.Args(_Query)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_DeleteRecoveryTasks_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_DeleteRecoveryTasks_Helper.UnwrapResponse(&result)
	return
}

func (c client) DrainHosts(
	ctx context.Context,
	_Hosts *api.Hosts,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_DrainHosts_Helper.Args(_Hosts)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_DrainHosts_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_DrainHosts_Helper.UnwrapResponse(&result)
	return
}

func (c client) EndMaintenance(
	ctx context.Context,
	_Hosts *api.Hosts,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_EndMaintenance_Helper.Args(_Hosts)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_EndMaintenance_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_EndMaintenance_Helper.UnwrapResponse(&result)
	return
}

func (c client) ForceTaskState(
	ctx context.Context,
	_TaskId *string,
	_Status *api.ScheduleStatus,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_ForceTaskState_Helper.Args(_TaskId, _Status)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_ForceTaskState_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_ForceTaskState_Helper.UnwrapResponse(&result)
	return
}

func (c client) ListBackups(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_ListBackups_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_ListBackups_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_ListBackups_Helper.UnwrapResponse(&result)
	return
}

func (c client) MaintenanceStatus(
	ctx context.Context,
	_Hosts *api.Hosts,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_MaintenanceStatus_Helper.Args(_Hosts)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_MaintenanceStatus_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_MaintenanceStatus_Helper.UnwrapResponse(&result)
	return
}

func (c client) PerformBackup(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_PerformBackup_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_PerformBackup_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_PerformBackup_Helper.UnwrapResponse(&result)
	return
}

func (c client) PruneTasks(
	ctx context.Context,
	_Query *api.TaskQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_PruneTasks_Helper.Args(_Query)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_PruneTasks_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_PruneTasks_Helper.UnwrapResponse(&result)
	return
}

func (c client) QueryRecovery(
	ctx context.Context,
	_Query *api.TaskQuery,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_QueryRecovery_Helper.Args(_Query)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_QueryRecovery_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_QueryRecovery_Helper.UnwrapResponse(&result)
	return
}

func (c client) SetQuota(
	ctx context.Context,
	_OwnerRole *string,
	_Quota *api.ResourceAggregate,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_SetQuota_Helper.Args(_OwnerRole, _Quota)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_SetQuota_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_SetQuota_Helper.UnwrapResponse(&result)
	return
}

func (c client) Snapshot(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_Snapshot_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_Snapshot_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_Snapshot_Helper.UnwrapResponse(&result)
	return
}

func (c client) StageRecovery(
	ctx context.Context,
	_BackupId *string,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_StageRecovery_Helper.Args(_BackupId)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_StageRecovery_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_StageRecovery_Helper.UnwrapResponse(&result)
	return
}

func (c client) StartMaintenance(
	ctx context.Context,
	_Hosts *api.Hosts,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_StartMaintenance_Helper.Args(_Hosts)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_StartMaintenance_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_StartMaintenance_Helper.UnwrapResponse(&result)
	return
}

func (c client) TriggerExplicitTaskReconciliation(
	ctx context.Context,
	_Settings *api.ExplicitReconciliationSettings,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_TriggerExplicitTaskReconciliation_Helper.Args(_Settings)

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_TriggerExplicitTaskReconciliation_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_TriggerExplicitTaskReconciliation_Helper.UnwrapResponse(&result)
	return
}

func (c client) TriggerImplicitTaskReconciliation(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_TriggerImplicitTaskReconciliation_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_TriggerImplicitTaskReconciliation_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_TriggerImplicitTaskReconciliation_Helper.UnwrapResponse(&result)
	return
}

func (c client) UnloadRecovery(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (success *api.Response, err error) {

	args := api.AuroraAdmin_UnloadRecovery_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result api.AuroraAdmin_UnloadRecovery_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	success, err = api.AuroraAdmin_UnloadRecovery_Helper.UnwrapResponse(&result)
	return
}
